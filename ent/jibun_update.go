// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/demol"
	"gopms/ent/jibun"
	"gopms/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JibunUpdate is the builder for updating Jibun entities.
type JibunUpdate struct {
	config
	hooks    []Hook
	mutation *JibunMutation
}

// Where appends a list predicates to the JibunUpdate builder.
func (ju *JibunUpdate) Where(ps ...predicate.Jibun) *JibunUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetBjdongCd sets the "bjdong_cd" field.
func (ju *JibunUpdate) SetBjdongCd(s string) *JibunUpdate {
	ju.mutation.SetBjdongCd(s)
	return ju
}

// SetSigunguCd sets the "sigungu_cd" field.
func (ju *JibunUpdate) SetSigunguCd(s string) *JibunUpdate {
	ju.mutation.SetSigunguCd(s)
	return ju
}

// SetBun sets the "bun" field.
func (ju *JibunUpdate) SetBun(s string) *JibunUpdate {
	ju.mutation.SetBun(s)
	return ju
}

// SetJi sets the "ji" field.
func (ju *JibunUpdate) SetJi(s string) *JibunUpdate {
	ju.mutation.SetJi(s)
	return ju
}

// SetGuyukCd sets the "guyuk_cd" field.
func (ju *JibunUpdate) SetGuyukCd(s string) *JibunUpdate {
	ju.mutation.SetGuyukCd(s)
	return ju
}

// SetGuyukCdNm sets the "guyuk_cd_nm" field.
func (ju *JibunUpdate) SetGuyukCdNm(s string) *JibunUpdate {
	ju.mutation.SetGuyukCdNm(s)
	return ju
}

// SetJimokCd sets the "jimok_cd" field.
func (ju *JibunUpdate) SetJimokCd(s string) *JibunUpdate {
	ju.mutation.SetJimokCd(s)
	return ju
}

// SetJimokCdNm sets the "jimok_cd_nm" field.
func (ju *JibunUpdate) SetJimokCdNm(s string) *JibunUpdate {
	ju.mutation.SetJimokCdNm(s)
	return ju
}

// SetJiyukCd sets the "jiyuk_cd" field.
func (ju *JibunUpdate) SetJiyukCd(s string) *JibunUpdate {
	ju.mutation.SetJiyukCd(s)
	return ju
}

// SetJiyukCdNm sets the "jiyuk_cd_nm" field.
func (ju *JibunUpdate) SetJiyukCdNm(s string) *JibunUpdate {
	ju.mutation.SetJiyukCdNm(s)
	return ju
}

// SetJiguCd sets the "jigu_cd" field.
func (ju *JibunUpdate) SetJiguCd(s string) *JibunUpdate {
	ju.mutation.SetJiguCd(s)
	return ju
}

// SetJiguCdNm sets the "jigu_cd_nm" field.
func (ju *JibunUpdate) SetJiguCdNm(s string) *JibunUpdate {
	ju.mutation.SetJiguCdNm(s)
	return ju
}

// SetPlatGBCd sets the "plat_gb_cd" field.
func (ju *JibunUpdate) SetPlatGBCd(s string) *JibunUpdate {
	ju.mutation.SetPlatGBCd(s)
	return ju
}

// SetPlatPlc sets the "plat_plc" field.
func (ju *JibunUpdate) SetPlatPlc(s string) *JibunUpdate {
	ju.mutation.SetPlatPlc(s)
	return ju
}

// SetSplotNm sets the "splot_nm" field.
func (ju *JibunUpdate) SetSplotNm(s string) *JibunUpdate {
	ju.mutation.SetSplotNm(s)
	return ju
}

// SetBlock sets the "block" field.
func (ju *JibunUpdate) SetBlock(s string) *JibunUpdate {
	ju.mutation.SetBlock(s)
	return ju
}

// SetLot sets the "lot" field.
func (ju *JibunUpdate) SetLot(s string) *JibunUpdate {
	ju.mutation.SetLot(s)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JibunUpdate) SetUpdatedAt(t time.Time) *JibunUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ju *JibunUpdate) SetNillableUpdatedAt(t *time.Time) *JibunUpdate {
	if t != nil {
		ju.SetUpdatedAt(*t)
	}
	return ju
}

// AddDemolIDs adds the "demol" edge to the Demol entity by IDs.
func (ju *JibunUpdate) AddDemolIDs(ids ...int) *JibunUpdate {
	ju.mutation.AddDemolIDs(ids...)
	return ju
}

// AddDemol adds the "demol" edges to the Demol entity.
func (ju *JibunUpdate) AddDemol(d ...*Demol) *JibunUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ju.AddDemolIDs(ids...)
}

// Mutation returns the JibunMutation object of the builder.
func (ju *JibunUpdate) Mutation() *JibunMutation {
	return ju.mutation
}

// ClearDemol clears all "demol" edges to the Demol entity.
func (ju *JibunUpdate) ClearDemol() *JibunUpdate {
	ju.mutation.ClearDemol()
	return ju
}

// RemoveDemolIDs removes the "demol" edge to Demol entities by IDs.
func (ju *JibunUpdate) RemoveDemolIDs(ids ...int) *JibunUpdate {
	ju.mutation.RemoveDemolIDs(ids...)
	return ju
}

// RemoveDemol removes "demol" edges to Demol entities.
func (ju *JibunUpdate) RemoveDemol(d ...*Demol) *JibunUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ju.RemoveDemolIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JibunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, JibunMutation](ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JibunUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JibunUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JibunUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JibunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jibun.Table, jibun.Columns, sqlgraph.NewFieldSpec(jibun.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.BjdongCd(); ok {
		_spec.SetField(jibun.FieldBjdongCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.SigunguCd(); ok {
		_spec.SetField(jibun.FieldSigunguCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.Bun(); ok {
		_spec.SetField(jibun.FieldBun, field.TypeString, value)
	}
	if value, ok := ju.mutation.Ji(); ok {
		_spec.SetField(jibun.FieldJi, field.TypeString, value)
	}
	if value, ok := ju.mutation.GuyukCd(); ok {
		_spec.SetField(jibun.FieldGuyukCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.GuyukCdNm(); ok {
		_spec.SetField(jibun.FieldGuyukCdNm, field.TypeString, value)
	}
	if value, ok := ju.mutation.JimokCd(); ok {
		_spec.SetField(jibun.FieldJimokCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.JimokCdNm(); ok {
		_spec.SetField(jibun.FieldJimokCdNm, field.TypeString, value)
	}
	if value, ok := ju.mutation.JiyukCd(); ok {
		_spec.SetField(jibun.FieldJiyukCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.JiyukCdNm(); ok {
		_spec.SetField(jibun.FieldJiyukCdNm, field.TypeString, value)
	}
	if value, ok := ju.mutation.JiguCd(); ok {
		_spec.SetField(jibun.FieldJiguCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.JiguCdNm(); ok {
		_spec.SetField(jibun.FieldJiguCdNm, field.TypeString, value)
	}
	if value, ok := ju.mutation.PlatGBCd(); ok {
		_spec.SetField(jibun.FieldPlatGBCd, field.TypeString, value)
	}
	if value, ok := ju.mutation.PlatPlc(); ok {
		_spec.SetField(jibun.FieldPlatPlc, field.TypeString, value)
	}
	if value, ok := ju.mutation.SplotNm(); ok {
		_spec.SetField(jibun.FieldSplotNm, field.TypeString, value)
	}
	if value, ok := ju.mutation.Block(); ok {
		_spec.SetField(jibun.FieldBlock, field.TypeString, value)
	}
	if value, ok := ju.mutation.Lot(); ok {
		_spec.SetField(jibun.FieldLot, field.TypeString, value)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(jibun.FieldUpdatedAt, field.TypeTime, value)
	}
	if ju.mutation.DemolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedDemolIDs(); len(nodes) > 0 && !ju.mutation.DemolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.DemolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jibun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JibunUpdateOne is the builder for updating a single Jibun entity.
type JibunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JibunMutation
}

// SetBjdongCd sets the "bjdong_cd" field.
func (juo *JibunUpdateOne) SetBjdongCd(s string) *JibunUpdateOne {
	juo.mutation.SetBjdongCd(s)
	return juo
}

// SetSigunguCd sets the "sigungu_cd" field.
func (juo *JibunUpdateOne) SetSigunguCd(s string) *JibunUpdateOne {
	juo.mutation.SetSigunguCd(s)
	return juo
}

// SetBun sets the "bun" field.
func (juo *JibunUpdateOne) SetBun(s string) *JibunUpdateOne {
	juo.mutation.SetBun(s)
	return juo
}

// SetJi sets the "ji" field.
func (juo *JibunUpdateOne) SetJi(s string) *JibunUpdateOne {
	juo.mutation.SetJi(s)
	return juo
}

// SetGuyukCd sets the "guyuk_cd" field.
func (juo *JibunUpdateOne) SetGuyukCd(s string) *JibunUpdateOne {
	juo.mutation.SetGuyukCd(s)
	return juo
}

// SetGuyukCdNm sets the "guyuk_cd_nm" field.
func (juo *JibunUpdateOne) SetGuyukCdNm(s string) *JibunUpdateOne {
	juo.mutation.SetGuyukCdNm(s)
	return juo
}

// SetJimokCd sets the "jimok_cd" field.
func (juo *JibunUpdateOne) SetJimokCd(s string) *JibunUpdateOne {
	juo.mutation.SetJimokCd(s)
	return juo
}

// SetJimokCdNm sets the "jimok_cd_nm" field.
func (juo *JibunUpdateOne) SetJimokCdNm(s string) *JibunUpdateOne {
	juo.mutation.SetJimokCdNm(s)
	return juo
}

// SetJiyukCd sets the "jiyuk_cd" field.
func (juo *JibunUpdateOne) SetJiyukCd(s string) *JibunUpdateOne {
	juo.mutation.SetJiyukCd(s)
	return juo
}

// SetJiyukCdNm sets the "jiyuk_cd_nm" field.
func (juo *JibunUpdateOne) SetJiyukCdNm(s string) *JibunUpdateOne {
	juo.mutation.SetJiyukCdNm(s)
	return juo
}

// SetJiguCd sets the "jigu_cd" field.
func (juo *JibunUpdateOne) SetJiguCd(s string) *JibunUpdateOne {
	juo.mutation.SetJiguCd(s)
	return juo
}

// SetJiguCdNm sets the "jigu_cd_nm" field.
func (juo *JibunUpdateOne) SetJiguCdNm(s string) *JibunUpdateOne {
	juo.mutation.SetJiguCdNm(s)
	return juo
}

// SetPlatGBCd sets the "plat_gb_cd" field.
func (juo *JibunUpdateOne) SetPlatGBCd(s string) *JibunUpdateOne {
	juo.mutation.SetPlatGBCd(s)
	return juo
}

// SetPlatPlc sets the "plat_plc" field.
func (juo *JibunUpdateOne) SetPlatPlc(s string) *JibunUpdateOne {
	juo.mutation.SetPlatPlc(s)
	return juo
}

// SetSplotNm sets the "splot_nm" field.
func (juo *JibunUpdateOne) SetSplotNm(s string) *JibunUpdateOne {
	juo.mutation.SetSplotNm(s)
	return juo
}

// SetBlock sets the "block" field.
func (juo *JibunUpdateOne) SetBlock(s string) *JibunUpdateOne {
	juo.mutation.SetBlock(s)
	return juo
}

// SetLot sets the "lot" field.
func (juo *JibunUpdateOne) SetLot(s string) *JibunUpdateOne {
	juo.mutation.SetLot(s)
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JibunUpdateOne) SetUpdatedAt(t time.Time) *JibunUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (juo *JibunUpdateOne) SetNillableUpdatedAt(t *time.Time) *JibunUpdateOne {
	if t != nil {
		juo.SetUpdatedAt(*t)
	}
	return juo
}

// AddDemolIDs adds the "demol" edge to the Demol entity by IDs.
func (juo *JibunUpdateOne) AddDemolIDs(ids ...int) *JibunUpdateOne {
	juo.mutation.AddDemolIDs(ids...)
	return juo
}

// AddDemol adds the "demol" edges to the Demol entity.
func (juo *JibunUpdateOne) AddDemol(d ...*Demol) *JibunUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return juo.AddDemolIDs(ids...)
}

// Mutation returns the JibunMutation object of the builder.
func (juo *JibunUpdateOne) Mutation() *JibunMutation {
	return juo.mutation
}

// ClearDemol clears all "demol" edges to the Demol entity.
func (juo *JibunUpdateOne) ClearDemol() *JibunUpdateOne {
	juo.mutation.ClearDemol()
	return juo
}

// RemoveDemolIDs removes the "demol" edge to Demol entities by IDs.
func (juo *JibunUpdateOne) RemoveDemolIDs(ids ...int) *JibunUpdateOne {
	juo.mutation.RemoveDemolIDs(ids...)
	return juo
}

// RemoveDemol removes "demol" edges to Demol entities.
func (juo *JibunUpdateOne) RemoveDemol(d ...*Demol) *JibunUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return juo.RemoveDemolIDs(ids...)
}

// Where appends a list predicates to the JibunUpdate builder.
func (juo *JibunUpdateOne) Where(ps ...predicate.Jibun) *JibunUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JibunUpdateOne) Select(field string, fields ...string) *JibunUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Jibun entity.
func (juo *JibunUpdateOne) Save(ctx context.Context) (*Jibun, error) {
	return withHooks[*Jibun, JibunMutation](ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JibunUpdateOne) SaveX(ctx context.Context) *Jibun {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JibunUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JibunUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JibunUpdateOne) sqlSave(ctx context.Context) (_node *Jibun, err error) {
	_spec := sqlgraph.NewUpdateSpec(jibun.Table, jibun.Columns, sqlgraph.NewFieldSpec(jibun.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Jibun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jibun.FieldID)
		for _, f := range fields {
			if !jibun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jibun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.BjdongCd(); ok {
		_spec.SetField(jibun.FieldBjdongCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.SigunguCd(); ok {
		_spec.SetField(jibun.FieldSigunguCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.Bun(); ok {
		_spec.SetField(jibun.FieldBun, field.TypeString, value)
	}
	if value, ok := juo.mutation.Ji(); ok {
		_spec.SetField(jibun.FieldJi, field.TypeString, value)
	}
	if value, ok := juo.mutation.GuyukCd(); ok {
		_spec.SetField(jibun.FieldGuyukCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.GuyukCdNm(); ok {
		_spec.SetField(jibun.FieldGuyukCdNm, field.TypeString, value)
	}
	if value, ok := juo.mutation.JimokCd(); ok {
		_spec.SetField(jibun.FieldJimokCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.JimokCdNm(); ok {
		_spec.SetField(jibun.FieldJimokCdNm, field.TypeString, value)
	}
	if value, ok := juo.mutation.JiyukCd(); ok {
		_spec.SetField(jibun.FieldJiyukCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.JiyukCdNm(); ok {
		_spec.SetField(jibun.FieldJiyukCdNm, field.TypeString, value)
	}
	if value, ok := juo.mutation.JiguCd(); ok {
		_spec.SetField(jibun.FieldJiguCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.JiguCdNm(); ok {
		_spec.SetField(jibun.FieldJiguCdNm, field.TypeString, value)
	}
	if value, ok := juo.mutation.PlatGBCd(); ok {
		_spec.SetField(jibun.FieldPlatGBCd, field.TypeString, value)
	}
	if value, ok := juo.mutation.PlatPlc(); ok {
		_spec.SetField(jibun.FieldPlatPlc, field.TypeString, value)
	}
	if value, ok := juo.mutation.SplotNm(); ok {
		_spec.SetField(jibun.FieldSplotNm, field.TypeString, value)
	}
	if value, ok := juo.mutation.Block(); ok {
		_spec.SetField(jibun.FieldBlock, field.TypeString, value)
	}
	if value, ok := juo.mutation.Lot(); ok {
		_spec.SetField(jibun.FieldLot, field.TypeString, value)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(jibun.FieldUpdatedAt, field.TypeTime, value)
	}
	if juo.mutation.DemolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedDemolIDs(); len(nodes) > 0 && !juo.mutation.DemolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.DemolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Jibun{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jibun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
