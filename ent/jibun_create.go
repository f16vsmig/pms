// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/demol"
	"gopms/ent/jibun"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JibunCreate is the builder for creating a Jibun entity.
type JibunCreate struct {
	config
	mutation *JibunMutation
	hooks    []Hook
}

// SetBjdongCd sets the "bjdong_cd" field.
func (jc *JibunCreate) SetBjdongCd(s string) *JibunCreate {
	jc.mutation.SetBjdongCd(s)
	return jc
}

// SetSigunguCd sets the "sigungu_cd" field.
func (jc *JibunCreate) SetSigunguCd(s string) *JibunCreate {
	jc.mutation.SetSigunguCd(s)
	return jc
}

// SetBun sets the "bun" field.
func (jc *JibunCreate) SetBun(s string) *JibunCreate {
	jc.mutation.SetBun(s)
	return jc
}

// SetJi sets the "ji" field.
func (jc *JibunCreate) SetJi(s string) *JibunCreate {
	jc.mutation.SetJi(s)
	return jc
}

// SetGuyukCd sets the "guyuk_cd" field.
func (jc *JibunCreate) SetGuyukCd(s string) *JibunCreate {
	jc.mutation.SetGuyukCd(s)
	return jc
}

// SetGuyukCdNm sets the "guyuk_cd_nm" field.
func (jc *JibunCreate) SetGuyukCdNm(s string) *JibunCreate {
	jc.mutation.SetGuyukCdNm(s)
	return jc
}

// SetJimokCd sets the "jimok_cd" field.
func (jc *JibunCreate) SetJimokCd(s string) *JibunCreate {
	jc.mutation.SetJimokCd(s)
	return jc
}

// SetJimokCdNm sets the "jimok_cd_nm" field.
func (jc *JibunCreate) SetJimokCdNm(s string) *JibunCreate {
	jc.mutation.SetJimokCdNm(s)
	return jc
}

// SetJiyukCd sets the "jiyuk_cd" field.
func (jc *JibunCreate) SetJiyukCd(s string) *JibunCreate {
	jc.mutation.SetJiyukCd(s)
	return jc
}

// SetJiyukCdNm sets the "jiyuk_cd_nm" field.
func (jc *JibunCreate) SetJiyukCdNm(s string) *JibunCreate {
	jc.mutation.SetJiyukCdNm(s)
	return jc
}

// SetJiguCd sets the "jigu_cd" field.
func (jc *JibunCreate) SetJiguCd(s string) *JibunCreate {
	jc.mutation.SetJiguCd(s)
	return jc
}

// SetJiguCdNm sets the "jigu_cd_nm" field.
func (jc *JibunCreate) SetJiguCdNm(s string) *JibunCreate {
	jc.mutation.SetJiguCdNm(s)
	return jc
}

// SetPlatGBCd sets the "plat_gb_cd" field.
func (jc *JibunCreate) SetPlatGBCd(s string) *JibunCreate {
	jc.mutation.SetPlatGBCd(s)
	return jc
}

// SetPlatPlc sets the "plat_plc" field.
func (jc *JibunCreate) SetPlatPlc(s string) *JibunCreate {
	jc.mutation.SetPlatPlc(s)
	return jc
}

// SetSplotNm sets the "splot_nm" field.
func (jc *JibunCreate) SetSplotNm(s string) *JibunCreate {
	jc.mutation.SetSplotNm(s)
	return jc
}

// SetBlock sets the "block" field.
func (jc *JibunCreate) SetBlock(s string) *JibunCreate {
	jc.mutation.SetBlock(s)
	return jc
}

// SetLot sets the "lot" field.
func (jc *JibunCreate) SetLot(s string) *JibunCreate {
	jc.mutation.SetLot(s)
	return jc
}

// SetCreatedAt sets the "created_at" field.
func (jc *JibunCreate) SetCreatedAt(t time.Time) *JibunCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JibunCreate) SetNillableCreatedAt(t *time.Time) *JibunCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetUpdatedAt sets the "updated_at" field.
func (jc *JibunCreate) SetUpdatedAt(t time.Time) *JibunCreate {
	jc.mutation.SetUpdatedAt(t)
	return jc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jc *JibunCreate) SetNillableUpdatedAt(t *time.Time) *JibunCreate {
	if t != nil {
		jc.SetUpdatedAt(*t)
	}
	return jc
}

// AddDemolIDs adds the "demol" edge to the Demol entity by IDs.
func (jc *JibunCreate) AddDemolIDs(ids ...int) *JibunCreate {
	jc.mutation.AddDemolIDs(ids...)
	return jc
}

// AddDemol adds the "demol" edges to the Demol entity.
func (jc *JibunCreate) AddDemol(d ...*Demol) *JibunCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return jc.AddDemolIDs(ids...)
}

// Mutation returns the JibunMutation object of the builder.
func (jc *JibunCreate) Mutation() *JibunMutation {
	return jc.mutation
}

// Save creates the Jibun in the database.
func (jc *JibunCreate) Save(ctx context.Context) (*Jibun, error) {
	jc.defaults()
	return withHooks[*Jibun, JibunMutation](ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JibunCreate) SaveX(ctx context.Context) *Jibun {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JibunCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JibunCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JibunCreate) defaults() {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := jibun.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		v := jibun.DefaultUpdatedAt()
		jc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JibunCreate) check() error {
	if _, ok := jc.mutation.BjdongCd(); !ok {
		return &ValidationError{Name: "bjdong_cd", err: errors.New(`ent: missing required field "Jibun.bjdong_cd"`)}
	}
	if _, ok := jc.mutation.SigunguCd(); !ok {
		return &ValidationError{Name: "sigungu_cd", err: errors.New(`ent: missing required field "Jibun.sigungu_cd"`)}
	}
	if _, ok := jc.mutation.Bun(); !ok {
		return &ValidationError{Name: "bun", err: errors.New(`ent: missing required field "Jibun.bun"`)}
	}
	if _, ok := jc.mutation.Ji(); !ok {
		return &ValidationError{Name: "ji", err: errors.New(`ent: missing required field "Jibun.ji"`)}
	}
	if _, ok := jc.mutation.GuyukCd(); !ok {
		return &ValidationError{Name: "guyuk_cd", err: errors.New(`ent: missing required field "Jibun.guyuk_cd"`)}
	}
	if _, ok := jc.mutation.GuyukCdNm(); !ok {
		return &ValidationError{Name: "guyuk_cd_nm", err: errors.New(`ent: missing required field "Jibun.guyuk_cd_nm"`)}
	}
	if _, ok := jc.mutation.JimokCd(); !ok {
		return &ValidationError{Name: "jimok_cd", err: errors.New(`ent: missing required field "Jibun.jimok_cd"`)}
	}
	if _, ok := jc.mutation.JimokCdNm(); !ok {
		return &ValidationError{Name: "jimok_cd_nm", err: errors.New(`ent: missing required field "Jibun.jimok_cd_nm"`)}
	}
	if _, ok := jc.mutation.JiyukCd(); !ok {
		return &ValidationError{Name: "jiyuk_cd", err: errors.New(`ent: missing required field "Jibun.jiyuk_cd"`)}
	}
	if _, ok := jc.mutation.JiyukCdNm(); !ok {
		return &ValidationError{Name: "jiyuk_cd_nm", err: errors.New(`ent: missing required field "Jibun.jiyuk_cd_nm"`)}
	}
	if _, ok := jc.mutation.JiguCd(); !ok {
		return &ValidationError{Name: "jigu_cd", err: errors.New(`ent: missing required field "Jibun.jigu_cd"`)}
	}
	if _, ok := jc.mutation.JiguCdNm(); !ok {
		return &ValidationError{Name: "jigu_cd_nm", err: errors.New(`ent: missing required field "Jibun.jigu_cd_nm"`)}
	}
	if _, ok := jc.mutation.PlatGBCd(); !ok {
		return &ValidationError{Name: "plat_gb_cd", err: errors.New(`ent: missing required field "Jibun.plat_gb_cd"`)}
	}
	if _, ok := jc.mutation.PlatPlc(); !ok {
		return &ValidationError{Name: "plat_plc", err: errors.New(`ent: missing required field "Jibun.plat_plc"`)}
	}
	if _, ok := jc.mutation.SplotNm(); !ok {
		return &ValidationError{Name: "splot_nm", err: errors.New(`ent: missing required field "Jibun.splot_nm"`)}
	}
	if _, ok := jc.mutation.Block(); !ok {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required field "Jibun.block"`)}
	}
	if _, ok := jc.mutation.Lot(); !ok {
		return &ValidationError{Name: "lot", err: errors.New(`ent: missing required field "Jibun.lot"`)}
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Jibun.created_at"`)}
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Jibun.updated_at"`)}
	}
	return nil
}

func (jc *JibunCreate) sqlSave(ctx context.Context) (*Jibun, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JibunCreate) createSpec() (*Jibun, *sqlgraph.CreateSpec) {
	var (
		_node = &Jibun{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(jibun.Table, sqlgraph.NewFieldSpec(jibun.FieldID, field.TypeInt))
	)
	if value, ok := jc.mutation.BjdongCd(); ok {
		_spec.SetField(jibun.FieldBjdongCd, field.TypeString, value)
		_node.BjdongCd = value
	}
	if value, ok := jc.mutation.SigunguCd(); ok {
		_spec.SetField(jibun.FieldSigunguCd, field.TypeString, value)
		_node.SigunguCd = value
	}
	if value, ok := jc.mutation.Bun(); ok {
		_spec.SetField(jibun.FieldBun, field.TypeString, value)
		_node.Bun = value
	}
	if value, ok := jc.mutation.Ji(); ok {
		_spec.SetField(jibun.FieldJi, field.TypeString, value)
		_node.Ji = value
	}
	if value, ok := jc.mutation.GuyukCd(); ok {
		_spec.SetField(jibun.FieldGuyukCd, field.TypeString, value)
		_node.GuyukCd = value
	}
	if value, ok := jc.mutation.GuyukCdNm(); ok {
		_spec.SetField(jibun.FieldGuyukCdNm, field.TypeString, value)
		_node.GuyukCdNm = value
	}
	if value, ok := jc.mutation.JimokCd(); ok {
		_spec.SetField(jibun.FieldJimokCd, field.TypeString, value)
		_node.JimokCd = value
	}
	if value, ok := jc.mutation.JimokCdNm(); ok {
		_spec.SetField(jibun.FieldJimokCdNm, field.TypeString, value)
		_node.JimokCdNm = value
	}
	if value, ok := jc.mutation.JiyukCd(); ok {
		_spec.SetField(jibun.FieldJiyukCd, field.TypeString, value)
		_node.JiyukCd = value
	}
	if value, ok := jc.mutation.JiyukCdNm(); ok {
		_spec.SetField(jibun.FieldJiyukCdNm, field.TypeString, value)
		_node.JiyukCdNm = value
	}
	if value, ok := jc.mutation.JiguCd(); ok {
		_spec.SetField(jibun.FieldJiguCd, field.TypeString, value)
		_node.JiguCd = value
	}
	if value, ok := jc.mutation.JiguCdNm(); ok {
		_spec.SetField(jibun.FieldJiguCdNm, field.TypeString, value)
		_node.JiguCdNm = value
	}
	if value, ok := jc.mutation.PlatGBCd(); ok {
		_spec.SetField(jibun.FieldPlatGBCd, field.TypeString, value)
		_node.PlatGBCd = value
	}
	if value, ok := jc.mutation.PlatPlc(); ok {
		_spec.SetField(jibun.FieldPlatPlc, field.TypeString, value)
		_node.PlatPlc = value
	}
	if value, ok := jc.mutation.SplotNm(); ok {
		_spec.SetField(jibun.FieldSplotNm, field.TypeString, value)
		_node.SplotNm = value
	}
	if value, ok := jc.mutation.Block(); ok {
		_spec.SetField(jibun.FieldBlock, field.TypeString, value)
		_node.Block = value
	}
	if value, ok := jc.mutation.Lot(); ok {
		_spec.SetField(jibun.FieldLot, field.TypeString, value)
		_node.Lot = value
	}
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.SetField(jibun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.UpdatedAt(); ok {
		_spec.SetField(jibun.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jc.mutation.DemolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jibun.DemolTable,
			Columns: []string{jibun.DemolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: demol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JibunCreateBulk is the builder for creating many Jibun entities in bulk.
type JibunCreateBulk struct {
	config
	builders []*JibunCreate
}

// Save creates the Jibun entities in the database.
func (jcb *JibunCreateBulk) Save(ctx context.Context) ([]*Jibun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Jibun, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JibunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JibunCreateBulk) SaveX(ctx context.Context) []*Jibun {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JibunCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JibunCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
