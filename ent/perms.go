// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gopms/ent/perms"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Perms is the model entity for the Perms schema.
type Perms struct {
	config `json:"-" xml:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GuyukCd holds the value of the "guyukCd" field.
	GuyukCd string `json:"guyukCd,omitempty"`
	// GuyukCdNm holds the value of the "guyukCdNm" field.
	GuyukCdNm string `json:"guyukCdNm,omitempty"`
	// JimokCd holds the value of the "jimokCd" field.
	JimokCd string `json:"jimokCd,omitempty"`
	// JimokCdNm holds the value of the "jimokCdNm" field.
	JimokCdNm string `json:"jimokCdNm,omitempty"`
	// JiyukCd holds the value of the "jiyukCd" field.
	JiyukCd string `json:"jiyukCd,omitempty"`
	// JiyukCdNm holds the value of the "jiyukCdNm" field.
	JiyukCdNm string `json:"jiyukCdNm,omitempty"`
	// JiguCd holds the value of the "jiguCd" field.
	JiguCd string `json:"jiguCd,omitempty"`
	// JiguCdNm holds the value of the "jiguCdNm" field.
	JiguCdNm string `json:"jiguCdNm,omitempty"`
	// ArchGBCdNm holds the value of the "arch_gb_cd_nm" field.
	ArchGBCdNm string `json:"arch_gb_cd_nm,omitempty" xml:"archGbCdNm"`
	// ArchGBCd holds the value of the "arch_gb_cd" field.
	ArchGBCd string `json:"arch_gb_cd,omitempty" xml:"archGbCd"`
	// PlatArea holds the value of the "plat_area" field.
	PlatArea uint32 `json:"plat_area,omitempty" xml:"plat_area"`
	// ArchArea holds the value of the "arch_area" field.
	ArchArea uint32 `json:"arch_area,omitempty" xml:"arch_area"`
	// BcRat holds the value of the "bc_rat" field.
	BcRat uint16 `json:"bc_rat,omitempty" xml:"bc_rat"`
	// TotArea holds the value of the "tot_area" field.
	TotArea uint32 `json:"tot_area,omitempty" xml:"tot_area"`
	// VlRatEstmTotArea holds the value of the "vl_rat_estm_tot_area" field.
	VlRatEstmTotArea uint32 `json:"vl_rat_estm_tot_area,omitempty" xml:"vl_rat_estm_tot_area"`
	// VlRat holds the value of the "vl_rat" field.
	VlRat uint16 `json:"vl_rat,omitempty" xml:"vl_rat"`
	// MainBldCnt holds the value of the "main_bld_cnt" field.
	MainBldCnt uint16 `json:"main_bld_cnt,omitempty" xml:"main_bld_cnt"`
	// AtchBldDongCnt holds the value of the "atch_bld_dong_cnt" field.
	AtchBldDongCnt uint16 `json:"atch_bld_dong_cnt,omitempty" xml:"atch_bld_dong_cnt"`
	// MainPurpsCd holds the value of the "main_purps_cd" field.
	MainPurpsCd string `json:"main_purps_cd,omitempty" xml:"main_purps_cd"`
	// MainPurpsCdNm holds the value of the "main_purps_cd_nm" field.
	MainPurpsCdNm string `json:"main_purps_cd_nm,omitempty" xml:"main_purps_cd_nm"`
	// HhldCnt holds the value of the "hhld_cnt" field.
	HhldCnt uint16 `json:"hhld_cnt,omitempty" xml:"hhld_cnt"`
	// HoCnt holds the value of the "ho_cnt" field.
	HoCnt uint16 `json:"ho_cnt,omitempty" xml:"ho_cnt"`
	// FmlyCnt holds the value of the "fmly_cnt" field.
	FmlyCnt uint16 `json:"fmly_cnt,omitempty" xml:"fmly_cnt"`
	// TotPkngCnt holds the value of the "tot_pkng_cnt" field.
	TotPkngCnt uint16 `json:"tot_pkng_cnt,omitempty" xml:"tot_pkng_cnt"`
	// StcnsSchedDay holds the value of the "stcns_sched_day" field.
	StcnsSchedDay string `json:"stcns_sched_day,omitempty" xml:"stcns_sched_day"`
	// StcnsDelayDay holds the value of the "stcns_delay_day" field.
	StcnsDelayDay string `json:"stcns_delay_day,omitempty" xml:"stcns_delay_day"`
	// RealStcnsDay holds the value of the "real_stcns_day" field.
	RealStcnsDay string `json:"real_stcns_day,omitempty" xml:"real_stcns_day"`
	// ArchPmsDay holds the value of the "arch_pms_day" field.
	ArchPmsDay string `json:"arch_pms_day,omitempty" xml:"arch_pms_day"`
	// UseAprDay holds the value of the "use_apr_day" field.
	UseAprDay string `json:"use_apr_day,omitempty" xml:"use_apr_day"`
	// PlatPlc holds the value of the "platPlc" field.
	PlatPlc string `json:"platPlc,omitempty"`
	// SigunguCd holds the value of the "sigunguCd" field.
	SigunguCd string `json:"sigunguCd,omitempty"`
	// BjdongCd holds the value of the "bjdongCd" field.
	BjdongCd string `json:"bjdongCd,omitempty"`
	// PlatGbCd holds the value of the "platGbCd" field.
	PlatGbCd string `json:"platGbCd,omitempty"`
	// Bun holds the value of the "bun" field.
	Bun string `json:"bun,omitempty"`
	// Ji holds the value of the "ji" field.
	Ji string `json:"ji,omitempty"`
	// MgmPmsrgstPk holds the value of the "mgm_pmsrgst_pk" field.
	MgmPmsrgstPk string `json:"mgm_pmsrgst_pk,omitempty" xml:"mgmPmsrgstPk"`
	// SplotNm holds the value of the "splotNm" field.
	SplotNm string `json:"splotNm,omitempty"`
	// Block holds the value of the "block" field.
	Block string `json:"block,omitempty"`
	// Lot holds the value of the "lot" field.
	Lot string `json:"lot,omitempty"`
	// CrtnDay holds the value of the "crtn_day" field.
	CrtnDay string `json:"crtn_day,omitempty" xml:"crtn_day"`
	// Rnum holds the value of the "rnum" field.
	Rnum uint16 `json:"rnum,omitempty" xml:"rnum"`
	// BldNm holds the value of the "bld_nm" field.
	BldNm string `json:"bld_nm,omitempty" xml:"bld_nm"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Perms) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case perms.FieldID, perms.FieldPlatArea, perms.FieldArchArea, perms.FieldBcRat, perms.FieldTotArea, perms.FieldVlRatEstmTotArea, perms.FieldVlRat, perms.FieldMainBldCnt, perms.FieldAtchBldDongCnt, perms.FieldHhldCnt, perms.FieldHoCnt, perms.FieldFmlyCnt, perms.FieldTotPkngCnt, perms.FieldRnum:
			values[i] = new(sql.NullInt64)
		case perms.FieldGuyukCd, perms.FieldGuyukCdNm, perms.FieldJimokCd, perms.FieldJimokCdNm, perms.FieldJiyukCd, perms.FieldJiyukCdNm, perms.FieldJiguCd, perms.FieldJiguCdNm, perms.FieldArchGBCdNm, perms.FieldArchGBCd, perms.FieldMainPurpsCd, perms.FieldMainPurpsCdNm, perms.FieldStcnsSchedDay, perms.FieldStcnsDelayDay, perms.FieldRealStcnsDay, perms.FieldArchPmsDay, perms.FieldUseAprDay, perms.FieldPlatPlc, perms.FieldSigunguCd, perms.FieldBjdongCd, perms.FieldPlatGbCd, perms.FieldBun, perms.FieldJi, perms.FieldMgmPmsrgstPk, perms.FieldSplotNm, perms.FieldBlock, perms.FieldLot, perms.FieldCrtnDay, perms.FieldBldNm:
			values[i] = new(sql.NullString)
		case perms.FieldCreatedAt, perms.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Perms", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Perms fields.
func (pe *Perms) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case perms.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int(value.Int64)
		case perms.FieldGuyukCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guyukCd", values[i])
			} else if value.Valid {
				pe.GuyukCd = value.String
			}
		case perms.FieldGuyukCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guyukCdNm", values[i])
			} else if value.Valid {
				pe.GuyukCdNm = value.String
			}
		case perms.FieldJimokCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jimokCd", values[i])
			} else if value.Valid {
				pe.JimokCd = value.String
			}
		case perms.FieldJimokCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jimokCdNm", values[i])
			} else if value.Valid {
				pe.JimokCdNm = value.String
			}
		case perms.FieldJiyukCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiyukCd", values[i])
			} else if value.Valid {
				pe.JiyukCd = value.String
			}
		case perms.FieldJiyukCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiyukCdNm", values[i])
			} else if value.Valid {
				pe.JiyukCdNm = value.String
			}
		case perms.FieldJiguCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiguCd", values[i])
			} else if value.Valid {
				pe.JiguCd = value.String
			}
		case perms.FieldJiguCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiguCdNm", values[i])
			} else if value.Valid {
				pe.JiguCdNm = value.String
			}
		case perms.FieldArchGBCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch_gb_cd_nm", values[i])
			} else if value.Valid {
				pe.ArchGBCdNm = value.String
			}
		case perms.FieldArchGBCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch_gb_cd", values[i])
			} else if value.Valid {
				pe.ArchGBCd = value.String
			}
		case perms.FieldPlatArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plat_area", values[i])
			} else if value.Valid {
				pe.PlatArea = uint32(value.Int64)
			}
		case perms.FieldArchArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field arch_area", values[i])
			} else if value.Valid {
				pe.ArchArea = uint32(value.Int64)
			}
		case perms.FieldBcRat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bc_rat", values[i])
			} else if value.Valid {
				pe.BcRat = uint16(value.Int64)
			}
		case perms.FieldTotArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tot_area", values[i])
			} else if value.Valid {
				pe.TotArea = uint32(value.Int64)
			}
		case perms.FieldVlRatEstmTotArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vl_rat_estm_tot_area", values[i])
			} else if value.Valid {
				pe.VlRatEstmTotArea = uint32(value.Int64)
			}
		case perms.FieldVlRat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vl_rat", values[i])
			} else if value.Valid {
				pe.VlRat = uint16(value.Int64)
			}
		case perms.FieldMainBldCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field main_bld_cnt", values[i])
			} else if value.Valid {
				pe.MainBldCnt = uint16(value.Int64)
			}
		case perms.FieldAtchBldDongCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field atch_bld_dong_cnt", values[i])
			} else if value.Valid {
				pe.AtchBldDongCnt = uint16(value.Int64)
			}
		case perms.FieldMainPurpsCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field main_purps_cd", values[i])
			} else if value.Valid {
				pe.MainPurpsCd = value.String
			}
		case perms.FieldMainPurpsCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field main_purps_cd_nm", values[i])
			} else if value.Valid {
				pe.MainPurpsCdNm = value.String
			}
		case perms.FieldHhldCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hhld_cnt", values[i])
			} else if value.Valid {
				pe.HhldCnt = uint16(value.Int64)
			}
		case perms.FieldHoCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ho_cnt", values[i])
			} else if value.Valid {
				pe.HoCnt = uint16(value.Int64)
			}
		case perms.FieldFmlyCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fmly_cnt", values[i])
			} else if value.Valid {
				pe.FmlyCnt = uint16(value.Int64)
			}
		case perms.FieldTotPkngCnt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tot_pkng_cnt", values[i])
			} else if value.Valid {
				pe.TotPkngCnt = uint16(value.Int64)
			}
		case perms.FieldStcnsSchedDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stcns_sched_day", values[i])
			} else if value.Valid {
				pe.StcnsSchedDay = value.String
			}
		case perms.FieldStcnsDelayDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stcns_delay_day", values[i])
			} else if value.Valid {
				pe.StcnsDelayDay = value.String
			}
		case perms.FieldRealStcnsDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_stcns_day", values[i])
			} else if value.Valid {
				pe.RealStcnsDay = value.String
			}
		case perms.FieldArchPmsDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch_pms_day", values[i])
			} else if value.Valid {
				pe.ArchPmsDay = value.String
			}
		case perms.FieldUseAprDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_apr_day", values[i])
			} else if value.Valid {
				pe.UseAprDay = value.String
			}
		case perms.FieldPlatPlc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platPlc", values[i])
			} else if value.Valid {
				pe.PlatPlc = value.String
			}
		case perms.FieldSigunguCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sigunguCd", values[i])
			} else if value.Valid {
				pe.SigunguCd = value.String
			}
		case perms.FieldBjdongCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bjdongCd", values[i])
			} else if value.Valid {
				pe.BjdongCd = value.String
			}
		case perms.FieldPlatGbCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platGbCd", values[i])
			} else if value.Valid {
				pe.PlatGbCd = value.String
			}
		case perms.FieldBun:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bun", values[i])
			} else if value.Valid {
				pe.Bun = value.String
			}
		case perms.FieldJi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ji", values[i])
			} else if value.Valid {
				pe.Ji = value.String
			}
		case perms.FieldMgmPmsrgstPk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mgm_pmsrgst_pk", values[i])
			} else if value.Valid {
				pe.MgmPmsrgstPk = value.String
			}
		case perms.FieldSplotNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field splotNm", values[i])
			} else if value.Valid {
				pe.SplotNm = value.String
			}
		case perms.FieldBlock:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block", values[i])
			} else if value.Valid {
				pe.Block = value.String
			}
		case perms.FieldLot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lot", values[i])
			} else if value.Valid {
				pe.Lot = value.String
			}
		case perms.FieldCrtnDay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crtn_day", values[i])
			} else if value.Valid {
				pe.CrtnDay = value.String
			}
		case perms.FieldRnum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rnum", values[i])
			} else if value.Valid {
				pe.Rnum = uint16(value.Int64)
			}
		case perms.FieldBldNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bld_nm", values[i])
			} else if value.Valid {
				pe.BldNm = value.String
			}
		case perms.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case perms.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Perms.
// Note that you need to call Perms.Unwrap() before calling this method if this Perms
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Perms) Update() *PermsUpdateOne {
	return NewPermsClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Perms entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Perms) Unwrap() *Perms {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Perms is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Perms) String() string {
	var builder strings.Builder
	builder.WriteString("Perms(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("guyukCd=")
	builder.WriteString(pe.GuyukCd)
	builder.WriteString(", ")
	builder.WriteString("guyukCdNm=")
	builder.WriteString(pe.GuyukCdNm)
	builder.WriteString(", ")
	builder.WriteString("jimokCd=")
	builder.WriteString(pe.JimokCd)
	builder.WriteString(", ")
	builder.WriteString("jimokCdNm=")
	builder.WriteString(pe.JimokCdNm)
	builder.WriteString(", ")
	builder.WriteString("jiyukCd=")
	builder.WriteString(pe.JiyukCd)
	builder.WriteString(", ")
	builder.WriteString("jiyukCdNm=")
	builder.WriteString(pe.JiyukCdNm)
	builder.WriteString(", ")
	builder.WriteString("jiguCd=")
	builder.WriteString(pe.JiguCd)
	builder.WriteString(", ")
	builder.WriteString("jiguCdNm=")
	builder.WriteString(pe.JiguCdNm)
	builder.WriteString(", ")
	builder.WriteString("arch_gb_cd_nm=")
	builder.WriteString(pe.ArchGBCdNm)
	builder.WriteString(", ")
	builder.WriteString("arch_gb_cd=")
	builder.WriteString(pe.ArchGBCd)
	builder.WriteString(", ")
	builder.WriteString("plat_area=")
	builder.WriteString(fmt.Sprintf("%v", pe.PlatArea))
	builder.WriteString(", ")
	builder.WriteString("arch_area=")
	builder.WriteString(fmt.Sprintf("%v", pe.ArchArea))
	builder.WriteString(", ")
	builder.WriteString("bc_rat=")
	builder.WriteString(fmt.Sprintf("%v", pe.BcRat))
	builder.WriteString(", ")
	builder.WriteString("tot_area=")
	builder.WriteString(fmt.Sprintf("%v", pe.TotArea))
	builder.WriteString(", ")
	builder.WriteString("vl_rat_estm_tot_area=")
	builder.WriteString(fmt.Sprintf("%v", pe.VlRatEstmTotArea))
	builder.WriteString(", ")
	builder.WriteString("vl_rat=")
	builder.WriteString(fmt.Sprintf("%v", pe.VlRat))
	builder.WriteString(", ")
	builder.WriteString("main_bld_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.MainBldCnt))
	builder.WriteString(", ")
	builder.WriteString("atch_bld_dong_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.AtchBldDongCnt))
	builder.WriteString(", ")
	builder.WriteString("main_purps_cd=")
	builder.WriteString(pe.MainPurpsCd)
	builder.WriteString(", ")
	builder.WriteString("main_purps_cd_nm=")
	builder.WriteString(pe.MainPurpsCdNm)
	builder.WriteString(", ")
	builder.WriteString("hhld_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.HhldCnt))
	builder.WriteString(", ")
	builder.WriteString("ho_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.HoCnt))
	builder.WriteString(", ")
	builder.WriteString("fmly_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.FmlyCnt))
	builder.WriteString(", ")
	builder.WriteString("tot_pkng_cnt=")
	builder.WriteString(fmt.Sprintf("%v", pe.TotPkngCnt))
	builder.WriteString(", ")
	builder.WriteString("stcns_sched_day=")
	builder.WriteString(pe.StcnsSchedDay)
	builder.WriteString(", ")
	builder.WriteString("stcns_delay_day=")
	builder.WriteString(pe.StcnsDelayDay)
	builder.WriteString(", ")
	builder.WriteString("real_stcns_day=")
	builder.WriteString(pe.RealStcnsDay)
	builder.WriteString(", ")
	builder.WriteString("arch_pms_day=")
	builder.WriteString(pe.ArchPmsDay)
	builder.WriteString(", ")
	builder.WriteString("use_apr_day=")
	builder.WriteString(pe.UseAprDay)
	builder.WriteString(", ")
	builder.WriteString("platPlc=")
	builder.WriteString(pe.PlatPlc)
	builder.WriteString(", ")
	builder.WriteString("sigunguCd=")
	builder.WriteString(pe.SigunguCd)
	builder.WriteString(", ")
	builder.WriteString("bjdongCd=")
	builder.WriteString(pe.BjdongCd)
	builder.WriteString(", ")
	builder.WriteString("platGbCd=")
	builder.WriteString(pe.PlatGbCd)
	builder.WriteString(", ")
	builder.WriteString("bun=")
	builder.WriteString(pe.Bun)
	builder.WriteString(", ")
	builder.WriteString("ji=")
	builder.WriteString(pe.Ji)
	builder.WriteString(", ")
	builder.WriteString("mgm_pmsrgst_pk=")
	builder.WriteString(pe.MgmPmsrgstPk)
	builder.WriteString(", ")
	builder.WriteString("splotNm=")
	builder.WriteString(pe.SplotNm)
	builder.WriteString(", ")
	builder.WriteString("block=")
	builder.WriteString(pe.Block)
	builder.WriteString(", ")
	builder.WriteString("lot=")
	builder.WriteString(pe.Lot)
	builder.WriteString(", ")
	builder.WriteString("crtn_day=")
	builder.WriteString(pe.CrtnDay)
	builder.WriteString(", ")
	builder.WriteString("rnum=")
	builder.WriteString(fmt.Sprintf("%v", pe.Rnum))
	builder.WriteString(", ")
	builder.WriteString("bld_nm=")
	builder.WriteString(pe.BldNm)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PermsSlice is a parsable slice of Perms.
type PermsSlice []*Perms
