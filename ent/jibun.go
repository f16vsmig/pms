// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gopms/ent/jibun"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Jibun is the model entity for the Jibun schema.
type Jibun struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BjdongCd holds the value of the "bjdong_cd" field.
	BjdongCd string `json:"bjdong_cd,omitempty"`
	// SigunguCd holds the value of the "sigungu_cd" field.
	SigunguCd string `json:"sigungu_cd,omitempty"`
	// Bun holds the value of the "bun" field.
	Bun string `json:"bun,omitempty"`
	// Ji holds the value of the "ji" field.
	Ji string `json:"ji,omitempty"`
	// GuyukCd holds the value of the "guyuk_cd" field.
	GuyukCd string `json:"guyuk_cd,omitempty"`
	// GuyukCdNm holds the value of the "guyuk_cd_nm" field.
	GuyukCdNm string `json:"guyuk_cd_nm,omitempty"`
	// JimokCd holds the value of the "jimok_cd" field.
	JimokCd string `json:"jimok_cd,omitempty"`
	// JimokCdNm holds the value of the "jimok_cd_nm" field.
	JimokCdNm string `json:"jimok_cd_nm,omitempty"`
	// JiyukCd holds the value of the "jiyuk_cd" field.
	JiyukCd string `json:"jiyuk_cd,omitempty"`
	// JiyukCdNm holds the value of the "jiyuk_cd_nm" field.
	JiyukCdNm string `json:"jiyuk_cd_nm,omitempty"`
	// JiguCd holds the value of the "jigu_cd" field.
	JiguCd string `json:"jigu_cd,omitempty"`
	// JiguCdNm holds the value of the "jigu_cd_nm" field.
	JiguCdNm string `json:"jigu_cd_nm,omitempty"`
	// PlatGBCd holds the value of the "plat_gb_cd" field.
	PlatGBCd string `json:"plat_gb_cd,omitempty"`
	// PlatPlc holds the value of the "plat_plc" field.
	PlatPlc string `json:"plat_plc,omitempty"`
	// SplotNm holds the value of the "splot_nm" field.
	SplotNm string `json:"splot_nm,omitempty"`
	// Block holds the value of the "block" field.
	Block string `json:"block,omitempty"`
	// Lot holds the value of the "lot" field.
	Lot string `json:"lot,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JibunQuery when eager-loading is set.
	Edges     JibunEdges `json:"edges"`
	bjd_jibun *int
}

// JibunEdges holds the relations/edges for other nodes in the graph.
type JibunEdges struct {
	// Demol holds the value of the demol edge.
	Demol []*Demol `json:"demol,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DemolOrErr returns the Demol value or an error if the edge
// was not loaded in eager-loading.
func (e JibunEdges) DemolOrErr() ([]*Demol, error) {
	if e.loadedTypes[0] {
		return e.Demol, nil
	}
	return nil, &NotLoadedError{edge: "demol"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Jibun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jibun.FieldID:
			values[i] = new(sql.NullInt64)
		case jibun.FieldBjdongCd, jibun.FieldSigunguCd, jibun.FieldBun, jibun.FieldJi, jibun.FieldGuyukCd, jibun.FieldGuyukCdNm, jibun.FieldJimokCd, jibun.FieldJimokCdNm, jibun.FieldJiyukCd, jibun.FieldJiyukCdNm, jibun.FieldJiguCd, jibun.FieldJiguCdNm, jibun.FieldPlatGBCd, jibun.FieldPlatPlc, jibun.FieldSplotNm, jibun.FieldBlock, jibun.FieldLot:
			values[i] = new(sql.NullString)
		case jibun.FieldCreatedAt, jibun.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jibun.ForeignKeys[0]: // bjd_jibun
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Jibun", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Jibun fields.
func (j *Jibun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jibun.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case jibun.FieldBjdongCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bjdong_cd", values[i])
			} else if value.Valid {
				j.BjdongCd = value.String
			}
		case jibun.FieldSigunguCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sigungu_cd", values[i])
			} else if value.Valid {
				j.SigunguCd = value.String
			}
		case jibun.FieldBun:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bun", values[i])
			} else if value.Valid {
				j.Bun = value.String
			}
		case jibun.FieldJi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ji", values[i])
			} else if value.Valid {
				j.Ji = value.String
			}
		case jibun.FieldGuyukCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guyuk_cd", values[i])
			} else if value.Valid {
				j.GuyukCd = value.String
			}
		case jibun.FieldGuyukCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guyuk_cd_nm", values[i])
			} else if value.Valid {
				j.GuyukCdNm = value.String
			}
		case jibun.FieldJimokCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jimok_cd", values[i])
			} else if value.Valid {
				j.JimokCd = value.String
			}
		case jibun.FieldJimokCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jimok_cd_nm", values[i])
			} else if value.Valid {
				j.JimokCdNm = value.String
			}
		case jibun.FieldJiyukCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiyuk_cd", values[i])
			} else if value.Valid {
				j.JiyukCd = value.String
			}
		case jibun.FieldJiyukCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jiyuk_cd_nm", values[i])
			} else if value.Valid {
				j.JiyukCdNm = value.String
			}
		case jibun.FieldJiguCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jigu_cd", values[i])
			} else if value.Valid {
				j.JiguCd = value.String
			}
		case jibun.FieldJiguCdNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jigu_cd_nm", values[i])
			} else if value.Valid {
				j.JiguCdNm = value.String
			}
		case jibun.FieldPlatGBCd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plat_gb_cd", values[i])
			} else if value.Valid {
				j.PlatGBCd = value.String
			}
		case jibun.FieldPlatPlc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plat_plc", values[i])
			} else if value.Valid {
				j.PlatPlc = value.String
			}
		case jibun.FieldSplotNm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field splot_nm", values[i])
			} else if value.Valid {
				j.SplotNm = value.String
			}
		case jibun.FieldBlock:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block", values[i])
			} else if value.Valid {
				j.Block = value.String
			}
		case jibun.FieldLot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lot", values[i])
			} else if value.Valid {
				j.Lot = value.String
			}
		case jibun.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case jibun.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				j.UpdatedAt = value.Time
			}
		case jibun.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bjd_jibun", value)
			} else if value.Valid {
				j.bjd_jibun = new(int)
				*j.bjd_jibun = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDemol queries the "demol" edge of the Jibun entity.
func (j *Jibun) QueryDemol() *DemolQuery {
	return NewJibunClient(j.config).QueryDemol(j)
}

// Update returns a builder for updating this Jibun.
// Note that you need to call Jibun.Unwrap() before calling this method if this Jibun
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Jibun) Update() *JibunUpdateOne {
	return NewJibunClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Jibun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Jibun) Unwrap() *Jibun {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Jibun is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Jibun) String() string {
	var builder strings.Builder
	builder.WriteString("Jibun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("bjdong_cd=")
	builder.WriteString(j.BjdongCd)
	builder.WriteString(", ")
	builder.WriteString("sigungu_cd=")
	builder.WriteString(j.SigunguCd)
	builder.WriteString(", ")
	builder.WriteString("bun=")
	builder.WriteString(j.Bun)
	builder.WriteString(", ")
	builder.WriteString("ji=")
	builder.WriteString(j.Ji)
	builder.WriteString(", ")
	builder.WriteString("guyuk_cd=")
	builder.WriteString(j.GuyukCd)
	builder.WriteString(", ")
	builder.WriteString("guyuk_cd_nm=")
	builder.WriteString(j.GuyukCdNm)
	builder.WriteString(", ")
	builder.WriteString("jimok_cd=")
	builder.WriteString(j.JimokCd)
	builder.WriteString(", ")
	builder.WriteString("jimok_cd_nm=")
	builder.WriteString(j.JimokCdNm)
	builder.WriteString(", ")
	builder.WriteString("jiyuk_cd=")
	builder.WriteString(j.JiyukCd)
	builder.WriteString(", ")
	builder.WriteString("jiyuk_cd_nm=")
	builder.WriteString(j.JiyukCdNm)
	builder.WriteString(", ")
	builder.WriteString("jigu_cd=")
	builder.WriteString(j.JiguCd)
	builder.WriteString(", ")
	builder.WriteString("jigu_cd_nm=")
	builder.WriteString(j.JiguCdNm)
	builder.WriteString(", ")
	builder.WriteString("plat_gb_cd=")
	builder.WriteString(j.PlatGBCd)
	builder.WriteString(", ")
	builder.WriteString("plat_plc=")
	builder.WriteString(j.PlatPlc)
	builder.WriteString(", ")
	builder.WriteString("splot_nm=")
	builder.WriteString(j.SplotNm)
	builder.WriteString(", ")
	builder.WriteString("block=")
	builder.WriteString(j.Block)
	builder.WriteString(", ")
	builder.WriteString("lot=")
	builder.WriteString(j.Lot)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(j.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Jibuns is a parsable slice of Jibun.
type Jibuns []*Jibun
