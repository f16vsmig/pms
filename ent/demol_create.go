// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/demol"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DemolCreate is the builder for creating a Demol entity.
type DemolCreate struct {
	config
	mutation *DemolMutation
	hooks    []Hook
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (dc *DemolCreate) SetMgmPmsrgstPk(s string) *DemolCreate {
	dc.mutation.SetMgmPmsrgstPk(s)
	return dc
}

// SetBldNm sets the "bld_nm" field.
func (dc *DemolCreate) SetBldNm(s string) *DemolCreate {
	dc.mutation.SetBldNm(s)
	return dc
}

// SetNillableBldNm sets the "bld_nm" field if the given value is not nil.
func (dc *DemolCreate) SetNillableBldNm(s *string) *DemolCreate {
	if s != nil {
		dc.SetBldNm(*s)
	}
	return dc
}

// SetDemolExtngGBCd sets the "demol_extng_gb_cd" field.
func (dc *DemolCreate) SetDemolExtngGBCd(s string) *DemolCreate {
	dc.mutation.SetDemolExtngGBCd(s)
	return dc
}

// SetNillableDemolExtngGBCd sets the "demol_extng_gb_cd" field if the given value is not nil.
func (dc *DemolCreate) SetNillableDemolExtngGBCd(s *string) *DemolCreate {
	if s != nil {
		dc.SetDemolExtngGBCd(*s)
	}
	return dc
}

// SetDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field.
func (dc *DemolCreate) SetDemolExtngGBCdNm(s string) *DemolCreate {
	dc.mutation.SetDemolExtngGBCdNm(s)
	return dc
}

// SetNillableDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field if the given value is not nil.
func (dc *DemolCreate) SetNillableDemolExtngGBCdNm(s *string) *DemolCreate {
	if s != nil {
		dc.SetDemolExtngGBCdNm(*s)
	}
	return dc
}

// SetDemolStrtDay sets the "demol_strt_day" field.
func (dc *DemolCreate) SetDemolStrtDay(s string) *DemolCreate {
	dc.mutation.SetDemolStrtDay(s)
	return dc
}

// SetNillableDemolStrtDay sets the "demol_strt_day" field if the given value is not nil.
func (dc *DemolCreate) SetNillableDemolStrtDay(s *string) *DemolCreate {
	if s != nil {
		dc.SetDemolStrtDay(*s)
	}
	return dc
}

// SetDemolEndDay sets the "demol_end_day" field.
func (dc *DemolCreate) SetDemolEndDay(s string) *DemolCreate {
	dc.mutation.SetDemolEndDay(s)
	return dc
}

// SetNillableDemolEndDay sets the "demol_end_day" field if the given value is not nil.
func (dc *DemolCreate) SetNillableDemolEndDay(s *string) *DemolCreate {
	if s != nil {
		dc.SetDemolEndDay(*s)
	}
	return dc
}

// SetDemolExtngDay sets the "demol_extng_day" field.
func (dc *DemolCreate) SetDemolExtngDay(s string) *DemolCreate {
	dc.mutation.SetDemolExtngDay(s)
	return dc
}

// SetNillableDemolExtngDay sets the "demol_extng_day" field if the given value is not nil.
func (dc *DemolCreate) SetNillableDemolExtngDay(s *string) *DemolCreate {
	if s != nil {
		dc.SetDemolExtngDay(*s)
	}
	return dc
}

// SetTotArea sets the "tot_area" field.
func (dc *DemolCreate) SetTotArea(u uint32) *DemolCreate {
	dc.mutation.SetTotArea(u)
	return dc
}

// SetNillableTotArea sets the "tot_area" field if the given value is not nil.
func (dc *DemolCreate) SetNillableTotArea(u *uint32) *DemolCreate {
	if u != nil {
		dc.SetTotArea(*u)
	}
	return dc
}

// SetBldCnt sets the "bld_cnt" field.
func (dc *DemolCreate) SetBldCnt(u uint32) *DemolCreate {
	dc.mutation.SetBldCnt(u)
	return dc
}

// SetNillableBldCnt sets the "bld_cnt" field if the given value is not nil.
func (dc *DemolCreate) SetNillableBldCnt(u *uint32) *DemolCreate {
	if u != nil {
		dc.SetBldCnt(*u)
	}
	return dc
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (dc *DemolCreate) SetMainPurpsCd(s string) *DemolCreate {
	dc.mutation.SetMainPurpsCd(s)
	return dc
}

// SetNillableMainPurpsCd sets the "main_purps_cd" field if the given value is not nil.
func (dc *DemolCreate) SetNillableMainPurpsCd(s *string) *DemolCreate {
	if s != nil {
		dc.SetMainPurpsCd(*s)
	}
	return dc
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (dc *DemolCreate) SetMainPurpsCdNm(s string) *DemolCreate {
	dc.mutation.SetMainPurpsCdNm(s)
	return dc
}

// SetNillableMainPurpsCdNm sets the "main_purps_cd_nm" field if the given value is not nil.
func (dc *DemolCreate) SetNillableMainPurpsCdNm(s *string) *DemolCreate {
	if s != nil {
		dc.SetMainPurpsCdNm(*s)
	}
	return dc
}

// SetStrctCd sets the "strct_cd" field.
func (dc *DemolCreate) SetStrctCd(s string) *DemolCreate {
	dc.mutation.SetStrctCd(s)
	return dc
}

// SetNillableStrctCd sets the "strct_cd" field if the given value is not nil.
func (dc *DemolCreate) SetNillableStrctCd(s *string) *DemolCreate {
	if s != nil {
		dc.SetStrctCd(*s)
	}
	return dc
}

// SetStrctCdNm sets the "strct_cd_nm" field.
func (dc *DemolCreate) SetStrctCdNm(s string) *DemolCreate {
	dc.mutation.SetStrctCdNm(s)
	return dc
}

// SetNillableStrctCdNm sets the "strct_cd_nm" field if the given value is not nil.
func (dc *DemolCreate) SetNillableStrctCdNm(s *string) *DemolCreate {
	if s != nil {
		dc.SetStrctCdNm(*s)
	}
	return dc
}

// SetHhldCnt sets the "hhld_cnt" field.
func (dc *DemolCreate) SetHhldCnt(s string) *DemolCreate {
	dc.mutation.SetHhldCnt(s)
	return dc
}

// SetNillableHhldCnt sets the "hhld_cnt" field if the given value is not nil.
func (dc *DemolCreate) SetNillableHhldCnt(s *string) *DemolCreate {
	if s != nil {
		dc.SetHhldCnt(*s)
	}
	return dc
}

// SetHoCnt sets the "ho_cnt" field.
func (dc *DemolCreate) SetHoCnt(s string) *DemolCreate {
	dc.mutation.SetHoCnt(s)
	return dc
}

// SetNillableHoCnt sets the "ho_cnt" field if the given value is not nil.
func (dc *DemolCreate) SetNillableHoCnt(s *string) *DemolCreate {
	if s != nil {
		dc.SetHoCnt(*s)
	}
	return dc
}

// SetCrtnDay sets the "crtn_day" field.
func (dc *DemolCreate) SetCrtnDay(s string) *DemolCreate {
	dc.mutation.SetCrtnDay(s)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DemolCreate) SetCreatedAt(t time.Time) *DemolCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DemolCreate) SetNillableCreatedAt(t *time.Time) *DemolCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DemolCreate) SetUpdatedAt(t time.Time) *DemolCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DemolCreate) SetNillableUpdatedAt(t *time.Time) *DemolCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// Mutation returns the DemolMutation object of the builder.
func (dc *DemolCreate) Mutation() *DemolMutation {
	return dc.mutation
}

// Save creates the Demol in the database.
func (dc *DemolCreate) Save(ctx context.Context) (*Demol, error) {
	dc.defaults()
	return withHooks[*Demol, DemolMutation](ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DemolCreate) SaveX(ctx context.Context) *Demol {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DemolCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DemolCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DemolCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := demol.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := demol.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DemolCreate) check() error {
	if _, ok := dc.mutation.MgmPmsrgstPk(); !ok {
		return &ValidationError{Name: "mgm_pmsrgst_pk", err: errors.New(`ent: missing required field "Demol.mgm_pmsrgst_pk"`)}
	}
	if v, ok := dc.mutation.MgmPmsrgstPk(); ok {
		if err := demol.MgmPmsrgstPkValidator(v); err != nil {
			return &ValidationError{Name: "mgm_pmsrgst_pk", err: fmt.Errorf(`ent: validator failed for field "Demol.mgm_pmsrgst_pk": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CrtnDay(); !ok {
		return &ValidationError{Name: "crtn_day", err: errors.New(`ent: missing required field "Demol.crtn_day"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Demol.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Demol.updated_at"`)}
	}
	return nil
}

func (dc *DemolCreate) sqlSave(ctx context.Context) (*Demol, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DemolCreate) createSpec() (*Demol, *sqlgraph.CreateSpec) {
	var (
		_node = &Demol{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(demol.Table, sqlgraph.NewFieldSpec(demol.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.MgmPmsrgstPk(); ok {
		_spec.SetField(demol.FieldMgmPmsrgstPk, field.TypeString, value)
		_node.MgmPmsrgstPk = value
	}
	if value, ok := dc.mutation.BldNm(); ok {
		_spec.SetField(demol.FieldBldNm, field.TypeString, value)
		_node.BldNm = &value
	}
	if value, ok := dc.mutation.DemolExtngGBCd(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCd, field.TypeString, value)
		_node.DemolExtngGBCd = value
	}
	if value, ok := dc.mutation.DemolExtngGBCdNm(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCdNm, field.TypeString, value)
		_node.DemolExtngGBCdNm = value
	}
	if value, ok := dc.mutation.DemolStrtDay(); ok {
		_spec.SetField(demol.FieldDemolStrtDay, field.TypeString, value)
		_node.DemolStrtDay = value
	}
	if value, ok := dc.mutation.DemolEndDay(); ok {
		_spec.SetField(demol.FieldDemolEndDay, field.TypeString, value)
		_node.DemolEndDay = value
	}
	if value, ok := dc.mutation.DemolExtngDay(); ok {
		_spec.SetField(demol.FieldDemolExtngDay, field.TypeString, value)
		_node.DemolExtngDay = value
	}
	if value, ok := dc.mutation.TotArea(); ok {
		_spec.SetField(demol.FieldTotArea, field.TypeUint32, value)
		_node.TotArea = value
	}
	if value, ok := dc.mutation.BldCnt(); ok {
		_spec.SetField(demol.FieldBldCnt, field.TypeUint32, value)
		_node.BldCnt = value
	}
	if value, ok := dc.mutation.MainPurpsCd(); ok {
		_spec.SetField(demol.FieldMainPurpsCd, field.TypeString, value)
		_node.MainPurpsCd = value
	}
	if value, ok := dc.mutation.MainPurpsCdNm(); ok {
		_spec.SetField(demol.FieldMainPurpsCdNm, field.TypeString, value)
		_node.MainPurpsCdNm = value
	}
	if value, ok := dc.mutation.StrctCd(); ok {
		_spec.SetField(demol.FieldStrctCd, field.TypeString, value)
		_node.StrctCd = value
	}
	if value, ok := dc.mutation.StrctCdNm(); ok {
		_spec.SetField(demol.FieldStrctCdNm, field.TypeString, value)
		_node.StrctCdNm = value
	}
	if value, ok := dc.mutation.HhldCnt(); ok {
		_spec.SetField(demol.FieldHhldCnt, field.TypeString, value)
		_node.HhldCnt = value
	}
	if value, ok := dc.mutation.HoCnt(); ok {
		_spec.SetField(demol.FieldHoCnt, field.TypeString, value)
		_node.HoCnt = value
	}
	if value, ok := dc.mutation.CrtnDay(); ok {
		_spec.SetField(demol.FieldCrtnDay, field.TypeString, value)
		_node.CrtnDay = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(demol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(demol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DemolCreateBulk is the builder for creating many Demol entities in bulk.
type DemolCreateBulk struct {
	config
	builders []*DemolCreate
}

// Save creates the Demol entities in the database.
func (dcb *DemolCreateBulk) Save(ctx context.Context) ([]*Demol, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Demol, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DemolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DemolCreateBulk) SaveX(ctx context.Context) []*Demol {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DemolCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DemolCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
