// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/perms"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermsCreate is the builder for creating a Perms entity.
type PermsCreate struct {
	config
	mutation *PermsMutation
	hooks    []Hook
}

// SetGuyukCd sets the "guyukCd" field.
func (pc *PermsCreate) SetGuyukCd(s string) *PermsCreate {
	pc.mutation.SetGuyukCd(s)
	return pc
}

// SetNillableGuyukCd sets the "guyukCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableGuyukCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetGuyukCd(*s)
	}
	return pc
}

// SetGuyukCdNm sets the "guyukCdNm" field.
func (pc *PermsCreate) SetGuyukCdNm(s string) *PermsCreate {
	pc.mutation.SetGuyukCdNm(s)
	return pc
}

// SetNillableGuyukCdNm sets the "guyukCdNm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableGuyukCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetGuyukCdNm(*s)
	}
	return pc
}

// SetJimokCd sets the "jimokCd" field.
func (pc *PermsCreate) SetJimokCd(s string) *PermsCreate {
	pc.mutation.SetJimokCd(s)
	return pc
}

// SetNillableJimokCd sets the "jimokCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJimokCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetJimokCd(*s)
	}
	return pc
}

// SetJimokCdNm sets the "jimokCdNm" field.
func (pc *PermsCreate) SetJimokCdNm(s string) *PermsCreate {
	pc.mutation.SetJimokCdNm(s)
	return pc
}

// SetNillableJimokCdNm sets the "jimokCdNm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJimokCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetJimokCdNm(*s)
	}
	return pc
}

// SetJiyukCd sets the "jiyukCd" field.
func (pc *PermsCreate) SetJiyukCd(s string) *PermsCreate {
	pc.mutation.SetJiyukCd(s)
	return pc
}

// SetNillableJiyukCd sets the "jiyukCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJiyukCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetJiyukCd(*s)
	}
	return pc
}

// SetJiyukCdNm sets the "jiyukCdNm" field.
func (pc *PermsCreate) SetJiyukCdNm(s string) *PermsCreate {
	pc.mutation.SetJiyukCdNm(s)
	return pc
}

// SetNillableJiyukCdNm sets the "jiyukCdNm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJiyukCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetJiyukCdNm(*s)
	}
	return pc
}

// SetJiguCd sets the "jiguCd" field.
func (pc *PermsCreate) SetJiguCd(s string) *PermsCreate {
	pc.mutation.SetJiguCd(s)
	return pc
}

// SetNillableJiguCd sets the "jiguCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJiguCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetJiguCd(*s)
	}
	return pc
}

// SetJiguCdNm sets the "jiguCdNm" field.
func (pc *PermsCreate) SetJiguCdNm(s string) *PermsCreate {
	pc.mutation.SetJiguCdNm(s)
	return pc
}

// SetNillableJiguCdNm sets the "jiguCdNm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJiguCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetJiguCdNm(*s)
	}
	return pc
}

// SetArchGBCdNm sets the "arch_gb_cd_nm" field.
func (pc *PermsCreate) SetArchGBCdNm(s string) *PermsCreate {
	pc.mutation.SetArchGBCdNm(s)
	return pc
}

// SetNillableArchGBCdNm sets the "arch_gb_cd_nm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableArchGBCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetArchGBCdNm(*s)
	}
	return pc
}

// SetArchGBCd sets the "arch_gb_cd" field.
func (pc *PermsCreate) SetArchGBCd(s string) *PermsCreate {
	pc.mutation.SetArchGBCd(s)
	return pc
}

// SetNillableArchGBCd sets the "arch_gb_cd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableArchGBCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetArchGBCd(*s)
	}
	return pc
}

// SetPlatArea sets the "plat_area" field.
func (pc *PermsCreate) SetPlatArea(u uint32) *PermsCreate {
	pc.mutation.SetPlatArea(u)
	return pc
}

// SetNillablePlatArea sets the "plat_area" field if the given value is not nil.
func (pc *PermsCreate) SetNillablePlatArea(u *uint32) *PermsCreate {
	if u != nil {
		pc.SetPlatArea(*u)
	}
	return pc
}

// SetArchArea sets the "arch_area" field.
func (pc *PermsCreate) SetArchArea(u uint32) *PermsCreate {
	pc.mutation.SetArchArea(u)
	return pc
}

// SetNillableArchArea sets the "arch_area" field if the given value is not nil.
func (pc *PermsCreate) SetNillableArchArea(u *uint32) *PermsCreate {
	if u != nil {
		pc.SetArchArea(*u)
	}
	return pc
}

// SetBcRat sets the "bc_rat" field.
func (pc *PermsCreate) SetBcRat(u uint16) *PermsCreate {
	pc.mutation.SetBcRat(u)
	return pc
}

// SetNillableBcRat sets the "bc_rat" field if the given value is not nil.
func (pc *PermsCreate) SetNillableBcRat(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetBcRat(*u)
	}
	return pc
}

// SetTotArea sets the "tot_area" field.
func (pc *PermsCreate) SetTotArea(u uint32) *PermsCreate {
	pc.mutation.SetTotArea(u)
	return pc
}

// SetNillableTotArea sets the "tot_area" field if the given value is not nil.
func (pc *PermsCreate) SetNillableTotArea(u *uint32) *PermsCreate {
	if u != nil {
		pc.SetTotArea(*u)
	}
	return pc
}

// SetVlRatEstmTotArea sets the "vl_rat_estm_tot_area" field.
func (pc *PermsCreate) SetVlRatEstmTotArea(u uint32) *PermsCreate {
	pc.mutation.SetVlRatEstmTotArea(u)
	return pc
}

// SetNillableVlRatEstmTotArea sets the "vl_rat_estm_tot_area" field if the given value is not nil.
func (pc *PermsCreate) SetNillableVlRatEstmTotArea(u *uint32) *PermsCreate {
	if u != nil {
		pc.SetVlRatEstmTotArea(*u)
	}
	return pc
}

// SetVlRat sets the "vl_rat" field.
func (pc *PermsCreate) SetVlRat(u uint16) *PermsCreate {
	pc.mutation.SetVlRat(u)
	return pc
}

// SetNillableVlRat sets the "vl_rat" field if the given value is not nil.
func (pc *PermsCreate) SetNillableVlRat(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetVlRat(*u)
	}
	return pc
}

// SetMainBldCnt sets the "main_bld_cnt" field.
func (pc *PermsCreate) SetMainBldCnt(u uint16) *PermsCreate {
	pc.mutation.SetMainBldCnt(u)
	return pc
}

// SetNillableMainBldCnt sets the "main_bld_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableMainBldCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetMainBldCnt(*u)
	}
	return pc
}

// SetAtchBldDongCnt sets the "atch_bld_dong_cnt" field.
func (pc *PermsCreate) SetAtchBldDongCnt(u uint16) *PermsCreate {
	pc.mutation.SetAtchBldDongCnt(u)
	return pc
}

// SetNillableAtchBldDongCnt sets the "atch_bld_dong_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableAtchBldDongCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetAtchBldDongCnt(*u)
	}
	return pc
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (pc *PermsCreate) SetMainPurpsCd(s string) *PermsCreate {
	pc.mutation.SetMainPurpsCd(s)
	return pc
}

// SetNillableMainPurpsCd sets the "main_purps_cd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableMainPurpsCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetMainPurpsCd(*s)
	}
	return pc
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (pc *PermsCreate) SetMainPurpsCdNm(s string) *PermsCreate {
	pc.mutation.SetMainPurpsCdNm(s)
	return pc
}

// SetNillableMainPurpsCdNm sets the "main_purps_cd_nm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableMainPurpsCdNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetMainPurpsCdNm(*s)
	}
	return pc
}

// SetHhldCnt sets the "hhld_cnt" field.
func (pc *PermsCreate) SetHhldCnt(u uint16) *PermsCreate {
	pc.mutation.SetHhldCnt(u)
	return pc
}

// SetNillableHhldCnt sets the "hhld_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableHhldCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetHhldCnt(*u)
	}
	return pc
}

// SetHoCnt sets the "ho_cnt" field.
func (pc *PermsCreate) SetHoCnt(u uint16) *PermsCreate {
	pc.mutation.SetHoCnt(u)
	return pc
}

// SetNillableHoCnt sets the "ho_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableHoCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetHoCnt(*u)
	}
	return pc
}

// SetFmlyCnt sets the "fmly_cnt" field.
func (pc *PermsCreate) SetFmlyCnt(u uint16) *PermsCreate {
	pc.mutation.SetFmlyCnt(u)
	return pc
}

// SetNillableFmlyCnt sets the "fmly_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableFmlyCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetFmlyCnt(*u)
	}
	return pc
}

// SetTotPkngCnt sets the "tot_pkng_cnt" field.
func (pc *PermsCreate) SetTotPkngCnt(u uint16) *PermsCreate {
	pc.mutation.SetTotPkngCnt(u)
	return pc
}

// SetNillableTotPkngCnt sets the "tot_pkng_cnt" field if the given value is not nil.
func (pc *PermsCreate) SetNillableTotPkngCnt(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetTotPkngCnt(*u)
	}
	return pc
}

// SetStcnsSchedDay sets the "stcns_sched_day" field.
func (pc *PermsCreate) SetStcnsSchedDay(s string) *PermsCreate {
	pc.mutation.SetStcnsSchedDay(s)
	return pc
}

// SetNillableStcnsSchedDay sets the "stcns_sched_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableStcnsSchedDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetStcnsSchedDay(*s)
	}
	return pc
}

// SetStcnsDelayDay sets the "stcns_delay_day" field.
func (pc *PermsCreate) SetStcnsDelayDay(s string) *PermsCreate {
	pc.mutation.SetStcnsDelayDay(s)
	return pc
}

// SetNillableStcnsDelayDay sets the "stcns_delay_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableStcnsDelayDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetStcnsDelayDay(*s)
	}
	return pc
}

// SetRealStcnsDay sets the "real_stcns_day" field.
func (pc *PermsCreate) SetRealStcnsDay(s string) *PermsCreate {
	pc.mutation.SetRealStcnsDay(s)
	return pc
}

// SetNillableRealStcnsDay sets the "real_stcns_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableRealStcnsDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetRealStcnsDay(*s)
	}
	return pc
}

// SetArchPmsDay sets the "arch_pms_day" field.
func (pc *PermsCreate) SetArchPmsDay(s string) *PermsCreate {
	pc.mutation.SetArchPmsDay(s)
	return pc
}

// SetNillableArchPmsDay sets the "arch_pms_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableArchPmsDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetArchPmsDay(*s)
	}
	return pc
}

// SetUseAprDay sets the "use_apr_day" field.
func (pc *PermsCreate) SetUseAprDay(s string) *PermsCreate {
	pc.mutation.SetUseAprDay(s)
	return pc
}

// SetNillableUseAprDay sets the "use_apr_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableUseAprDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetUseAprDay(*s)
	}
	return pc
}

// SetPlatPlc sets the "platPlc" field.
func (pc *PermsCreate) SetPlatPlc(s string) *PermsCreate {
	pc.mutation.SetPlatPlc(s)
	return pc
}

// SetNillablePlatPlc sets the "platPlc" field if the given value is not nil.
func (pc *PermsCreate) SetNillablePlatPlc(s *string) *PermsCreate {
	if s != nil {
		pc.SetPlatPlc(*s)
	}
	return pc
}

// SetSigunguCd sets the "sigunguCd" field.
func (pc *PermsCreate) SetSigunguCd(s string) *PermsCreate {
	pc.mutation.SetSigunguCd(s)
	return pc
}

// SetNillableSigunguCd sets the "sigunguCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableSigunguCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetSigunguCd(*s)
	}
	return pc
}

// SetBjdongCd sets the "bjdongCd" field.
func (pc *PermsCreate) SetBjdongCd(s string) *PermsCreate {
	pc.mutation.SetBjdongCd(s)
	return pc
}

// SetNillableBjdongCd sets the "bjdongCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillableBjdongCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetBjdongCd(*s)
	}
	return pc
}

// SetPlatGbCd sets the "platGbCd" field.
func (pc *PermsCreate) SetPlatGbCd(s string) *PermsCreate {
	pc.mutation.SetPlatGbCd(s)
	return pc
}

// SetNillablePlatGbCd sets the "platGbCd" field if the given value is not nil.
func (pc *PermsCreate) SetNillablePlatGbCd(s *string) *PermsCreate {
	if s != nil {
		pc.SetPlatGbCd(*s)
	}
	return pc
}

// SetBun sets the "bun" field.
func (pc *PermsCreate) SetBun(s string) *PermsCreate {
	pc.mutation.SetBun(s)
	return pc
}

// SetNillableBun sets the "bun" field if the given value is not nil.
func (pc *PermsCreate) SetNillableBun(s *string) *PermsCreate {
	if s != nil {
		pc.SetBun(*s)
	}
	return pc
}

// SetJi sets the "ji" field.
func (pc *PermsCreate) SetJi(s string) *PermsCreate {
	pc.mutation.SetJi(s)
	return pc
}

// SetNillableJi sets the "ji" field if the given value is not nil.
func (pc *PermsCreate) SetNillableJi(s *string) *PermsCreate {
	if s != nil {
		pc.SetJi(*s)
	}
	return pc
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (pc *PermsCreate) SetMgmPmsrgstPk(s string) *PermsCreate {
	pc.mutation.SetMgmPmsrgstPk(s)
	return pc
}

// SetSplotNm sets the "splotNm" field.
func (pc *PermsCreate) SetSplotNm(s string) *PermsCreate {
	pc.mutation.SetSplotNm(s)
	return pc
}

// SetNillableSplotNm sets the "splotNm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableSplotNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetSplotNm(*s)
	}
	return pc
}

// SetBlock sets the "block" field.
func (pc *PermsCreate) SetBlock(s string) *PermsCreate {
	pc.mutation.SetBlock(s)
	return pc
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (pc *PermsCreate) SetNillableBlock(s *string) *PermsCreate {
	if s != nil {
		pc.SetBlock(*s)
	}
	return pc
}

// SetLot sets the "lot" field.
func (pc *PermsCreate) SetLot(s string) *PermsCreate {
	pc.mutation.SetLot(s)
	return pc
}

// SetNillableLot sets the "lot" field if the given value is not nil.
func (pc *PermsCreate) SetNillableLot(s *string) *PermsCreate {
	if s != nil {
		pc.SetLot(*s)
	}
	return pc
}

// SetCrtnDay sets the "crtn_day" field.
func (pc *PermsCreate) SetCrtnDay(s string) *PermsCreate {
	pc.mutation.SetCrtnDay(s)
	return pc
}

// SetNillableCrtnDay sets the "crtn_day" field if the given value is not nil.
func (pc *PermsCreate) SetNillableCrtnDay(s *string) *PermsCreate {
	if s != nil {
		pc.SetCrtnDay(*s)
	}
	return pc
}

// SetRnum sets the "rnum" field.
func (pc *PermsCreate) SetRnum(u uint16) *PermsCreate {
	pc.mutation.SetRnum(u)
	return pc
}

// SetNillableRnum sets the "rnum" field if the given value is not nil.
func (pc *PermsCreate) SetNillableRnum(u *uint16) *PermsCreate {
	if u != nil {
		pc.SetRnum(*u)
	}
	return pc
}

// SetBldNm sets the "bld_nm" field.
func (pc *PermsCreate) SetBldNm(s string) *PermsCreate {
	pc.mutation.SetBldNm(s)
	return pc
}

// SetNillableBldNm sets the "bld_nm" field if the given value is not nil.
func (pc *PermsCreate) SetNillableBldNm(s *string) *PermsCreate {
	if s != nil {
		pc.SetBldNm(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PermsCreate) SetCreatedAt(t time.Time) *PermsCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PermsCreate) SetNillableCreatedAt(t *time.Time) *PermsCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PermsCreate) SetUpdatedAt(t time.Time) *PermsCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PermsCreate) SetNillableUpdatedAt(t *time.Time) *PermsCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// Mutation returns the PermsMutation object of the builder.
func (pc *PermsCreate) Mutation() *PermsMutation {
	return pc.mutation
}

// Save creates the Perms in the database.
func (pc *PermsCreate) Save(ctx context.Context) (*Perms, error) {
	pc.defaults()
	return withHooks[*Perms, PermsMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermsCreate) SaveX(ctx context.Context) *Perms {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermsCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := perms.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := perms.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermsCreate) check() error {
	if _, ok := pc.mutation.MgmPmsrgstPk(); !ok {
		return &ValidationError{Name: "mgm_pmsrgst_pk", err: errors.New(`ent: missing required field "Perms.mgm_pmsrgst_pk"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Perms.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Perms.updated_at"`)}
	}
	return nil
}

func (pc *PermsCreate) sqlSave(ctx context.Context) (*Perms, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermsCreate) createSpec() (*Perms, *sqlgraph.CreateSpec) {
	var (
		_node = &Perms{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(perms.Table, sqlgraph.NewFieldSpec(perms.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.GuyukCd(); ok {
		_spec.SetField(perms.FieldGuyukCd, field.TypeString, value)
		_node.GuyukCd = value
	}
	if value, ok := pc.mutation.GuyukCdNm(); ok {
		_spec.SetField(perms.FieldGuyukCdNm, field.TypeString, value)
		_node.GuyukCdNm = value
	}
	if value, ok := pc.mutation.JimokCd(); ok {
		_spec.SetField(perms.FieldJimokCd, field.TypeString, value)
		_node.JimokCd = value
	}
	if value, ok := pc.mutation.JimokCdNm(); ok {
		_spec.SetField(perms.FieldJimokCdNm, field.TypeString, value)
		_node.JimokCdNm = value
	}
	if value, ok := pc.mutation.JiyukCd(); ok {
		_spec.SetField(perms.FieldJiyukCd, field.TypeString, value)
		_node.JiyukCd = value
	}
	if value, ok := pc.mutation.JiyukCdNm(); ok {
		_spec.SetField(perms.FieldJiyukCdNm, field.TypeString, value)
		_node.JiyukCdNm = value
	}
	if value, ok := pc.mutation.JiguCd(); ok {
		_spec.SetField(perms.FieldJiguCd, field.TypeString, value)
		_node.JiguCd = value
	}
	if value, ok := pc.mutation.JiguCdNm(); ok {
		_spec.SetField(perms.FieldJiguCdNm, field.TypeString, value)
		_node.JiguCdNm = value
	}
	if value, ok := pc.mutation.ArchGBCdNm(); ok {
		_spec.SetField(perms.FieldArchGBCdNm, field.TypeString, value)
		_node.ArchGBCdNm = value
	}
	if value, ok := pc.mutation.ArchGBCd(); ok {
		_spec.SetField(perms.FieldArchGBCd, field.TypeString, value)
		_node.ArchGBCd = value
	}
	if value, ok := pc.mutation.PlatArea(); ok {
		_spec.SetField(perms.FieldPlatArea, field.TypeUint32, value)
		_node.PlatArea = value
	}
	if value, ok := pc.mutation.ArchArea(); ok {
		_spec.SetField(perms.FieldArchArea, field.TypeUint32, value)
		_node.ArchArea = value
	}
	if value, ok := pc.mutation.BcRat(); ok {
		_spec.SetField(perms.FieldBcRat, field.TypeUint16, value)
		_node.BcRat = value
	}
	if value, ok := pc.mutation.TotArea(); ok {
		_spec.SetField(perms.FieldTotArea, field.TypeUint32, value)
		_node.TotArea = value
	}
	if value, ok := pc.mutation.VlRatEstmTotArea(); ok {
		_spec.SetField(perms.FieldVlRatEstmTotArea, field.TypeUint32, value)
		_node.VlRatEstmTotArea = value
	}
	if value, ok := pc.mutation.VlRat(); ok {
		_spec.SetField(perms.FieldVlRat, field.TypeUint16, value)
		_node.VlRat = value
	}
	if value, ok := pc.mutation.MainBldCnt(); ok {
		_spec.SetField(perms.FieldMainBldCnt, field.TypeUint16, value)
		_node.MainBldCnt = value
	}
	if value, ok := pc.mutation.AtchBldDongCnt(); ok {
		_spec.SetField(perms.FieldAtchBldDongCnt, field.TypeUint16, value)
		_node.AtchBldDongCnt = value
	}
	if value, ok := pc.mutation.MainPurpsCd(); ok {
		_spec.SetField(perms.FieldMainPurpsCd, field.TypeString, value)
		_node.MainPurpsCd = value
	}
	if value, ok := pc.mutation.MainPurpsCdNm(); ok {
		_spec.SetField(perms.FieldMainPurpsCdNm, field.TypeString, value)
		_node.MainPurpsCdNm = value
	}
	if value, ok := pc.mutation.HhldCnt(); ok {
		_spec.SetField(perms.FieldHhldCnt, field.TypeUint16, value)
		_node.HhldCnt = value
	}
	if value, ok := pc.mutation.HoCnt(); ok {
		_spec.SetField(perms.FieldHoCnt, field.TypeUint16, value)
		_node.HoCnt = value
	}
	if value, ok := pc.mutation.FmlyCnt(); ok {
		_spec.SetField(perms.FieldFmlyCnt, field.TypeUint16, value)
		_node.FmlyCnt = value
	}
	if value, ok := pc.mutation.TotPkngCnt(); ok {
		_spec.SetField(perms.FieldTotPkngCnt, field.TypeUint16, value)
		_node.TotPkngCnt = value
	}
	if value, ok := pc.mutation.StcnsSchedDay(); ok {
		_spec.SetField(perms.FieldStcnsSchedDay, field.TypeString, value)
		_node.StcnsSchedDay = value
	}
	if value, ok := pc.mutation.StcnsDelayDay(); ok {
		_spec.SetField(perms.FieldStcnsDelayDay, field.TypeString, value)
		_node.StcnsDelayDay = value
	}
	if value, ok := pc.mutation.RealStcnsDay(); ok {
		_spec.SetField(perms.FieldRealStcnsDay, field.TypeString, value)
		_node.RealStcnsDay = value
	}
	if value, ok := pc.mutation.ArchPmsDay(); ok {
		_spec.SetField(perms.FieldArchPmsDay, field.TypeString, value)
		_node.ArchPmsDay = value
	}
	if value, ok := pc.mutation.UseAprDay(); ok {
		_spec.SetField(perms.FieldUseAprDay, field.TypeString, value)
		_node.UseAprDay = value
	}
	if value, ok := pc.mutation.PlatPlc(); ok {
		_spec.SetField(perms.FieldPlatPlc, field.TypeString, value)
		_node.PlatPlc = value
	}
	if value, ok := pc.mutation.SigunguCd(); ok {
		_spec.SetField(perms.FieldSigunguCd, field.TypeString, value)
		_node.SigunguCd = value
	}
	if value, ok := pc.mutation.BjdongCd(); ok {
		_spec.SetField(perms.FieldBjdongCd, field.TypeString, value)
		_node.BjdongCd = value
	}
	if value, ok := pc.mutation.PlatGbCd(); ok {
		_spec.SetField(perms.FieldPlatGbCd, field.TypeString, value)
		_node.PlatGbCd = value
	}
	if value, ok := pc.mutation.Bun(); ok {
		_spec.SetField(perms.FieldBun, field.TypeString, value)
		_node.Bun = value
	}
	if value, ok := pc.mutation.Ji(); ok {
		_spec.SetField(perms.FieldJi, field.TypeString, value)
		_node.Ji = value
	}
	if value, ok := pc.mutation.MgmPmsrgstPk(); ok {
		_spec.SetField(perms.FieldMgmPmsrgstPk, field.TypeString, value)
		_node.MgmPmsrgstPk = value
	}
	if value, ok := pc.mutation.SplotNm(); ok {
		_spec.SetField(perms.FieldSplotNm, field.TypeString, value)
		_node.SplotNm = value
	}
	if value, ok := pc.mutation.Block(); ok {
		_spec.SetField(perms.FieldBlock, field.TypeString, value)
		_node.Block = value
	}
	if value, ok := pc.mutation.Lot(); ok {
		_spec.SetField(perms.FieldLot, field.TypeString, value)
		_node.Lot = value
	}
	if value, ok := pc.mutation.CrtnDay(); ok {
		_spec.SetField(perms.FieldCrtnDay, field.TypeString, value)
		_node.CrtnDay = value
	}
	if value, ok := pc.mutation.Rnum(); ok {
		_spec.SetField(perms.FieldRnum, field.TypeUint16, value)
		_node.Rnum = value
	}
	if value, ok := pc.mutation.BldNm(); ok {
		_spec.SetField(perms.FieldBldNm, field.TypeString, value)
		_node.BldNm = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(perms.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(perms.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// PermsCreateBulk is the builder for creating many Perms entities in bulk.
type PermsCreateBulk struct {
	config
	builders []*PermsCreate
}

// Save creates the Perms entities in the database.
func (pcb *PermsCreateBulk) Save(ctx context.Context) ([]*Perms, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Perms, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermsCreateBulk) SaveX(ctx context.Context) []*Perms {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
