// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"gopms/ent/migrate"

	"gopms/ent/bjd"
	"gopms/ent/demol"
	"gopms/ent/jibun"
	"gopms/ent/perms"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bjd is the client for interacting with the Bjd builders.
	Bjd *BjdClient
	// Demol is the client for interacting with the Demol builders.
	Demol *DemolClient
	// Jibun is the client for interacting with the Jibun builders.
	Jibun *JibunClient
	// Perms is the client for interacting with the Perms builders.
	Perms *PermsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bjd = NewBjdClient(c.config)
	c.Demol = NewDemolClient(c.config)
	c.Jibun = NewJibunClient(c.config)
	c.Perms = NewPermsClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Bjd:    NewBjdClient(cfg),
		Demol:  NewDemolClient(cfg),
		Jibun:  NewJibunClient(cfg),
		Perms:  NewPermsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Bjd:    NewBjdClient(cfg),
		Demol:  NewDemolClient(cfg),
		Jibun:  NewJibunClient(cfg),
		Perms:  NewPermsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bjd.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bjd.Use(hooks...)
	c.Demol.Use(hooks...)
	c.Jibun.Use(hooks...)
	c.Perms.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Bjd.Intercept(interceptors...)
	c.Demol.Intercept(interceptors...)
	c.Jibun.Intercept(interceptors...)
	c.Perms.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BjdMutation:
		return c.Bjd.mutate(ctx, m)
	case *DemolMutation:
		return c.Demol.mutate(ctx, m)
	case *JibunMutation:
		return c.Jibun.mutate(ctx, m)
	case *PermsMutation:
		return c.Perms.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BjdClient is a client for the Bjd schema.
type BjdClient struct {
	config
}

// NewBjdClient returns a client for the Bjd from the given config.
func NewBjdClient(c config) *BjdClient {
	return &BjdClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bjd.Hooks(f(g(h())))`.
func (c *BjdClient) Use(hooks ...Hook) {
	c.hooks.Bjd = append(c.hooks.Bjd, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bjd.Intercept(f(g(h())))`.
func (c *BjdClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bjd = append(c.inters.Bjd, interceptors...)
}

// Create returns a builder for creating a Bjd entity.
func (c *BjdClient) Create() *BjdCreate {
	mutation := newBjdMutation(c.config, OpCreate)
	return &BjdCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bjd entities.
func (c *BjdClient) CreateBulk(builders ...*BjdCreate) *BjdCreateBulk {
	return &BjdCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bjd.
func (c *BjdClient) Update() *BjdUpdate {
	mutation := newBjdMutation(c.config, OpUpdate)
	return &BjdUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BjdClient) UpdateOne(b *Bjd) *BjdUpdateOne {
	mutation := newBjdMutation(c.config, OpUpdateOne, withBjd(b))
	return &BjdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BjdClient) UpdateOneID(id int) *BjdUpdateOne {
	mutation := newBjdMutation(c.config, OpUpdateOne, withBjdID(id))
	return &BjdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bjd.
func (c *BjdClient) Delete() *BjdDelete {
	mutation := newBjdMutation(c.config, OpDelete)
	return &BjdDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BjdClient) DeleteOne(b *Bjd) *BjdDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BjdClient) DeleteOneID(id int) *BjdDeleteOne {
	builder := c.Delete().Where(bjd.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BjdDeleteOne{builder}
}

// Query returns a query builder for Bjd.
func (c *BjdClient) Query() *BjdQuery {
	return &BjdQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBjd},
		inters: c.Interceptors(),
	}
}

// Get returns a Bjd entity by its id.
func (c *BjdClient) Get(ctx context.Context, id int) (*Bjd, error) {
	return c.Query().Where(bjd.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BjdClient) GetX(ctx context.Context, id int) *Bjd {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJibun queries the jibun edge of a Bjd.
func (c *BjdClient) QueryJibun(b *Bjd) *JibunQuery {
	query := (&JibunClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bjd.Table, bjd.FieldID, id),
			sqlgraph.To(jibun.Table, jibun.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bjd.JibunTable, bjd.JibunColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BjdClient) Hooks() []Hook {
	return c.hooks.Bjd
}

// Interceptors returns the client interceptors.
func (c *BjdClient) Interceptors() []Interceptor {
	return c.inters.Bjd
}

func (c *BjdClient) mutate(ctx context.Context, m *BjdMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BjdCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BjdUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BjdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BjdDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bjd mutation op: %q", m.Op())
	}
}

// DemolClient is a client for the Demol schema.
type DemolClient struct {
	config
}

// NewDemolClient returns a client for the Demol from the given config.
func NewDemolClient(c config) *DemolClient {
	return &DemolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `demol.Hooks(f(g(h())))`.
func (c *DemolClient) Use(hooks ...Hook) {
	c.hooks.Demol = append(c.hooks.Demol, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `demol.Intercept(f(g(h())))`.
func (c *DemolClient) Intercept(interceptors ...Interceptor) {
	c.inters.Demol = append(c.inters.Demol, interceptors...)
}

// Create returns a builder for creating a Demol entity.
func (c *DemolClient) Create() *DemolCreate {
	mutation := newDemolMutation(c.config, OpCreate)
	return &DemolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Demol entities.
func (c *DemolClient) CreateBulk(builders ...*DemolCreate) *DemolCreateBulk {
	return &DemolCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Demol.
func (c *DemolClient) Update() *DemolUpdate {
	mutation := newDemolMutation(c.config, OpUpdate)
	return &DemolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DemolClient) UpdateOne(d *Demol) *DemolUpdateOne {
	mutation := newDemolMutation(c.config, OpUpdateOne, withDemol(d))
	return &DemolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DemolClient) UpdateOneID(id int) *DemolUpdateOne {
	mutation := newDemolMutation(c.config, OpUpdateOne, withDemolID(id))
	return &DemolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Demol.
func (c *DemolClient) Delete() *DemolDelete {
	mutation := newDemolMutation(c.config, OpDelete)
	return &DemolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DemolClient) DeleteOne(d *Demol) *DemolDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DemolClient) DeleteOneID(id int) *DemolDeleteOne {
	builder := c.Delete().Where(demol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DemolDeleteOne{builder}
}

// Query returns a query builder for Demol.
func (c *DemolClient) Query() *DemolQuery {
	return &DemolQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDemol},
		inters: c.Interceptors(),
	}
}

// Get returns a Demol entity by its id.
func (c *DemolClient) Get(ctx context.Context, id int) (*Demol, error) {
	return c.Query().Where(demol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DemolClient) GetX(ctx context.Context, id int) *Demol {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DemolClient) Hooks() []Hook {
	return c.hooks.Demol
}

// Interceptors returns the client interceptors.
func (c *DemolClient) Interceptors() []Interceptor {
	return c.inters.Demol
}

func (c *DemolClient) mutate(ctx context.Context, m *DemolMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DemolCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DemolUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DemolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DemolDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Demol mutation op: %q", m.Op())
	}
}

// JibunClient is a client for the Jibun schema.
type JibunClient struct {
	config
}

// NewJibunClient returns a client for the Jibun from the given config.
func NewJibunClient(c config) *JibunClient {
	return &JibunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jibun.Hooks(f(g(h())))`.
func (c *JibunClient) Use(hooks ...Hook) {
	c.hooks.Jibun = append(c.hooks.Jibun, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jibun.Intercept(f(g(h())))`.
func (c *JibunClient) Intercept(interceptors ...Interceptor) {
	c.inters.Jibun = append(c.inters.Jibun, interceptors...)
}

// Create returns a builder for creating a Jibun entity.
func (c *JibunClient) Create() *JibunCreate {
	mutation := newJibunMutation(c.config, OpCreate)
	return &JibunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Jibun entities.
func (c *JibunClient) CreateBulk(builders ...*JibunCreate) *JibunCreateBulk {
	return &JibunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Jibun.
func (c *JibunClient) Update() *JibunUpdate {
	mutation := newJibunMutation(c.config, OpUpdate)
	return &JibunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JibunClient) UpdateOne(j *Jibun) *JibunUpdateOne {
	mutation := newJibunMutation(c.config, OpUpdateOne, withJibun(j))
	return &JibunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JibunClient) UpdateOneID(id int) *JibunUpdateOne {
	mutation := newJibunMutation(c.config, OpUpdateOne, withJibunID(id))
	return &JibunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Jibun.
func (c *JibunClient) Delete() *JibunDelete {
	mutation := newJibunMutation(c.config, OpDelete)
	return &JibunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JibunClient) DeleteOne(j *Jibun) *JibunDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JibunClient) DeleteOneID(id int) *JibunDeleteOne {
	builder := c.Delete().Where(jibun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JibunDeleteOne{builder}
}

// Query returns a query builder for Jibun.
func (c *JibunClient) Query() *JibunQuery {
	return &JibunQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJibun},
		inters: c.Interceptors(),
	}
}

// Get returns a Jibun entity by its id.
func (c *JibunClient) Get(ctx context.Context, id int) (*Jibun, error) {
	return c.Query().Where(jibun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JibunClient) GetX(ctx context.Context, id int) *Jibun {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDemol queries the demol edge of a Jibun.
func (c *JibunClient) QueryDemol(j *Jibun) *DemolQuery {
	query := (&DemolClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jibun.Table, jibun.FieldID, id),
			sqlgraph.To(demol.Table, demol.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jibun.DemolTable, jibun.DemolColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JibunClient) Hooks() []Hook {
	return c.hooks.Jibun
}

// Interceptors returns the client interceptors.
func (c *JibunClient) Interceptors() []Interceptor {
	return c.inters.Jibun
}

func (c *JibunClient) mutate(ctx context.Context, m *JibunMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JibunCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JibunUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JibunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JibunDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Jibun mutation op: %q", m.Op())
	}
}

// PermsClient is a client for the Perms schema.
type PermsClient struct {
	config
}

// NewPermsClient returns a client for the Perms from the given config.
func NewPermsClient(c config) *PermsClient {
	return &PermsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `perms.Hooks(f(g(h())))`.
func (c *PermsClient) Use(hooks ...Hook) {
	c.hooks.Perms = append(c.hooks.Perms, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `perms.Intercept(f(g(h())))`.
func (c *PermsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Perms = append(c.inters.Perms, interceptors...)
}

// Create returns a builder for creating a Perms entity.
func (c *PermsClient) Create() *PermsCreate {
	mutation := newPermsMutation(c.config, OpCreate)
	return &PermsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Perms entities.
func (c *PermsClient) CreateBulk(builders ...*PermsCreate) *PermsCreateBulk {
	return &PermsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Perms.
func (c *PermsClient) Update() *PermsUpdate {
	mutation := newPermsMutation(c.config, OpUpdate)
	return &PermsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermsClient) UpdateOne(pe *Perms) *PermsUpdateOne {
	mutation := newPermsMutation(c.config, OpUpdateOne, withPerms(pe))
	return &PermsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermsClient) UpdateOneID(id int) *PermsUpdateOne {
	mutation := newPermsMutation(c.config, OpUpdateOne, withPermsID(id))
	return &PermsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Perms.
func (c *PermsClient) Delete() *PermsDelete {
	mutation := newPermsMutation(c.config, OpDelete)
	return &PermsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermsClient) DeleteOne(pe *Perms) *PermsDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermsClient) DeleteOneID(id int) *PermsDeleteOne {
	builder := c.Delete().Where(perms.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermsDeleteOne{builder}
}

// Query returns a query builder for Perms.
func (c *PermsClient) Query() *PermsQuery {
	return &PermsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePerms},
		inters: c.Interceptors(),
	}
}

// Get returns a Perms entity by its id.
func (c *PermsClient) Get(ctx context.Context, id int) (*Perms, error) {
	return c.Query().Where(perms.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermsClient) GetX(ctx context.Context, id int) *Perms {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PermsClient) Hooks() []Hook {
	return c.hooks.Perms
}

// Interceptors returns the client interceptors.
func (c *PermsClient) Interceptors() []Interceptor {
	return c.inters.Perms
}

func (c *PermsClient) mutate(ctx context.Context, m *PermsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Perms mutation op: %q", m.Op())
	}
}
