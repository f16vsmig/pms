// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/demol"
	"gopms/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DemolUpdate is the builder for updating Demol entities.
type DemolUpdate struct {
	config
	hooks    []Hook
	mutation *DemolMutation
}

// Where appends a list predicates to the DemolUpdate builder.
func (du *DemolUpdate) Where(ps ...predicate.Demol) *DemolUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (du *DemolUpdate) SetMgmPmsrgstPk(s string) *DemolUpdate {
	du.mutation.SetMgmPmsrgstPk(s)
	return du
}

// SetBldNm sets the "bld_nm" field.
func (du *DemolUpdate) SetBldNm(s string) *DemolUpdate {
	du.mutation.SetBldNm(s)
	return du
}

// SetNillableBldNm sets the "bld_nm" field if the given value is not nil.
func (du *DemolUpdate) SetNillableBldNm(s *string) *DemolUpdate {
	if s != nil {
		du.SetBldNm(*s)
	}
	return du
}

// ClearBldNm clears the value of the "bld_nm" field.
func (du *DemolUpdate) ClearBldNm() *DemolUpdate {
	du.mutation.ClearBldNm()
	return du
}

// SetDemolExtngGBCd sets the "demol_extng_gb_cd" field.
func (du *DemolUpdate) SetDemolExtngGBCd(s string) *DemolUpdate {
	du.mutation.SetDemolExtngGBCd(s)
	return du
}

// SetNillableDemolExtngGBCd sets the "demol_extng_gb_cd" field if the given value is not nil.
func (du *DemolUpdate) SetNillableDemolExtngGBCd(s *string) *DemolUpdate {
	if s != nil {
		du.SetDemolExtngGBCd(*s)
	}
	return du
}

// ClearDemolExtngGBCd clears the value of the "demol_extng_gb_cd" field.
func (du *DemolUpdate) ClearDemolExtngGBCd() *DemolUpdate {
	du.mutation.ClearDemolExtngGBCd()
	return du
}

// SetDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field.
func (du *DemolUpdate) SetDemolExtngGBCdNm(s string) *DemolUpdate {
	du.mutation.SetDemolExtngGBCdNm(s)
	return du
}

// SetNillableDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field if the given value is not nil.
func (du *DemolUpdate) SetNillableDemolExtngGBCdNm(s *string) *DemolUpdate {
	if s != nil {
		du.SetDemolExtngGBCdNm(*s)
	}
	return du
}

// ClearDemolExtngGBCdNm clears the value of the "demol_extng_gb_cd_nm" field.
func (du *DemolUpdate) ClearDemolExtngGBCdNm() *DemolUpdate {
	du.mutation.ClearDemolExtngGBCdNm()
	return du
}

// SetDemolStrtDay sets the "demol_strt_day" field.
func (du *DemolUpdate) SetDemolStrtDay(s string) *DemolUpdate {
	du.mutation.SetDemolStrtDay(s)
	return du
}

// SetNillableDemolStrtDay sets the "demol_strt_day" field if the given value is not nil.
func (du *DemolUpdate) SetNillableDemolStrtDay(s *string) *DemolUpdate {
	if s != nil {
		du.SetDemolStrtDay(*s)
	}
	return du
}

// ClearDemolStrtDay clears the value of the "demol_strt_day" field.
func (du *DemolUpdate) ClearDemolStrtDay() *DemolUpdate {
	du.mutation.ClearDemolStrtDay()
	return du
}

// SetDemolEndDay sets the "demol_end_day" field.
func (du *DemolUpdate) SetDemolEndDay(s string) *DemolUpdate {
	du.mutation.SetDemolEndDay(s)
	return du
}

// SetNillableDemolEndDay sets the "demol_end_day" field if the given value is not nil.
func (du *DemolUpdate) SetNillableDemolEndDay(s *string) *DemolUpdate {
	if s != nil {
		du.SetDemolEndDay(*s)
	}
	return du
}

// ClearDemolEndDay clears the value of the "demol_end_day" field.
func (du *DemolUpdate) ClearDemolEndDay() *DemolUpdate {
	du.mutation.ClearDemolEndDay()
	return du
}

// SetDemolExtngDay sets the "demol_extng_day" field.
func (du *DemolUpdate) SetDemolExtngDay(s string) *DemolUpdate {
	du.mutation.SetDemolExtngDay(s)
	return du
}

// SetNillableDemolExtngDay sets the "demol_extng_day" field if the given value is not nil.
func (du *DemolUpdate) SetNillableDemolExtngDay(s *string) *DemolUpdate {
	if s != nil {
		du.SetDemolExtngDay(*s)
	}
	return du
}

// ClearDemolExtngDay clears the value of the "demol_extng_day" field.
func (du *DemolUpdate) ClearDemolExtngDay() *DemolUpdate {
	du.mutation.ClearDemolExtngDay()
	return du
}

// SetTotArea sets the "tot_area" field.
func (du *DemolUpdate) SetTotArea(u uint32) *DemolUpdate {
	du.mutation.ResetTotArea()
	du.mutation.SetTotArea(u)
	return du
}

// SetNillableTotArea sets the "tot_area" field if the given value is not nil.
func (du *DemolUpdate) SetNillableTotArea(u *uint32) *DemolUpdate {
	if u != nil {
		du.SetTotArea(*u)
	}
	return du
}

// AddTotArea adds u to the "tot_area" field.
func (du *DemolUpdate) AddTotArea(u int32) *DemolUpdate {
	du.mutation.AddTotArea(u)
	return du
}

// ClearTotArea clears the value of the "tot_area" field.
func (du *DemolUpdate) ClearTotArea() *DemolUpdate {
	du.mutation.ClearTotArea()
	return du
}

// SetBldCnt sets the "bld_cnt" field.
func (du *DemolUpdate) SetBldCnt(u uint32) *DemolUpdate {
	du.mutation.ResetBldCnt()
	du.mutation.SetBldCnt(u)
	return du
}

// SetNillableBldCnt sets the "bld_cnt" field if the given value is not nil.
func (du *DemolUpdate) SetNillableBldCnt(u *uint32) *DemolUpdate {
	if u != nil {
		du.SetBldCnt(*u)
	}
	return du
}

// AddBldCnt adds u to the "bld_cnt" field.
func (du *DemolUpdate) AddBldCnt(u int32) *DemolUpdate {
	du.mutation.AddBldCnt(u)
	return du
}

// ClearBldCnt clears the value of the "bld_cnt" field.
func (du *DemolUpdate) ClearBldCnt() *DemolUpdate {
	du.mutation.ClearBldCnt()
	return du
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (du *DemolUpdate) SetMainPurpsCd(s string) *DemolUpdate {
	du.mutation.SetMainPurpsCd(s)
	return du
}

// SetNillableMainPurpsCd sets the "main_purps_cd" field if the given value is not nil.
func (du *DemolUpdate) SetNillableMainPurpsCd(s *string) *DemolUpdate {
	if s != nil {
		du.SetMainPurpsCd(*s)
	}
	return du
}

// ClearMainPurpsCd clears the value of the "main_purps_cd" field.
func (du *DemolUpdate) ClearMainPurpsCd() *DemolUpdate {
	du.mutation.ClearMainPurpsCd()
	return du
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (du *DemolUpdate) SetMainPurpsCdNm(s string) *DemolUpdate {
	du.mutation.SetMainPurpsCdNm(s)
	return du
}

// SetNillableMainPurpsCdNm sets the "main_purps_cd_nm" field if the given value is not nil.
func (du *DemolUpdate) SetNillableMainPurpsCdNm(s *string) *DemolUpdate {
	if s != nil {
		du.SetMainPurpsCdNm(*s)
	}
	return du
}

// ClearMainPurpsCdNm clears the value of the "main_purps_cd_nm" field.
func (du *DemolUpdate) ClearMainPurpsCdNm() *DemolUpdate {
	du.mutation.ClearMainPurpsCdNm()
	return du
}

// SetStrctCd sets the "strct_cd" field.
func (du *DemolUpdate) SetStrctCd(s string) *DemolUpdate {
	du.mutation.SetStrctCd(s)
	return du
}

// SetNillableStrctCd sets the "strct_cd" field if the given value is not nil.
func (du *DemolUpdate) SetNillableStrctCd(s *string) *DemolUpdate {
	if s != nil {
		du.SetStrctCd(*s)
	}
	return du
}

// ClearStrctCd clears the value of the "strct_cd" field.
func (du *DemolUpdate) ClearStrctCd() *DemolUpdate {
	du.mutation.ClearStrctCd()
	return du
}

// SetStrctCdNm sets the "strct_cd_nm" field.
func (du *DemolUpdate) SetStrctCdNm(s string) *DemolUpdate {
	du.mutation.SetStrctCdNm(s)
	return du
}

// SetNillableStrctCdNm sets the "strct_cd_nm" field if the given value is not nil.
func (du *DemolUpdate) SetNillableStrctCdNm(s *string) *DemolUpdate {
	if s != nil {
		du.SetStrctCdNm(*s)
	}
	return du
}

// ClearStrctCdNm clears the value of the "strct_cd_nm" field.
func (du *DemolUpdate) ClearStrctCdNm() *DemolUpdate {
	du.mutation.ClearStrctCdNm()
	return du
}

// SetHhldCnt sets the "hhld_cnt" field.
func (du *DemolUpdate) SetHhldCnt(s string) *DemolUpdate {
	du.mutation.SetHhldCnt(s)
	return du
}

// SetNillableHhldCnt sets the "hhld_cnt" field if the given value is not nil.
func (du *DemolUpdate) SetNillableHhldCnt(s *string) *DemolUpdate {
	if s != nil {
		du.SetHhldCnt(*s)
	}
	return du
}

// ClearHhldCnt clears the value of the "hhld_cnt" field.
func (du *DemolUpdate) ClearHhldCnt() *DemolUpdate {
	du.mutation.ClearHhldCnt()
	return du
}

// SetHoCnt sets the "ho_cnt" field.
func (du *DemolUpdate) SetHoCnt(s string) *DemolUpdate {
	du.mutation.SetHoCnt(s)
	return du
}

// SetNillableHoCnt sets the "ho_cnt" field if the given value is not nil.
func (du *DemolUpdate) SetNillableHoCnt(s *string) *DemolUpdate {
	if s != nil {
		du.SetHoCnt(*s)
	}
	return du
}

// ClearHoCnt clears the value of the "ho_cnt" field.
func (du *DemolUpdate) ClearHoCnt() *DemolUpdate {
	du.mutation.ClearHoCnt()
	return du
}

// SetCrtnDay sets the "crtn_day" field.
func (du *DemolUpdate) SetCrtnDay(s string) *DemolUpdate {
	du.mutation.SetCrtnDay(s)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DemolUpdate) SetUpdatedAt(t time.Time) *DemolUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DemolUpdate) SetNillableUpdatedAt(t *time.Time) *DemolUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// Mutation returns the DemolMutation object of the builder.
func (du *DemolUpdate) Mutation() *DemolMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DemolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DemolMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DemolUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DemolUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DemolUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DemolUpdate) check() error {
	if v, ok := du.mutation.MgmPmsrgstPk(); ok {
		if err := demol.MgmPmsrgstPkValidator(v); err != nil {
			return &ValidationError{Name: "mgm_pmsrgst_pk", err: fmt.Errorf(`ent: validator failed for field "Demol.mgm_pmsrgst_pk": %w`, err)}
		}
	}
	return nil
}

func (du *DemolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(demol.Table, demol.Columns, sqlgraph.NewFieldSpec(demol.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.MgmPmsrgstPk(); ok {
		_spec.SetField(demol.FieldMgmPmsrgstPk, field.TypeString, value)
	}
	if value, ok := du.mutation.BldNm(); ok {
		_spec.SetField(demol.FieldBldNm, field.TypeString, value)
	}
	if du.mutation.BldNmCleared() {
		_spec.ClearField(demol.FieldBldNm, field.TypeString)
	}
	if value, ok := du.mutation.DemolExtngGBCd(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCd, field.TypeString, value)
	}
	if du.mutation.DemolExtngGBCdCleared() {
		_spec.ClearField(demol.FieldDemolExtngGBCd, field.TypeString)
	}
	if value, ok := du.mutation.DemolExtngGBCdNm(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCdNm, field.TypeString, value)
	}
	if du.mutation.DemolExtngGBCdNmCleared() {
		_spec.ClearField(demol.FieldDemolExtngGBCdNm, field.TypeString)
	}
	if value, ok := du.mutation.DemolStrtDay(); ok {
		_spec.SetField(demol.FieldDemolStrtDay, field.TypeString, value)
	}
	if du.mutation.DemolStrtDayCleared() {
		_spec.ClearField(demol.FieldDemolStrtDay, field.TypeString)
	}
	if value, ok := du.mutation.DemolEndDay(); ok {
		_spec.SetField(demol.FieldDemolEndDay, field.TypeString, value)
	}
	if du.mutation.DemolEndDayCleared() {
		_spec.ClearField(demol.FieldDemolEndDay, field.TypeString)
	}
	if value, ok := du.mutation.DemolExtngDay(); ok {
		_spec.SetField(demol.FieldDemolExtngDay, field.TypeString, value)
	}
	if du.mutation.DemolExtngDayCleared() {
		_spec.ClearField(demol.FieldDemolExtngDay, field.TypeString)
	}
	if value, ok := du.mutation.TotArea(); ok {
		_spec.SetField(demol.FieldTotArea, field.TypeUint32, value)
	}
	if value, ok := du.mutation.AddedTotArea(); ok {
		_spec.AddField(demol.FieldTotArea, field.TypeUint32, value)
	}
	if du.mutation.TotAreaCleared() {
		_spec.ClearField(demol.FieldTotArea, field.TypeUint32)
	}
	if value, ok := du.mutation.BldCnt(); ok {
		_spec.SetField(demol.FieldBldCnt, field.TypeUint32, value)
	}
	if value, ok := du.mutation.AddedBldCnt(); ok {
		_spec.AddField(demol.FieldBldCnt, field.TypeUint32, value)
	}
	if du.mutation.BldCntCleared() {
		_spec.ClearField(demol.FieldBldCnt, field.TypeUint32)
	}
	if value, ok := du.mutation.MainPurpsCd(); ok {
		_spec.SetField(demol.FieldMainPurpsCd, field.TypeString, value)
	}
	if du.mutation.MainPurpsCdCleared() {
		_spec.ClearField(demol.FieldMainPurpsCd, field.TypeString)
	}
	if value, ok := du.mutation.MainPurpsCdNm(); ok {
		_spec.SetField(demol.FieldMainPurpsCdNm, field.TypeString, value)
	}
	if du.mutation.MainPurpsCdNmCleared() {
		_spec.ClearField(demol.FieldMainPurpsCdNm, field.TypeString)
	}
	if value, ok := du.mutation.StrctCd(); ok {
		_spec.SetField(demol.FieldStrctCd, field.TypeString, value)
	}
	if du.mutation.StrctCdCleared() {
		_spec.ClearField(demol.FieldStrctCd, field.TypeString)
	}
	if value, ok := du.mutation.StrctCdNm(); ok {
		_spec.SetField(demol.FieldStrctCdNm, field.TypeString, value)
	}
	if du.mutation.StrctCdNmCleared() {
		_spec.ClearField(demol.FieldStrctCdNm, field.TypeString)
	}
	if value, ok := du.mutation.HhldCnt(); ok {
		_spec.SetField(demol.FieldHhldCnt, field.TypeString, value)
	}
	if du.mutation.HhldCntCleared() {
		_spec.ClearField(demol.FieldHhldCnt, field.TypeString)
	}
	if value, ok := du.mutation.HoCnt(); ok {
		_spec.SetField(demol.FieldHoCnt, field.TypeString, value)
	}
	if du.mutation.HoCntCleared() {
		_spec.ClearField(demol.FieldHoCnt, field.TypeString)
	}
	if value, ok := du.mutation.CrtnDay(); ok {
		_spec.SetField(demol.FieldCrtnDay, field.TypeString, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(demol.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DemolUpdateOne is the builder for updating a single Demol entity.
type DemolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DemolMutation
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (duo *DemolUpdateOne) SetMgmPmsrgstPk(s string) *DemolUpdateOne {
	duo.mutation.SetMgmPmsrgstPk(s)
	return duo
}

// SetBldNm sets the "bld_nm" field.
func (duo *DemolUpdateOne) SetBldNm(s string) *DemolUpdateOne {
	duo.mutation.SetBldNm(s)
	return duo
}

// SetNillableBldNm sets the "bld_nm" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableBldNm(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetBldNm(*s)
	}
	return duo
}

// ClearBldNm clears the value of the "bld_nm" field.
func (duo *DemolUpdateOne) ClearBldNm() *DemolUpdateOne {
	duo.mutation.ClearBldNm()
	return duo
}

// SetDemolExtngGBCd sets the "demol_extng_gb_cd" field.
func (duo *DemolUpdateOne) SetDemolExtngGBCd(s string) *DemolUpdateOne {
	duo.mutation.SetDemolExtngGBCd(s)
	return duo
}

// SetNillableDemolExtngGBCd sets the "demol_extng_gb_cd" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableDemolExtngGBCd(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetDemolExtngGBCd(*s)
	}
	return duo
}

// ClearDemolExtngGBCd clears the value of the "demol_extng_gb_cd" field.
func (duo *DemolUpdateOne) ClearDemolExtngGBCd() *DemolUpdateOne {
	duo.mutation.ClearDemolExtngGBCd()
	return duo
}

// SetDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field.
func (duo *DemolUpdateOne) SetDemolExtngGBCdNm(s string) *DemolUpdateOne {
	duo.mutation.SetDemolExtngGBCdNm(s)
	return duo
}

// SetNillableDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableDemolExtngGBCdNm(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetDemolExtngGBCdNm(*s)
	}
	return duo
}

// ClearDemolExtngGBCdNm clears the value of the "demol_extng_gb_cd_nm" field.
func (duo *DemolUpdateOne) ClearDemolExtngGBCdNm() *DemolUpdateOne {
	duo.mutation.ClearDemolExtngGBCdNm()
	return duo
}

// SetDemolStrtDay sets the "demol_strt_day" field.
func (duo *DemolUpdateOne) SetDemolStrtDay(s string) *DemolUpdateOne {
	duo.mutation.SetDemolStrtDay(s)
	return duo
}

// SetNillableDemolStrtDay sets the "demol_strt_day" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableDemolStrtDay(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetDemolStrtDay(*s)
	}
	return duo
}

// ClearDemolStrtDay clears the value of the "demol_strt_day" field.
func (duo *DemolUpdateOne) ClearDemolStrtDay() *DemolUpdateOne {
	duo.mutation.ClearDemolStrtDay()
	return duo
}

// SetDemolEndDay sets the "demol_end_day" field.
func (duo *DemolUpdateOne) SetDemolEndDay(s string) *DemolUpdateOne {
	duo.mutation.SetDemolEndDay(s)
	return duo
}

// SetNillableDemolEndDay sets the "demol_end_day" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableDemolEndDay(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetDemolEndDay(*s)
	}
	return duo
}

// ClearDemolEndDay clears the value of the "demol_end_day" field.
func (duo *DemolUpdateOne) ClearDemolEndDay() *DemolUpdateOne {
	duo.mutation.ClearDemolEndDay()
	return duo
}

// SetDemolExtngDay sets the "demol_extng_day" field.
func (duo *DemolUpdateOne) SetDemolExtngDay(s string) *DemolUpdateOne {
	duo.mutation.SetDemolExtngDay(s)
	return duo
}

// SetNillableDemolExtngDay sets the "demol_extng_day" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableDemolExtngDay(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetDemolExtngDay(*s)
	}
	return duo
}

// ClearDemolExtngDay clears the value of the "demol_extng_day" field.
func (duo *DemolUpdateOne) ClearDemolExtngDay() *DemolUpdateOne {
	duo.mutation.ClearDemolExtngDay()
	return duo
}

// SetTotArea sets the "tot_area" field.
func (duo *DemolUpdateOne) SetTotArea(u uint32) *DemolUpdateOne {
	duo.mutation.ResetTotArea()
	duo.mutation.SetTotArea(u)
	return duo
}

// SetNillableTotArea sets the "tot_area" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableTotArea(u *uint32) *DemolUpdateOne {
	if u != nil {
		duo.SetTotArea(*u)
	}
	return duo
}

// AddTotArea adds u to the "tot_area" field.
func (duo *DemolUpdateOne) AddTotArea(u int32) *DemolUpdateOne {
	duo.mutation.AddTotArea(u)
	return duo
}

// ClearTotArea clears the value of the "tot_area" field.
func (duo *DemolUpdateOne) ClearTotArea() *DemolUpdateOne {
	duo.mutation.ClearTotArea()
	return duo
}

// SetBldCnt sets the "bld_cnt" field.
func (duo *DemolUpdateOne) SetBldCnt(u uint32) *DemolUpdateOne {
	duo.mutation.ResetBldCnt()
	duo.mutation.SetBldCnt(u)
	return duo
}

// SetNillableBldCnt sets the "bld_cnt" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableBldCnt(u *uint32) *DemolUpdateOne {
	if u != nil {
		duo.SetBldCnt(*u)
	}
	return duo
}

// AddBldCnt adds u to the "bld_cnt" field.
func (duo *DemolUpdateOne) AddBldCnt(u int32) *DemolUpdateOne {
	duo.mutation.AddBldCnt(u)
	return duo
}

// ClearBldCnt clears the value of the "bld_cnt" field.
func (duo *DemolUpdateOne) ClearBldCnt() *DemolUpdateOne {
	duo.mutation.ClearBldCnt()
	return duo
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (duo *DemolUpdateOne) SetMainPurpsCd(s string) *DemolUpdateOne {
	duo.mutation.SetMainPurpsCd(s)
	return duo
}

// SetNillableMainPurpsCd sets the "main_purps_cd" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableMainPurpsCd(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetMainPurpsCd(*s)
	}
	return duo
}

// ClearMainPurpsCd clears the value of the "main_purps_cd" field.
func (duo *DemolUpdateOne) ClearMainPurpsCd() *DemolUpdateOne {
	duo.mutation.ClearMainPurpsCd()
	return duo
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (duo *DemolUpdateOne) SetMainPurpsCdNm(s string) *DemolUpdateOne {
	duo.mutation.SetMainPurpsCdNm(s)
	return duo
}

// SetNillableMainPurpsCdNm sets the "main_purps_cd_nm" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableMainPurpsCdNm(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetMainPurpsCdNm(*s)
	}
	return duo
}

// ClearMainPurpsCdNm clears the value of the "main_purps_cd_nm" field.
func (duo *DemolUpdateOne) ClearMainPurpsCdNm() *DemolUpdateOne {
	duo.mutation.ClearMainPurpsCdNm()
	return duo
}

// SetStrctCd sets the "strct_cd" field.
func (duo *DemolUpdateOne) SetStrctCd(s string) *DemolUpdateOne {
	duo.mutation.SetStrctCd(s)
	return duo
}

// SetNillableStrctCd sets the "strct_cd" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableStrctCd(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetStrctCd(*s)
	}
	return duo
}

// ClearStrctCd clears the value of the "strct_cd" field.
func (duo *DemolUpdateOne) ClearStrctCd() *DemolUpdateOne {
	duo.mutation.ClearStrctCd()
	return duo
}

// SetStrctCdNm sets the "strct_cd_nm" field.
func (duo *DemolUpdateOne) SetStrctCdNm(s string) *DemolUpdateOne {
	duo.mutation.SetStrctCdNm(s)
	return duo
}

// SetNillableStrctCdNm sets the "strct_cd_nm" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableStrctCdNm(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetStrctCdNm(*s)
	}
	return duo
}

// ClearStrctCdNm clears the value of the "strct_cd_nm" field.
func (duo *DemolUpdateOne) ClearStrctCdNm() *DemolUpdateOne {
	duo.mutation.ClearStrctCdNm()
	return duo
}

// SetHhldCnt sets the "hhld_cnt" field.
func (duo *DemolUpdateOne) SetHhldCnt(s string) *DemolUpdateOne {
	duo.mutation.SetHhldCnt(s)
	return duo
}

// SetNillableHhldCnt sets the "hhld_cnt" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableHhldCnt(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetHhldCnt(*s)
	}
	return duo
}

// ClearHhldCnt clears the value of the "hhld_cnt" field.
func (duo *DemolUpdateOne) ClearHhldCnt() *DemolUpdateOne {
	duo.mutation.ClearHhldCnt()
	return duo
}

// SetHoCnt sets the "ho_cnt" field.
func (duo *DemolUpdateOne) SetHoCnt(s string) *DemolUpdateOne {
	duo.mutation.SetHoCnt(s)
	return duo
}

// SetNillableHoCnt sets the "ho_cnt" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableHoCnt(s *string) *DemolUpdateOne {
	if s != nil {
		duo.SetHoCnt(*s)
	}
	return duo
}

// ClearHoCnt clears the value of the "ho_cnt" field.
func (duo *DemolUpdateOne) ClearHoCnt() *DemolUpdateOne {
	duo.mutation.ClearHoCnt()
	return duo
}

// SetCrtnDay sets the "crtn_day" field.
func (duo *DemolUpdateOne) SetCrtnDay(s string) *DemolUpdateOne {
	duo.mutation.SetCrtnDay(s)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DemolUpdateOne) SetUpdatedAt(t time.Time) *DemolUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DemolUpdateOne) SetNillableUpdatedAt(t *time.Time) *DemolUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// Mutation returns the DemolMutation object of the builder.
func (duo *DemolUpdateOne) Mutation() *DemolMutation {
	return duo.mutation
}

// Where appends a list predicates to the DemolUpdate builder.
func (duo *DemolUpdateOne) Where(ps ...predicate.Demol) *DemolUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DemolUpdateOne) Select(field string, fields ...string) *DemolUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Demol entity.
func (duo *DemolUpdateOne) Save(ctx context.Context) (*Demol, error) {
	return withHooks[*Demol, DemolMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DemolUpdateOne) SaveX(ctx context.Context) *Demol {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DemolUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DemolUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DemolUpdateOne) check() error {
	if v, ok := duo.mutation.MgmPmsrgstPk(); ok {
		if err := demol.MgmPmsrgstPkValidator(v); err != nil {
			return &ValidationError{Name: "mgm_pmsrgst_pk", err: fmt.Errorf(`ent: validator failed for field "Demol.mgm_pmsrgst_pk": %w`, err)}
		}
	}
	return nil
}

func (duo *DemolUpdateOne) sqlSave(ctx context.Context) (_node *Demol, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(demol.Table, demol.Columns, sqlgraph.NewFieldSpec(demol.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Demol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, demol.FieldID)
		for _, f := range fields {
			if !demol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != demol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.MgmPmsrgstPk(); ok {
		_spec.SetField(demol.FieldMgmPmsrgstPk, field.TypeString, value)
	}
	if value, ok := duo.mutation.BldNm(); ok {
		_spec.SetField(demol.FieldBldNm, field.TypeString, value)
	}
	if duo.mutation.BldNmCleared() {
		_spec.ClearField(demol.FieldBldNm, field.TypeString)
	}
	if value, ok := duo.mutation.DemolExtngGBCd(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCd, field.TypeString, value)
	}
	if duo.mutation.DemolExtngGBCdCleared() {
		_spec.ClearField(demol.FieldDemolExtngGBCd, field.TypeString)
	}
	if value, ok := duo.mutation.DemolExtngGBCdNm(); ok {
		_spec.SetField(demol.FieldDemolExtngGBCdNm, field.TypeString, value)
	}
	if duo.mutation.DemolExtngGBCdNmCleared() {
		_spec.ClearField(demol.FieldDemolExtngGBCdNm, field.TypeString)
	}
	if value, ok := duo.mutation.DemolStrtDay(); ok {
		_spec.SetField(demol.FieldDemolStrtDay, field.TypeString, value)
	}
	if duo.mutation.DemolStrtDayCleared() {
		_spec.ClearField(demol.FieldDemolStrtDay, field.TypeString)
	}
	if value, ok := duo.mutation.DemolEndDay(); ok {
		_spec.SetField(demol.FieldDemolEndDay, field.TypeString, value)
	}
	if duo.mutation.DemolEndDayCleared() {
		_spec.ClearField(demol.FieldDemolEndDay, field.TypeString)
	}
	if value, ok := duo.mutation.DemolExtngDay(); ok {
		_spec.SetField(demol.FieldDemolExtngDay, field.TypeString, value)
	}
	if duo.mutation.DemolExtngDayCleared() {
		_spec.ClearField(demol.FieldDemolExtngDay, field.TypeString)
	}
	if value, ok := duo.mutation.TotArea(); ok {
		_spec.SetField(demol.FieldTotArea, field.TypeUint32, value)
	}
	if value, ok := duo.mutation.AddedTotArea(); ok {
		_spec.AddField(demol.FieldTotArea, field.TypeUint32, value)
	}
	if duo.mutation.TotAreaCleared() {
		_spec.ClearField(demol.FieldTotArea, field.TypeUint32)
	}
	if value, ok := duo.mutation.BldCnt(); ok {
		_spec.SetField(demol.FieldBldCnt, field.TypeUint32, value)
	}
	if value, ok := duo.mutation.AddedBldCnt(); ok {
		_spec.AddField(demol.FieldBldCnt, field.TypeUint32, value)
	}
	if duo.mutation.BldCntCleared() {
		_spec.ClearField(demol.FieldBldCnt, field.TypeUint32)
	}
	if value, ok := duo.mutation.MainPurpsCd(); ok {
		_spec.SetField(demol.FieldMainPurpsCd, field.TypeString, value)
	}
	if duo.mutation.MainPurpsCdCleared() {
		_spec.ClearField(demol.FieldMainPurpsCd, field.TypeString)
	}
	if value, ok := duo.mutation.MainPurpsCdNm(); ok {
		_spec.SetField(demol.FieldMainPurpsCdNm, field.TypeString, value)
	}
	if duo.mutation.MainPurpsCdNmCleared() {
		_spec.ClearField(demol.FieldMainPurpsCdNm, field.TypeString)
	}
	if value, ok := duo.mutation.StrctCd(); ok {
		_spec.SetField(demol.FieldStrctCd, field.TypeString, value)
	}
	if duo.mutation.StrctCdCleared() {
		_spec.ClearField(demol.FieldStrctCd, field.TypeString)
	}
	if value, ok := duo.mutation.StrctCdNm(); ok {
		_spec.SetField(demol.FieldStrctCdNm, field.TypeString, value)
	}
	if duo.mutation.StrctCdNmCleared() {
		_spec.ClearField(demol.FieldStrctCdNm, field.TypeString)
	}
	if value, ok := duo.mutation.HhldCnt(); ok {
		_spec.SetField(demol.FieldHhldCnt, field.TypeString, value)
	}
	if duo.mutation.HhldCntCleared() {
		_spec.ClearField(demol.FieldHhldCnt, field.TypeString)
	}
	if value, ok := duo.mutation.HoCnt(); ok {
		_spec.SetField(demol.FieldHoCnt, field.TypeString, value)
	}
	if duo.mutation.HoCntCleared() {
		_spec.ClearField(demol.FieldHoCnt, field.TypeString)
	}
	if value, ok := duo.mutation.CrtnDay(); ok {
		_spec.SetField(demol.FieldCrtnDay, field.TypeString, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(demol.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Demol{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{demol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
