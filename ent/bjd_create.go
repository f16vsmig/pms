// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/bjd"
	"gopms/ent/jibun"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BjdCreate is the builder for creating a Bjd entity.
type BjdCreate struct {
	config
	mutation *BjdMutation
	hooks    []Hook
}

// SetBjdongCd sets the "bjdong_cd" field.
func (bc *BjdCreate) SetBjdongCd(s string) *BjdCreate {
	bc.mutation.SetBjdongCd(s)
	return bc
}

// SetSigunguCd sets the "sigungu_cd" field.
func (bc *BjdCreate) SetSigunguCd(s string) *BjdCreate {
	bc.mutation.SetSigunguCd(s)
	return bc
}

// SetSidoNm sets the "sido_nm" field.
func (bc *BjdCreate) SetSidoNm(s string) *BjdCreate {
	bc.mutation.SetSidoNm(s)
	return bc
}

// SetSigunguNm sets the "sigungu_nm" field.
func (bc *BjdCreate) SetSigunguNm(s string) *BjdCreate {
	bc.mutation.SetSigunguNm(s)
	return bc
}

// SetDongNm sets the "dong_nm" field.
func (bc *BjdCreate) SetDongNm(s string) *BjdCreate {
	bc.mutation.SetDongNm(s)
	return bc
}

// SetLiNm sets the "li_nm" field.
func (bc *BjdCreate) SetLiNm(s string) *BjdCreate {
	bc.mutation.SetLiNm(s)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BjdCreate) SetCreatedAt(t time.Time) *BjdCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BjdCreate) SetNillableCreatedAt(t *time.Time) *BjdCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BjdCreate) SetUpdatedAt(t time.Time) *BjdCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BjdCreate) SetNillableUpdatedAt(t *time.Time) *BjdCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// AddJibunIDs adds the "jibun" edge to the Jibun entity by IDs.
func (bc *BjdCreate) AddJibunIDs(ids ...int) *BjdCreate {
	bc.mutation.AddJibunIDs(ids...)
	return bc
}

// AddJibun adds the "jibun" edges to the Jibun entity.
func (bc *BjdCreate) AddJibun(j ...*Jibun) *BjdCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return bc.AddJibunIDs(ids...)
}

// Mutation returns the BjdMutation object of the builder.
func (bc *BjdCreate) Mutation() *BjdMutation {
	return bc.mutation
}

// Save creates the Bjd in the database.
func (bc *BjdCreate) Save(ctx context.Context) (*Bjd, error) {
	bc.defaults()
	return withHooks[*Bjd, BjdMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BjdCreate) SaveX(ctx context.Context) *Bjd {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BjdCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BjdCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BjdCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bjd.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bjd.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BjdCreate) check() error {
	if _, ok := bc.mutation.BjdongCd(); !ok {
		return &ValidationError{Name: "bjdong_cd", err: errors.New(`ent: missing required field "Bjd.bjdong_cd"`)}
	}
	if _, ok := bc.mutation.SigunguCd(); !ok {
		return &ValidationError{Name: "sigungu_cd", err: errors.New(`ent: missing required field "Bjd.sigungu_cd"`)}
	}
	if _, ok := bc.mutation.SidoNm(); !ok {
		return &ValidationError{Name: "sido_nm", err: errors.New(`ent: missing required field "Bjd.sido_nm"`)}
	}
	if _, ok := bc.mutation.SigunguNm(); !ok {
		return &ValidationError{Name: "sigungu_nm", err: errors.New(`ent: missing required field "Bjd.sigungu_nm"`)}
	}
	if _, ok := bc.mutation.DongNm(); !ok {
		return &ValidationError{Name: "dong_nm", err: errors.New(`ent: missing required field "Bjd.dong_nm"`)}
	}
	if _, ok := bc.mutation.LiNm(); !ok {
		return &ValidationError{Name: "li_nm", err: errors.New(`ent: missing required field "Bjd.li_nm"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bjd.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bjd.updated_at"`)}
	}
	return nil
}

func (bc *BjdCreate) sqlSave(ctx context.Context) (*Bjd, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BjdCreate) createSpec() (*Bjd, *sqlgraph.CreateSpec) {
	var (
		_node = &Bjd{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bjd.Table, sqlgraph.NewFieldSpec(bjd.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.BjdongCd(); ok {
		_spec.SetField(bjd.FieldBjdongCd, field.TypeString, value)
		_node.BjdongCd = value
	}
	if value, ok := bc.mutation.SigunguCd(); ok {
		_spec.SetField(bjd.FieldSigunguCd, field.TypeString, value)
		_node.SigunguCd = value
	}
	if value, ok := bc.mutation.SidoNm(); ok {
		_spec.SetField(bjd.FieldSidoNm, field.TypeString, value)
		_node.SidoNm = value
	}
	if value, ok := bc.mutation.SigunguNm(); ok {
		_spec.SetField(bjd.FieldSigunguNm, field.TypeString, value)
		_node.SigunguNm = value
	}
	if value, ok := bc.mutation.DongNm(); ok {
		_spec.SetField(bjd.FieldDongNm, field.TypeString, value)
		_node.DongNm = value
	}
	if value, ok := bc.mutation.LiNm(); ok {
		_spec.SetField(bjd.FieldLiNm, field.TypeString, value)
		_node.LiNm = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bjd.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bjd.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.JibunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BjdCreateBulk is the builder for creating many Bjd entities in bulk.
type BjdCreateBulk struct {
	config
	builders []*BjdCreate
}

// Save creates the Bjd entities in the database.
func (bcb *BjdCreateBulk) Save(ctx context.Context) ([]*Bjd, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bjd, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BjdMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BjdCreateBulk) SaveX(ctx context.Context) []*Bjd {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BjdCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BjdCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
