// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/bjd"
	"gopms/ent/demol"
	"gopms/ent/jibun"
	"gopms/ent/perms"
	"gopms/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBjd   = "Bjd"
	TypeDemol = "Demol"
	TypeJibun = "Jibun"
	TypePerms = "Perms"
)

// BjdMutation represents an operation that mutates the Bjd nodes in the graph.
type BjdMutation struct {
	config
	op            Op
	typ           string
	id            *int
	bjdong_cd     *string
	sigungu_cd    *string
	sido_nm       *string
	sigungu_nm    *string
	dong_nm       *string
	li_nm         *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	jibun         map[int]struct{}
	removedjibun  map[int]struct{}
	clearedjibun  bool
	done          bool
	oldValue      func(context.Context) (*Bjd, error)
	predicates    []predicate.Bjd
}

var _ ent.Mutation = (*BjdMutation)(nil)

// bjdOption allows management of the mutation configuration using functional options.
type bjdOption func(*BjdMutation)

// newBjdMutation creates new mutation for the Bjd entity.
func newBjdMutation(c config, op Op, opts ...bjdOption) *BjdMutation {
	m := &BjdMutation{
		config:        c,
		op:            op,
		typ:           TypeBjd,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBjdID sets the ID field of the mutation.
func withBjdID(id int) bjdOption {
	return func(m *BjdMutation) {
		var (
			err   error
			once  sync.Once
			value *Bjd
		)
		m.oldValue = func(ctx context.Context) (*Bjd, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bjd.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBjd sets the old Bjd of the mutation.
func withBjd(node *Bjd) bjdOption {
	return func(m *BjdMutation) {
		m.oldValue = func(context.Context) (*Bjd, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BjdMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BjdMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BjdMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BjdMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bjd.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBjdongCd sets the "bjdong_cd" field.
func (m *BjdMutation) SetBjdongCd(s string) {
	m.bjdong_cd = &s
}

// BjdongCd returns the value of the "bjdong_cd" field in the mutation.
func (m *BjdMutation) BjdongCd() (r string, exists bool) {
	v := m.bjdong_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldBjdongCd returns the old "bjdong_cd" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldBjdongCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBjdongCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBjdongCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBjdongCd: %w", err)
	}
	return oldValue.BjdongCd, nil
}

// ResetBjdongCd resets all changes to the "bjdong_cd" field.
func (m *BjdMutation) ResetBjdongCd() {
	m.bjdong_cd = nil
}

// SetSigunguCd sets the "sigungu_cd" field.
func (m *BjdMutation) SetSigunguCd(s string) {
	m.sigungu_cd = &s
}

// SigunguCd returns the value of the "sigungu_cd" field in the mutation.
func (m *BjdMutation) SigunguCd() (r string, exists bool) {
	v := m.sigungu_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldSigunguCd returns the old "sigungu_cd" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldSigunguCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSigunguCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSigunguCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSigunguCd: %w", err)
	}
	return oldValue.SigunguCd, nil
}

// ResetSigunguCd resets all changes to the "sigungu_cd" field.
func (m *BjdMutation) ResetSigunguCd() {
	m.sigungu_cd = nil
}

// SetSidoNm sets the "sido_nm" field.
func (m *BjdMutation) SetSidoNm(s string) {
	m.sido_nm = &s
}

// SidoNm returns the value of the "sido_nm" field in the mutation.
func (m *BjdMutation) SidoNm() (r string, exists bool) {
	v := m.sido_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldSidoNm returns the old "sido_nm" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldSidoNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSidoNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSidoNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSidoNm: %w", err)
	}
	return oldValue.SidoNm, nil
}

// ResetSidoNm resets all changes to the "sido_nm" field.
func (m *BjdMutation) ResetSidoNm() {
	m.sido_nm = nil
}

// SetSigunguNm sets the "sigungu_nm" field.
func (m *BjdMutation) SetSigunguNm(s string) {
	m.sigungu_nm = &s
}

// SigunguNm returns the value of the "sigungu_nm" field in the mutation.
func (m *BjdMutation) SigunguNm() (r string, exists bool) {
	v := m.sigungu_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldSigunguNm returns the old "sigungu_nm" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldSigunguNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSigunguNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSigunguNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSigunguNm: %w", err)
	}
	return oldValue.SigunguNm, nil
}

// ResetSigunguNm resets all changes to the "sigungu_nm" field.
func (m *BjdMutation) ResetSigunguNm() {
	m.sigungu_nm = nil
}

// SetDongNm sets the "dong_nm" field.
func (m *BjdMutation) SetDongNm(s string) {
	m.dong_nm = &s
}

// DongNm returns the value of the "dong_nm" field in the mutation.
func (m *BjdMutation) DongNm() (r string, exists bool) {
	v := m.dong_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldDongNm returns the old "dong_nm" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldDongNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDongNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDongNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDongNm: %w", err)
	}
	return oldValue.DongNm, nil
}

// ResetDongNm resets all changes to the "dong_nm" field.
func (m *BjdMutation) ResetDongNm() {
	m.dong_nm = nil
}

// SetLiNm sets the "li_nm" field.
func (m *BjdMutation) SetLiNm(s string) {
	m.li_nm = &s
}

// LiNm returns the value of the "li_nm" field in the mutation.
func (m *BjdMutation) LiNm() (r string, exists bool) {
	v := m.li_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldLiNm returns the old "li_nm" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldLiNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiNm: %w", err)
	}
	return oldValue.LiNm, nil
}

// ResetLiNm resets all changes to the "li_nm" field.
func (m *BjdMutation) ResetLiNm() {
	m.li_nm = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BjdMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BjdMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BjdMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BjdMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BjdMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bjd entity.
// If the Bjd object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BjdMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BjdMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddJibunIDs adds the "jibun" edge to the Jibun entity by ids.
func (m *BjdMutation) AddJibunIDs(ids ...int) {
	if m.jibun == nil {
		m.jibun = make(map[int]struct{})
	}
	for i := range ids {
		m.jibun[ids[i]] = struct{}{}
	}
}

// ClearJibun clears the "jibun" edge to the Jibun entity.
func (m *BjdMutation) ClearJibun() {
	m.clearedjibun = true
}

// JibunCleared reports if the "jibun" edge to the Jibun entity was cleared.
func (m *BjdMutation) JibunCleared() bool {
	return m.clearedjibun
}

// RemoveJibunIDs removes the "jibun" edge to the Jibun entity by IDs.
func (m *BjdMutation) RemoveJibunIDs(ids ...int) {
	if m.removedjibun == nil {
		m.removedjibun = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.jibun, ids[i])
		m.removedjibun[ids[i]] = struct{}{}
	}
}

// RemovedJibun returns the removed IDs of the "jibun" edge to the Jibun entity.
func (m *BjdMutation) RemovedJibunIDs() (ids []int) {
	for id := range m.removedjibun {
		ids = append(ids, id)
	}
	return
}

// JibunIDs returns the "jibun" edge IDs in the mutation.
func (m *BjdMutation) JibunIDs() (ids []int) {
	for id := range m.jibun {
		ids = append(ids, id)
	}
	return
}

// ResetJibun resets all changes to the "jibun" edge.
func (m *BjdMutation) ResetJibun() {
	m.jibun = nil
	m.clearedjibun = false
	m.removedjibun = nil
}

// Where appends a list predicates to the BjdMutation builder.
func (m *BjdMutation) Where(ps ...predicate.Bjd) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BjdMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BjdMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bjd, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BjdMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BjdMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bjd).
func (m *BjdMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BjdMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.bjdong_cd != nil {
		fields = append(fields, bjd.FieldBjdongCd)
	}
	if m.sigungu_cd != nil {
		fields = append(fields, bjd.FieldSigunguCd)
	}
	if m.sido_nm != nil {
		fields = append(fields, bjd.FieldSidoNm)
	}
	if m.sigungu_nm != nil {
		fields = append(fields, bjd.FieldSigunguNm)
	}
	if m.dong_nm != nil {
		fields = append(fields, bjd.FieldDongNm)
	}
	if m.li_nm != nil {
		fields = append(fields, bjd.FieldLiNm)
	}
	if m.created_at != nil {
		fields = append(fields, bjd.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bjd.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BjdMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bjd.FieldBjdongCd:
		return m.BjdongCd()
	case bjd.FieldSigunguCd:
		return m.SigunguCd()
	case bjd.FieldSidoNm:
		return m.SidoNm()
	case bjd.FieldSigunguNm:
		return m.SigunguNm()
	case bjd.FieldDongNm:
		return m.DongNm()
	case bjd.FieldLiNm:
		return m.LiNm()
	case bjd.FieldCreatedAt:
		return m.CreatedAt()
	case bjd.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BjdMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bjd.FieldBjdongCd:
		return m.OldBjdongCd(ctx)
	case bjd.FieldSigunguCd:
		return m.OldSigunguCd(ctx)
	case bjd.FieldSidoNm:
		return m.OldSidoNm(ctx)
	case bjd.FieldSigunguNm:
		return m.OldSigunguNm(ctx)
	case bjd.FieldDongNm:
		return m.OldDongNm(ctx)
	case bjd.FieldLiNm:
		return m.OldLiNm(ctx)
	case bjd.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bjd.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bjd field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BjdMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bjd.FieldBjdongCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBjdongCd(v)
		return nil
	case bjd.FieldSigunguCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSigunguCd(v)
		return nil
	case bjd.FieldSidoNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSidoNm(v)
		return nil
	case bjd.FieldSigunguNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSigunguNm(v)
		return nil
	case bjd.FieldDongNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDongNm(v)
		return nil
	case bjd.FieldLiNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiNm(v)
		return nil
	case bjd.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bjd.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bjd field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BjdMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BjdMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BjdMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bjd numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BjdMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BjdMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BjdMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bjd nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BjdMutation) ResetField(name string) error {
	switch name {
	case bjd.FieldBjdongCd:
		m.ResetBjdongCd()
		return nil
	case bjd.FieldSigunguCd:
		m.ResetSigunguCd()
		return nil
	case bjd.FieldSidoNm:
		m.ResetSidoNm()
		return nil
	case bjd.FieldSigunguNm:
		m.ResetSigunguNm()
		return nil
	case bjd.FieldDongNm:
		m.ResetDongNm()
		return nil
	case bjd.FieldLiNm:
		m.ResetLiNm()
		return nil
	case bjd.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bjd.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Bjd field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BjdMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.jibun != nil {
		edges = append(edges, bjd.EdgeJibun)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BjdMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bjd.EdgeJibun:
		ids := make([]ent.Value, 0, len(m.jibun))
		for id := range m.jibun {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BjdMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedjibun != nil {
		edges = append(edges, bjd.EdgeJibun)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BjdMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bjd.EdgeJibun:
		ids := make([]ent.Value, 0, len(m.removedjibun))
		for id := range m.removedjibun {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BjdMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedjibun {
		edges = append(edges, bjd.EdgeJibun)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BjdMutation) EdgeCleared(name string) bool {
	switch name {
	case bjd.EdgeJibun:
		return m.clearedjibun
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BjdMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bjd unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BjdMutation) ResetEdge(name string) error {
	switch name {
	case bjd.EdgeJibun:
		m.ResetJibun()
		return nil
	}
	return fmt.Errorf("unknown Bjd edge %s", name)
}

// DemolMutation represents an operation that mutates the Demol nodes in the graph.
type DemolMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	mgm_pmsrgst_pk       *string
	bld_nm               *string
	demol_extng_gb_cd    *string
	demol_extng_gb_cd_nm *string
	demol_strt_day       *string
	demol_end_day        *string
	demol_extng_day      *string
	tot_area             *uint32
	addtot_area          *int32
	bld_cnt              *uint32
	addbld_cnt           *int32
	main_purps_cd        *string
	main_purps_cd_nm     *string
	strct_cd             *string
	strct_cd_nm          *string
	hhld_cnt             *string
	ho_cnt               *string
	crtn_day             *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Demol, error)
	predicates           []predicate.Demol
}

var _ ent.Mutation = (*DemolMutation)(nil)

// demolOption allows management of the mutation configuration using functional options.
type demolOption func(*DemolMutation)

// newDemolMutation creates new mutation for the Demol entity.
func newDemolMutation(c config, op Op, opts ...demolOption) *DemolMutation {
	m := &DemolMutation{
		config:        c,
		op:            op,
		typ:           TypeDemol,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDemolID sets the ID field of the mutation.
func withDemolID(id int) demolOption {
	return func(m *DemolMutation) {
		var (
			err   error
			once  sync.Once
			value *Demol
		)
		m.oldValue = func(ctx context.Context) (*Demol, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Demol.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDemol sets the old Demol of the mutation.
func withDemol(node *Demol) demolOption {
	return func(m *DemolMutation) {
		m.oldValue = func(context.Context) (*Demol, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DemolMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DemolMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DemolMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DemolMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Demol.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (m *DemolMutation) SetMgmPmsrgstPk(s string) {
	m.mgm_pmsrgst_pk = &s
}

// MgmPmsrgstPk returns the value of the "mgm_pmsrgst_pk" field in the mutation.
func (m *DemolMutation) MgmPmsrgstPk() (r string, exists bool) {
	v := m.mgm_pmsrgst_pk
	if v == nil {
		return
	}
	return *v, true
}

// OldMgmPmsrgstPk returns the old "mgm_pmsrgst_pk" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldMgmPmsrgstPk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMgmPmsrgstPk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMgmPmsrgstPk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMgmPmsrgstPk: %w", err)
	}
	return oldValue.MgmPmsrgstPk, nil
}

// ResetMgmPmsrgstPk resets all changes to the "mgm_pmsrgst_pk" field.
func (m *DemolMutation) ResetMgmPmsrgstPk() {
	m.mgm_pmsrgst_pk = nil
}

// SetBldNm sets the "bld_nm" field.
func (m *DemolMutation) SetBldNm(s string) {
	m.bld_nm = &s
}

// BldNm returns the value of the "bld_nm" field in the mutation.
func (m *DemolMutation) BldNm() (r string, exists bool) {
	v := m.bld_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldBldNm returns the old "bld_nm" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldBldNm(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBldNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBldNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBldNm: %w", err)
	}
	return oldValue.BldNm, nil
}

// ClearBldNm clears the value of the "bld_nm" field.
func (m *DemolMutation) ClearBldNm() {
	m.bld_nm = nil
	m.clearedFields[demol.FieldBldNm] = struct{}{}
}

// BldNmCleared returns if the "bld_nm" field was cleared in this mutation.
func (m *DemolMutation) BldNmCleared() bool {
	_, ok := m.clearedFields[demol.FieldBldNm]
	return ok
}

// ResetBldNm resets all changes to the "bld_nm" field.
func (m *DemolMutation) ResetBldNm() {
	m.bld_nm = nil
	delete(m.clearedFields, demol.FieldBldNm)
}

// SetDemolExtngGBCd sets the "demol_extng_gb_cd" field.
func (m *DemolMutation) SetDemolExtngGBCd(s string) {
	m.demol_extng_gb_cd = &s
}

// DemolExtngGBCd returns the value of the "demol_extng_gb_cd" field in the mutation.
func (m *DemolMutation) DemolExtngGBCd() (r string, exists bool) {
	v := m.demol_extng_gb_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldDemolExtngGBCd returns the old "demol_extng_gb_cd" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldDemolExtngGBCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDemolExtngGBCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDemolExtngGBCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDemolExtngGBCd: %w", err)
	}
	return oldValue.DemolExtngGBCd, nil
}

// ClearDemolExtngGBCd clears the value of the "demol_extng_gb_cd" field.
func (m *DemolMutation) ClearDemolExtngGBCd() {
	m.demol_extng_gb_cd = nil
	m.clearedFields[demol.FieldDemolExtngGBCd] = struct{}{}
}

// DemolExtngGBCdCleared returns if the "demol_extng_gb_cd" field was cleared in this mutation.
func (m *DemolMutation) DemolExtngGBCdCleared() bool {
	_, ok := m.clearedFields[demol.FieldDemolExtngGBCd]
	return ok
}

// ResetDemolExtngGBCd resets all changes to the "demol_extng_gb_cd" field.
func (m *DemolMutation) ResetDemolExtngGBCd() {
	m.demol_extng_gb_cd = nil
	delete(m.clearedFields, demol.FieldDemolExtngGBCd)
}

// SetDemolExtngGBCdNm sets the "demol_extng_gb_cd_nm" field.
func (m *DemolMutation) SetDemolExtngGBCdNm(s string) {
	m.demol_extng_gb_cd_nm = &s
}

// DemolExtngGBCdNm returns the value of the "demol_extng_gb_cd_nm" field in the mutation.
func (m *DemolMutation) DemolExtngGBCdNm() (r string, exists bool) {
	v := m.demol_extng_gb_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldDemolExtngGBCdNm returns the old "demol_extng_gb_cd_nm" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldDemolExtngGBCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDemolExtngGBCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDemolExtngGBCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDemolExtngGBCdNm: %w", err)
	}
	return oldValue.DemolExtngGBCdNm, nil
}

// ClearDemolExtngGBCdNm clears the value of the "demol_extng_gb_cd_nm" field.
func (m *DemolMutation) ClearDemolExtngGBCdNm() {
	m.demol_extng_gb_cd_nm = nil
	m.clearedFields[demol.FieldDemolExtngGBCdNm] = struct{}{}
}

// DemolExtngGBCdNmCleared returns if the "demol_extng_gb_cd_nm" field was cleared in this mutation.
func (m *DemolMutation) DemolExtngGBCdNmCleared() bool {
	_, ok := m.clearedFields[demol.FieldDemolExtngGBCdNm]
	return ok
}

// ResetDemolExtngGBCdNm resets all changes to the "demol_extng_gb_cd_nm" field.
func (m *DemolMutation) ResetDemolExtngGBCdNm() {
	m.demol_extng_gb_cd_nm = nil
	delete(m.clearedFields, demol.FieldDemolExtngGBCdNm)
}

// SetDemolStrtDay sets the "demol_strt_day" field.
func (m *DemolMutation) SetDemolStrtDay(s string) {
	m.demol_strt_day = &s
}

// DemolStrtDay returns the value of the "demol_strt_day" field in the mutation.
func (m *DemolMutation) DemolStrtDay() (r string, exists bool) {
	v := m.demol_strt_day
	if v == nil {
		return
	}
	return *v, true
}

// OldDemolStrtDay returns the old "demol_strt_day" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldDemolStrtDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDemolStrtDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDemolStrtDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDemolStrtDay: %w", err)
	}
	return oldValue.DemolStrtDay, nil
}

// ClearDemolStrtDay clears the value of the "demol_strt_day" field.
func (m *DemolMutation) ClearDemolStrtDay() {
	m.demol_strt_day = nil
	m.clearedFields[demol.FieldDemolStrtDay] = struct{}{}
}

// DemolStrtDayCleared returns if the "demol_strt_day" field was cleared in this mutation.
func (m *DemolMutation) DemolStrtDayCleared() bool {
	_, ok := m.clearedFields[demol.FieldDemolStrtDay]
	return ok
}

// ResetDemolStrtDay resets all changes to the "demol_strt_day" field.
func (m *DemolMutation) ResetDemolStrtDay() {
	m.demol_strt_day = nil
	delete(m.clearedFields, demol.FieldDemolStrtDay)
}

// SetDemolEndDay sets the "demol_end_day" field.
func (m *DemolMutation) SetDemolEndDay(s string) {
	m.demol_end_day = &s
}

// DemolEndDay returns the value of the "demol_end_day" field in the mutation.
func (m *DemolMutation) DemolEndDay() (r string, exists bool) {
	v := m.demol_end_day
	if v == nil {
		return
	}
	return *v, true
}

// OldDemolEndDay returns the old "demol_end_day" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldDemolEndDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDemolEndDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDemolEndDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDemolEndDay: %w", err)
	}
	return oldValue.DemolEndDay, nil
}

// ClearDemolEndDay clears the value of the "demol_end_day" field.
func (m *DemolMutation) ClearDemolEndDay() {
	m.demol_end_day = nil
	m.clearedFields[demol.FieldDemolEndDay] = struct{}{}
}

// DemolEndDayCleared returns if the "demol_end_day" field was cleared in this mutation.
func (m *DemolMutation) DemolEndDayCleared() bool {
	_, ok := m.clearedFields[demol.FieldDemolEndDay]
	return ok
}

// ResetDemolEndDay resets all changes to the "demol_end_day" field.
func (m *DemolMutation) ResetDemolEndDay() {
	m.demol_end_day = nil
	delete(m.clearedFields, demol.FieldDemolEndDay)
}

// SetDemolExtngDay sets the "demol_extng_day" field.
func (m *DemolMutation) SetDemolExtngDay(s string) {
	m.demol_extng_day = &s
}

// DemolExtngDay returns the value of the "demol_extng_day" field in the mutation.
func (m *DemolMutation) DemolExtngDay() (r string, exists bool) {
	v := m.demol_extng_day
	if v == nil {
		return
	}
	return *v, true
}

// OldDemolExtngDay returns the old "demol_extng_day" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldDemolExtngDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDemolExtngDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDemolExtngDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDemolExtngDay: %w", err)
	}
	return oldValue.DemolExtngDay, nil
}

// ClearDemolExtngDay clears the value of the "demol_extng_day" field.
func (m *DemolMutation) ClearDemolExtngDay() {
	m.demol_extng_day = nil
	m.clearedFields[demol.FieldDemolExtngDay] = struct{}{}
}

// DemolExtngDayCleared returns if the "demol_extng_day" field was cleared in this mutation.
func (m *DemolMutation) DemolExtngDayCleared() bool {
	_, ok := m.clearedFields[demol.FieldDemolExtngDay]
	return ok
}

// ResetDemolExtngDay resets all changes to the "demol_extng_day" field.
func (m *DemolMutation) ResetDemolExtngDay() {
	m.demol_extng_day = nil
	delete(m.clearedFields, demol.FieldDemolExtngDay)
}

// SetTotArea sets the "tot_area" field.
func (m *DemolMutation) SetTotArea(u uint32) {
	m.tot_area = &u
	m.addtot_area = nil
}

// TotArea returns the value of the "tot_area" field in the mutation.
func (m *DemolMutation) TotArea() (r uint32, exists bool) {
	v := m.tot_area
	if v == nil {
		return
	}
	return *v, true
}

// OldTotArea returns the old "tot_area" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldTotArea(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotArea: %w", err)
	}
	return oldValue.TotArea, nil
}

// AddTotArea adds u to the "tot_area" field.
func (m *DemolMutation) AddTotArea(u int32) {
	if m.addtot_area != nil {
		*m.addtot_area += u
	} else {
		m.addtot_area = &u
	}
}

// AddedTotArea returns the value that was added to the "tot_area" field in this mutation.
func (m *DemolMutation) AddedTotArea() (r int32, exists bool) {
	v := m.addtot_area
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotArea clears the value of the "tot_area" field.
func (m *DemolMutation) ClearTotArea() {
	m.tot_area = nil
	m.addtot_area = nil
	m.clearedFields[demol.FieldTotArea] = struct{}{}
}

// TotAreaCleared returns if the "tot_area" field was cleared in this mutation.
func (m *DemolMutation) TotAreaCleared() bool {
	_, ok := m.clearedFields[demol.FieldTotArea]
	return ok
}

// ResetTotArea resets all changes to the "tot_area" field.
func (m *DemolMutation) ResetTotArea() {
	m.tot_area = nil
	m.addtot_area = nil
	delete(m.clearedFields, demol.FieldTotArea)
}

// SetBldCnt sets the "bld_cnt" field.
func (m *DemolMutation) SetBldCnt(u uint32) {
	m.bld_cnt = &u
	m.addbld_cnt = nil
}

// BldCnt returns the value of the "bld_cnt" field in the mutation.
func (m *DemolMutation) BldCnt() (r uint32, exists bool) {
	v := m.bld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldBldCnt returns the old "bld_cnt" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldBldCnt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBldCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBldCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBldCnt: %w", err)
	}
	return oldValue.BldCnt, nil
}

// AddBldCnt adds u to the "bld_cnt" field.
func (m *DemolMutation) AddBldCnt(u int32) {
	if m.addbld_cnt != nil {
		*m.addbld_cnt += u
	} else {
		m.addbld_cnt = &u
	}
}

// AddedBldCnt returns the value that was added to the "bld_cnt" field in this mutation.
func (m *DemolMutation) AddedBldCnt() (r int32, exists bool) {
	v := m.addbld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearBldCnt clears the value of the "bld_cnt" field.
func (m *DemolMutation) ClearBldCnt() {
	m.bld_cnt = nil
	m.addbld_cnt = nil
	m.clearedFields[demol.FieldBldCnt] = struct{}{}
}

// BldCntCleared returns if the "bld_cnt" field was cleared in this mutation.
func (m *DemolMutation) BldCntCleared() bool {
	_, ok := m.clearedFields[demol.FieldBldCnt]
	return ok
}

// ResetBldCnt resets all changes to the "bld_cnt" field.
func (m *DemolMutation) ResetBldCnt() {
	m.bld_cnt = nil
	m.addbld_cnt = nil
	delete(m.clearedFields, demol.FieldBldCnt)
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (m *DemolMutation) SetMainPurpsCd(s string) {
	m.main_purps_cd = &s
}

// MainPurpsCd returns the value of the "main_purps_cd" field in the mutation.
func (m *DemolMutation) MainPurpsCd() (r string, exists bool) {
	v := m.main_purps_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldMainPurpsCd returns the old "main_purps_cd" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldMainPurpsCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainPurpsCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainPurpsCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainPurpsCd: %w", err)
	}
	return oldValue.MainPurpsCd, nil
}

// ClearMainPurpsCd clears the value of the "main_purps_cd" field.
func (m *DemolMutation) ClearMainPurpsCd() {
	m.main_purps_cd = nil
	m.clearedFields[demol.FieldMainPurpsCd] = struct{}{}
}

// MainPurpsCdCleared returns if the "main_purps_cd" field was cleared in this mutation.
func (m *DemolMutation) MainPurpsCdCleared() bool {
	_, ok := m.clearedFields[demol.FieldMainPurpsCd]
	return ok
}

// ResetMainPurpsCd resets all changes to the "main_purps_cd" field.
func (m *DemolMutation) ResetMainPurpsCd() {
	m.main_purps_cd = nil
	delete(m.clearedFields, demol.FieldMainPurpsCd)
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (m *DemolMutation) SetMainPurpsCdNm(s string) {
	m.main_purps_cd_nm = &s
}

// MainPurpsCdNm returns the value of the "main_purps_cd_nm" field in the mutation.
func (m *DemolMutation) MainPurpsCdNm() (r string, exists bool) {
	v := m.main_purps_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldMainPurpsCdNm returns the old "main_purps_cd_nm" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldMainPurpsCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainPurpsCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainPurpsCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainPurpsCdNm: %w", err)
	}
	return oldValue.MainPurpsCdNm, nil
}

// ClearMainPurpsCdNm clears the value of the "main_purps_cd_nm" field.
func (m *DemolMutation) ClearMainPurpsCdNm() {
	m.main_purps_cd_nm = nil
	m.clearedFields[demol.FieldMainPurpsCdNm] = struct{}{}
}

// MainPurpsCdNmCleared returns if the "main_purps_cd_nm" field was cleared in this mutation.
func (m *DemolMutation) MainPurpsCdNmCleared() bool {
	_, ok := m.clearedFields[demol.FieldMainPurpsCdNm]
	return ok
}

// ResetMainPurpsCdNm resets all changes to the "main_purps_cd_nm" field.
func (m *DemolMutation) ResetMainPurpsCdNm() {
	m.main_purps_cd_nm = nil
	delete(m.clearedFields, demol.FieldMainPurpsCdNm)
}

// SetStrctCd sets the "strct_cd" field.
func (m *DemolMutation) SetStrctCd(s string) {
	m.strct_cd = &s
}

// StrctCd returns the value of the "strct_cd" field in the mutation.
func (m *DemolMutation) StrctCd() (r string, exists bool) {
	v := m.strct_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldStrctCd returns the old "strct_cd" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldStrctCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrctCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrctCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrctCd: %w", err)
	}
	return oldValue.StrctCd, nil
}

// ClearStrctCd clears the value of the "strct_cd" field.
func (m *DemolMutation) ClearStrctCd() {
	m.strct_cd = nil
	m.clearedFields[demol.FieldStrctCd] = struct{}{}
}

// StrctCdCleared returns if the "strct_cd" field was cleared in this mutation.
func (m *DemolMutation) StrctCdCleared() bool {
	_, ok := m.clearedFields[demol.FieldStrctCd]
	return ok
}

// ResetStrctCd resets all changes to the "strct_cd" field.
func (m *DemolMutation) ResetStrctCd() {
	m.strct_cd = nil
	delete(m.clearedFields, demol.FieldStrctCd)
}

// SetStrctCdNm sets the "strct_cd_nm" field.
func (m *DemolMutation) SetStrctCdNm(s string) {
	m.strct_cd_nm = &s
}

// StrctCdNm returns the value of the "strct_cd_nm" field in the mutation.
func (m *DemolMutation) StrctCdNm() (r string, exists bool) {
	v := m.strct_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldStrctCdNm returns the old "strct_cd_nm" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldStrctCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrctCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrctCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrctCdNm: %w", err)
	}
	return oldValue.StrctCdNm, nil
}

// ClearStrctCdNm clears the value of the "strct_cd_nm" field.
func (m *DemolMutation) ClearStrctCdNm() {
	m.strct_cd_nm = nil
	m.clearedFields[demol.FieldStrctCdNm] = struct{}{}
}

// StrctCdNmCleared returns if the "strct_cd_nm" field was cleared in this mutation.
func (m *DemolMutation) StrctCdNmCleared() bool {
	_, ok := m.clearedFields[demol.FieldStrctCdNm]
	return ok
}

// ResetStrctCdNm resets all changes to the "strct_cd_nm" field.
func (m *DemolMutation) ResetStrctCdNm() {
	m.strct_cd_nm = nil
	delete(m.clearedFields, demol.FieldStrctCdNm)
}

// SetHhldCnt sets the "hhld_cnt" field.
func (m *DemolMutation) SetHhldCnt(s string) {
	m.hhld_cnt = &s
}

// HhldCnt returns the value of the "hhld_cnt" field in the mutation.
func (m *DemolMutation) HhldCnt() (r string, exists bool) {
	v := m.hhld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldHhldCnt returns the old "hhld_cnt" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldHhldCnt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHhldCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHhldCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHhldCnt: %w", err)
	}
	return oldValue.HhldCnt, nil
}

// ClearHhldCnt clears the value of the "hhld_cnt" field.
func (m *DemolMutation) ClearHhldCnt() {
	m.hhld_cnt = nil
	m.clearedFields[demol.FieldHhldCnt] = struct{}{}
}

// HhldCntCleared returns if the "hhld_cnt" field was cleared in this mutation.
func (m *DemolMutation) HhldCntCleared() bool {
	_, ok := m.clearedFields[demol.FieldHhldCnt]
	return ok
}

// ResetHhldCnt resets all changes to the "hhld_cnt" field.
func (m *DemolMutation) ResetHhldCnt() {
	m.hhld_cnt = nil
	delete(m.clearedFields, demol.FieldHhldCnt)
}

// SetHoCnt sets the "ho_cnt" field.
func (m *DemolMutation) SetHoCnt(s string) {
	m.ho_cnt = &s
}

// HoCnt returns the value of the "ho_cnt" field in the mutation.
func (m *DemolMutation) HoCnt() (r string, exists bool) {
	v := m.ho_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldHoCnt returns the old "ho_cnt" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldHoCnt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHoCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHoCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHoCnt: %w", err)
	}
	return oldValue.HoCnt, nil
}

// ClearHoCnt clears the value of the "ho_cnt" field.
func (m *DemolMutation) ClearHoCnt() {
	m.ho_cnt = nil
	m.clearedFields[demol.FieldHoCnt] = struct{}{}
}

// HoCntCleared returns if the "ho_cnt" field was cleared in this mutation.
func (m *DemolMutation) HoCntCleared() bool {
	_, ok := m.clearedFields[demol.FieldHoCnt]
	return ok
}

// ResetHoCnt resets all changes to the "ho_cnt" field.
func (m *DemolMutation) ResetHoCnt() {
	m.ho_cnt = nil
	delete(m.clearedFields, demol.FieldHoCnt)
}

// SetCrtnDay sets the "crtn_day" field.
func (m *DemolMutation) SetCrtnDay(s string) {
	m.crtn_day = &s
}

// CrtnDay returns the value of the "crtn_day" field in the mutation.
func (m *DemolMutation) CrtnDay() (r string, exists bool) {
	v := m.crtn_day
	if v == nil {
		return
	}
	return *v, true
}

// OldCrtnDay returns the old "crtn_day" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldCrtnDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrtnDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrtnDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrtnDay: %w", err)
	}
	return oldValue.CrtnDay, nil
}

// ResetCrtnDay resets all changes to the "crtn_day" field.
func (m *DemolMutation) ResetCrtnDay() {
	m.crtn_day = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DemolMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DemolMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DemolMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DemolMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DemolMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Demol entity.
// If the Demol object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DemolMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DemolMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the DemolMutation builder.
func (m *DemolMutation) Where(ps ...predicate.Demol) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DemolMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DemolMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Demol, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DemolMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DemolMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Demol).
func (m *DemolMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DemolMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.mgm_pmsrgst_pk != nil {
		fields = append(fields, demol.FieldMgmPmsrgstPk)
	}
	if m.bld_nm != nil {
		fields = append(fields, demol.FieldBldNm)
	}
	if m.demol_extng_gb_cd != nil {
		fields = append(fields, demol.FieldDemolExtngGBCd)
	}
	if m.demol_extng_gb_cd_nm != nil {
		fields = append(fields, demol.FieldDemolExtngGBCdNm)
	}
	if m.demol_strt_day != nil {
		fields = append(fields, demol.FieldDemolStrtDay)
	}
	if m.demol_end_day != nil {
		fields = append(fields, demol.FieldDemolEndDay)
	}
	if m.demol_extng_day != nil {
		fields = append(fields, demol.FieldDemolExtngDay)
	}
	if m.tot_area != nil {
		fields = append(fields, demol.FieldTotArea)
	}
	if m.bld_cnt != nil {
		fields = append(fields, demol.FieldBldCnt)
	}
	if m.main_purps_cd != nil {
		fields = append(fields, demol.FieldMainPurpsCd)
	}
	if m.main_purps_cd_nm != nil {
		fields = append(fields, demol.FieldMainPurpsCdNm)
	}
	if m.strct_cd != nil {
		fields = append(fields, demol.FieldStrctCd)
	}
	if m.strct_cd_nm != nil {
		fields = append(fields, demol.FieldStrctCdNm)
	}
	if m.hhld_cnt != nil {
		fields = append(fields, demol.FieldHhldCnt)
	}
	if m.ho_cnt != nil {
		fields = append(fields, demol.FieldHoCnt)
	}
	if m.crtn_day != nil {
		fields = append(fields, demol.FieldCrtnDay)
	}
	if m.created_at != nil {
		fields = append(fields, demol.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, demol.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DemolMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case demol.FieldMgmPmsrgstPk:
		return m.MgmPmsrgstPk()
	case demol.FieldBldNm:
		return m.BldNm()
	case demol.FieldDemolExtngGBCd:
		return m.DemolExtngGBCd()
	case demol.FieldDemolExtngGBCdNm:
		return m.DemolExtngGBCdNm()
	case demol.FieldDemolStrtDay:
		return m.DemolStrtDay()
	case demol.FieldDemolEndDay:
		return m.DemolEndDay()
	case demol.FieldDemolExtngDay:
		return m.DemolExtngDay()
	case demol.FieldTotArea:
		return m.TotArea()
	case demol.FieldBldCnt:
		return m.BldCnt()
	case demol.FieldMainPurpsCd:
		return m.MainPurpsCd()
	case demol.FieldMainPurpsCdNm:
		return m.MainPurpsCdNm()
	case demol.FieldStrctCd:
		return m.StrctCd()
	case demol.FieldStrctCdNm:
		return m.StrctCdNm()
	case demol.FieldHhldCnt:
		return m.HhldCnt()
	case demol.FieldHoCnt:
		return m.HoCnt()
	case demol.FieldCrtnDay:
		return m.CrtnDay()
	case demol.FieldCreatedAt:
		return m.CreatedAt()
	case demol.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DemolMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case demol.FieldMgmPmsrgstPk:
		return m.OldMgmPmsrgstPk(ctx)
	case demol.FieldBldNm:
		return m.OldBldNm(ctx)
	case demol.FieldDemolExtngGBCd:
		return m.OldDemolExtngGBCd(ctx)
	case demol.FieldDemolExtngGBCdNm:
		return m.OldDemolExtngGBCdNm(ctx)
	case demol.FieldDemolStrtDay:
		return m.OldDemolStrtDay(ctx)
	case demol.FieldDemolEndDay:
		return m.OldDemolEndDay(ctx)
	case demol.FieldDemolExtngDay:
		return m.OldDemolExtngDay(ctx)
	case demol.FieldTotArea:
		return m.OldTotArea(ctx)
	case demol.FieldBldCnt:
		return m.OldBldCnt(ctx)
	case demol.FieldMainPurpsCd:
		return m.OldMainPurpsCd(ctx)
	case demol.FieldMainPurpsCdNm:
		return m.OldMainPurpsCdNm(ctx)
	case demol.FieldStrctCd:
		return m.OldStrctCd(ctx)
	case demol.FieldStrctCdNm:
		return m.OldStrctCdNm(ctx)
	case demol.FieldHhldCnt:
		return m.OldHhldCnt(ctx)
	case demol.FieldHoCnt:
		return m.OldHoCnt(ctx)
	case demol.FieldCrtnDay:
		return m.OldCrtnDay(ctx)
	case demol.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case demol.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Demol field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DemolMutation) SetField(name string, value ent.Value) error {
	switch name {
	case demol.FieldMgmPmsrgstPk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMgmPmsrgstPk(v)
		return nil
	case demol.FieldBldNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBldNm(v)
		return nil
	case demol.FieldDemolExtngGBCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDemolExtngGBCd(v)
		return nil
	case demol.FieldDemolExtngGBCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDemolExtngGBCdNm(v)
		return nil
	case demol.FieldDemolStrtDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDemolStrtDay(v)
		return nil
	case demol.FieldDemolEndDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDemolEndDay(v)
		return nil
	case demol.FieldDemolExtngDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDemolExtngDay(v)
		return nil
	case demol.FieldTotArea:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotArea(v)
		return nil
	case demol.FieldBldCnt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBldCnt(v)
		return nil
	case demol.FieldMainPurpsCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainPurpsCd(v)
		return nil
	case demol.FieldMainPurpsCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainPurpsCdNm(v)
		return nil
	case demol.FieldStrctCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrctCd(v)
		return nil
	case demol.FieldStrctCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrctCdNm(v)
		return nil
	case demol.FieldHhldCnt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHhldCnt(v)
		return nil
	case demol.FieldHoCnt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHoCnt(v)
		return nil
	case demol.FieldCrtnDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrtnDay(v)
		return nil
	case demol.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case demol.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Demol field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DemolMutation) AddedFields() []string {
	var fields []string
	if m.addtot_area != nil {
		fields = append(fields, demol.FieldTotArea)
	}
	if m.addbld_cnt != nil {
		fields = append(fields, demol.FieldBldCnt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DemolMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case demol.FieldTotArea:
		return m.AddedTotArea()
	case demol.FieldBldCnt:
		return m.AddedBldCnt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DemolMutation) AddField(name string, value ent.Value) error {
	switch name {
	case demol.FieldTotArea:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotArea(v)
		return nil
	case demol.FieldBldCnt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBldCnt(v)
		return nil
	}
	return fmt.Errorf("unknown Demol numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DemolMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(demol.FieldBldNm) {
		fields = append(fields, demol.FieldBldNm)
	}
	if m.FieldCleared(demol.FieldDemolExtngGBCd) {
		fields = append(fields, demol.FieldDemolExtngGBCd)
	}
	if m.FieldCleared(demol.FieldDemolExtngGBCdNm) {
		fields = append(fields, demol.FieldDemolExtngGBCdNm)
	}
	if m.FieldCleared(demol.FieldDemolStrtDay) {
		fields = append(fields, demol.FieldDemolStrtDay)
	}
	if m.FieldCleared(demol.FieldDemolEndDay) {
		fields = append(fields, demol.FieldDemolEndDay)
	}
	if m.FieldCleared(demol.FieldDemolExtngDay) {
		fields = append(fields, demol.FieldDemolExtngDay)
	}
	if m.FieldCleared(demol.FieldTotArea) {
		fields = append(fields, demol.FieldTotArea)
	}
	if m.FieldCleared(demol.FieldBldCnt) {
		fields = append(fields, demol.FieldBldCnt)
	}
	if m.FieldCleared(demol.FieldMainPurpsCd) {
		fields = append(fields, demol.FieldMainPurpsCd)
	}
	if m.FieldCleared(demol.FieldMainPurpsCdNm) {
		fields = append(fields, demol.FieldMainPurpsCdNm)
	}
	if m.FieldCleared(demol.FieldStrctCd) {
		fields = append(fields, demol.FieldStrctCd)
	}
	if m.FieldCleared(demol.FieldStrctCdNm) {
		fields = append(fields, demol.FieldStrctCdNm)
	}
	if m.FieldCleared(demol.FieldHhldCnt) {
		fields = append(fields, demol.FieldHhldCnt)
	}
	if m.FieldCleared(demol.FieldHoCnt) {
		fields = append(fields, demol.FieldHoCnt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DemolMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DemolMutation) ClearField(name string) error {
	switch name {
	case demol.FieldBldNm:
		m.ClearBldNm()
		return nil
	case demol.FieldDemolExtngGBCd:
		m.ClearDemolExtngGBCd()
		return nil
	case demol.FieldDemolExtngGBCdNm:
		m.ClearDemolExtngGBCdNm()
		return nil
	case demol.FieldDemolStrtDay:
		m.ClearDemolStrtDay()
		return nil
	case demol.FieldDemolEndDay:
		m.ClearDemolEndDay()
		return nil
	case demol.FieldDemolExtngDay:
		m.ClearDemolExtngDay()
		return nil
	case demol.FieldTotArea:
		m.ClearTotArea()
		return nil
	case demol.FieldBldCnt:
		m.ClearBldCnt()
		return nil
	case demol.FieldMainPurpsCd:
		m.ClearMainPurpsCd()
		return nil
	case demol.FieldMainPurpsCdNm:
		m.ClearMainPurpsCdNm()
		return nil
	case demol.FieldStrctCd:
		m.ClearStrctCd()
		return nil
	case demol.FieldStrctCdNm:
		m.ClearStrctCdNm()
		return nil
	case demol.FieldHhldCnt:
		m.ClearHhldCnt()
		return nil
	case demol.FieldHoCnt:
		m.ClearHoCnt()
		return nil
	}
	return fmt.Errorf("unknown Demol nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DemolMutation) ResetField(name string) error {
	switch name {
	case demol.FieldMgmPmsrgstPk:
		m.ResetMgmPmsrgstPk()
		return nil
	case demol.FieldBldNm:
		m.ResetBldNm()
		return nil
	case demol.FieldDemolExtngGBCd:
		m.ResetDemolExtngGBCd()
		return nil
	case demol.FieldDemolExtngGBCdNm:
		m.ResetDemolExtngGBCdNm()
		return nil
	case demol.FieldDemolStrtDay:
		m.ResetDemolStrtDay()
		return nil
	case demol.FieldDemolEndDay:
		m.ResetDemolEndDay()
		return nil
	case demol.FieldDemolExtngDay:
		m.ResetDemolExtngDay()
		return nil
	case demol.FieldTotArea:
		m.ResetTotArea()
		return nil
	case demol.FieldBldCnt:
		m.ResetBldCnt()
		return nil
	case demol.FieldMainPurpsCd:
		m.ResetMainPurpsCd()
		return nil
	case demol.FieldMainPurpsCdNm:
		m.ResetMainPurpsCdNm()
		return nil
	case demol.FieldStrctCd:
		m.ResetStrctCd()
		return nil
	case demol.FieldStrctCdNm:
		m.ResetStrctCdNm()
		return nil
	case demol.FieldHhldCnt:
		m.ResetHhldCnt()
		return nil
	case demol.FieldHoCnt:
		m.ResetHoCnt()
		return nil
	case demol.FieldCrtnDay:
		m.ResetCrtnDay()
		return nil
	case demol.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case demol.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Demol field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DemolMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DemolMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DemolMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DemolMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DemolMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DemolMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DemolMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Demol unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DemolMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Demol edge %s", name)
}

// JibunMutation represents an operation that mutates the Jibun nodes in the graph.
type JibunMutation struct {
	config
	op            Op
	typ           string
	id            *int
	bjdong_cd     *string
	sigungu_cd    *string
	bun           *string
	ji            *string
	guyuk_cd      *string
	guyuk_cd_nm   *string
	jimok_cd      *string
	jimok_cd_nm   *string
	jiyuk_cd      *string
	jiyuk_cd_nm   *string
	jigu_cd       *string
	jigu_cd_nm    *string
	plat_gb_cd    *string
	plat_plc      *string
	splot_nm      *string
	block         *string
	lot           *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	demol         map[int]struct{}
	removeddemol  map[int]struct{}
	cleareddemol  bool
	done          bool
	oldValue      func(context.Context) (*Jibun, error)
	predicates    []predicate.Jibun
}

var _ ent.Mutation = (*JibunMutation)(nil)

// jibunOption allows management of the mutation configuration using functional options.
type jibunOption func(*JibunMutation)

// newJibunMutation creates new mutation for the Jibun entity.
func newJibunMutation(c config, op Op, opts ...jibunOption) *JibunMutation {
	m := &JibunMutation{
		config:        c,
		op:            op,
		typ:           TypeJibun,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJibunID sets the ID field of the mutation.
func withJibunID(id int) jibunOption {
	return func(m *JibunMutation) {
		var (
			err   error
			once  sync.Once
			value *Jibun
		)
		m.oldValue = func(ctx context.Context) (*Jibun, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Jibun.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJibun sets the old Jibun of the mutation.
func withJibun(node *Jibun) jibunOption {
	return func(m *JibunMutation) {
		m.oldValue = func(context.Context) (*Jibun, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JibunMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JibunMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JibunMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JibunMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Jibun.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBjdongCd sets the "bjdong_cd" field.
func (m *JibunMutation) SetBjdongCd(s string) {
	m.bjdong_cd = &s
}

// BjdongCd returns the value of the "bjdong_cd" field in the mutation.
func (m *JibunMutation) BjdongCd() (r string, exists bool) {
	v := m.bjdong_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldBjdongCd returns the old "bjdong_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldBjdongCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBjdongCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBjdongCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBjdongCd: %w", err)
	}
	return oldValue.BjdongCd, nil
}

// ResetBjdongCd resets all changes to the "bjdong_cd" field.
func (m *JibunMutation) ResetBjdongCd() {
	m.bjdong_cd = nil
}

// SetSigunguCd sets the "sigungu_cd" field.
func (m *JibunMutation) SetSigunguCd(s string) {
	m.sigungu_cd = &s
}

// SigunguCd returns the value of the "sigungu_cd" field in the mutation.
func (m *JibunMutation) SigunguCd() (r string, exists bool) {
	v := m.sigungu_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldSigunguCd returns the old "sigungu_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldSigunguCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSigunguCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSigunguCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSigunguCd: %w", err)
	}
	return oldValue.SigunguCd, nil
}

// ResetSigunguCd resets all changes to the "sigungu_cd" field.
func (m *JibunMutation) ResetSigunguCd() {
	m.sigungu_cd = nil
}

// SetBun sets the "bun" field.
func (m *JibunMutation) SetBun(s string) {
	m.bun = &s
}

// Bun returns the value of the "bun" field in the mutation.
func (m *JibunMutation) Bun() (r string, exists bool) {
	v := m.bun
	if v == nil {
		return
	}
	return *v, true
}

// OldBun returns the old "bun" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldBun(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBun is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBun requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBun: %w", err)
	}
	return oldValue.Bun, nil
}

// ResetBun resets all changes to the "bun" field.
func (m *JibunMutation) ResetBun() {
	m.bun = nil
}

// SetJi sets the "ji" field.
func (m *JibunMutation) SetJi(s string) {
	m.ji = &s
}

// Ji returns the value of the "ji" field in the mutation.
func (m *JibunMutation) Ji() (r string, exists bool) {
	v := m.ji
	if v == nil {
		return
	}
	return *v, true
}

// OldJi returns the old "ji" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJi: %w", err)
	}
	return oldValue.Ji, nil
}

// ResetJi resets all changes to the "ji" field.
func (m *JibunMutation) ResetJi() {
	m.ji = nil
}

// SetGuyukCd sets the "guyuk_cd" field.
func (m *JibunMutation) SetGuyukCd(s string) {
	m.guyuk_cd = &s
}

// GuyukCd returns the value of the "guyuk_cd" field in the mutation.
func (m *JibunMutation) GuyukCd() (r string, exists bool) {
	v := m.guyuk_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldGuyukCd returns the old "guyuk_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldGuyukCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuyukCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuyukCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuyukCd: %w", err)
	}
	return oldValue.GuyukCd, nil
}

// ResetGuyukCd resets all changes to the "guyuk_cd" field.
func (m *JibunMutation) ResetGuyukCd() {
	m.guyuk_cd = nil
}

// SetGuyukCdNm sets the "guyuk_cd_nm" field.
func (m *JibunMutation) SetGuyukCdNm(s string) {
	m.guyuk_cd_nm = &s
}

// GuyukCdNm returns the value of the "guyuk_cd_nm" field in the mutation.
func (m *JibunMutation) GuyukCdNm() (r string, exists bool) {
	v := m.guyuk_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldGuyukCdNm returns the old "guyuk_cd_nm" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldGuyukCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuyukCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuyukCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuyukCdNm: %w", err)
	}
	return oldValue.GuyukCdNm, nil
}

// ResetGuyukCdNm resets all changes to the "guyuk_cd_nm" field.
func (m *JibunMutation) ResetGuyukCdNm() {
	m.guyuk_cd_nm = nil
}

// SetJimokCd sets the "jimok_cd" field.
func (m *JibunMutation) SetJimokCd(s string) {
	m.jimok_cd = &s
}

// JimokCd returns the value of the "jimok_cd" field in the mutation.
func (m *JibunMutation) JimokCd() (r string, exists bool) {
	v := m.jimok_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldJimokCd returns the old "jimok_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJimokCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJimokCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJimokCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJimokCd: %w", err)
	}
	return oldValue.JimokCd, nil
}

// ResetJimokCd resets all changes to the "jimok_cd" field.
func (m *JibunMutation) ResetJimokCd() {
	m.jimok_cd = nil
}

// SetJimokCdNm sets the "jimok_cd_nm" field.
func (m *JibunMutation) SetJimokCdNm(s string) {
	m.jimok_cd_nm = &s
}

// JimokCdNm returns the value of the "jimok_cd_nm" field in the mutation.
func (m *JibunMutation) JimokCdNm() (r string, exists bool) {
	v := m.jimok_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldJimokCdNm returns the old "jimok_cd_nm" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJimokCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJimokCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJimokCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJimokCdNm: %w", err)
	}
	return oldValue.JimokCdNm, nil
}

// ResetJimokCdNm resets all changes to the "jimok_cd_nm" field.
func (m *JibunMutation) ResetJimokCdNm() {
	m.jimok_cd_nm = nil
}

// SetJiyukCd sets the "jiyuk_cd" field.
func (m *JibunMutation) SetJiyukCd(s string) {
	m.jiyuk_cd = &s
}

// JiyukCd returns the value of the "jiyuk_cd" field in the mutation.
func (m *JibunMutation) JiyukCd() (r string, exists bool) {
	v := m.jiyuk_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldJiyukCd returns the old "jiyuk_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJiyukCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiyukCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiyukCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiyukCd: %w", err)
	}
	return oldValue.JiyukCd, nil
}

// ResetJiyukCd resets all changes to the "jiyuk_cd" field.
func (m *JibunMutation) ResetJiyukCd() {
	m.jiyuk_cd = nil
}

// SetJiyukCdNm sets the "jiyuk_cd_nm" field.
func (m *JibunMutation) SetJiyukCdNm(s string) {
	m.jiyuk_cd_nm = &s
}

// JiyukCdNm returns the value of the "jiyuk_cd_nm" field in the mutation.
func (m *JibunMutation) JiyukCdNm() (r string, exists bool) {
	v := m.jiyuk_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldJiyukCdNm returns the old "jiyuk_cd_nm" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJiyukCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiyukCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiyukCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiyukCdNm: %w", err)
	}
	return oldValue.JiyukCdNm, nil
}

// ResetJiyukCdNm resets all changes to the "jiyuk_cd_nm" field.
func (m *JibunMutation) ResetJiyukCdNm() {
	m.jiyuk_cd_nm = nil
}

// SetJiguCd sets the "jigu_cd" field.
func (m *JibunMutation) SetJiguCd(s string) {
	m.jigu_cd = &s
}

// JiguCd returns the value of the "jigu_cd" field in the mutation.
func (m *JibunMutation) JiguCd() (r string, exists bool) {
	v := m.jigu_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldJiguCd returns the old "jigu_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJiguCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiguCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiguCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiguCd: %w", err)
	}
	return oldValue.JiguCd, nil
}

// ResetJiguCd resets all changes to the "jigu_cd" field.
func (m *JibunMutation) ResetJiguCd() {
	m.jigu_cd = nil
}

// SetJiguCdNm sets the "jigu_cd_nm" field.
func (m *JibunMutation) SetJiguCdNm(s string) {
	m.jigu_cd_nm = &s
}

// JiguCdNm returns the value of the "jigu_cd_nm" field in the mutation.
func (m *JibunMutation) JiguCdNm() (r string, exists bool) {
	v := m.jigu_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldJiguCdNm returns the old "jigu_cd_nm" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldJiguCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiguCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiguCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiguCdNm: %w", err)
	}
	return oldValue.JiguCdNm, nil
}

// ResetJiguCdNm resets all changes to the "jigu_cd_nm" field.
func (m *JibunMutation) ResetJiguCdNm() {
	m.jigu_cd_nm = nil
}

// SetPlatGBCd sets the "plat_gb_cd" field.
func (m *JibunMutation) SetPlatGBCd(s string) {
	m.plat_gb_cd = &s
}

// PlatGBCd returns the value of the "plat_gb_cd" field in the mutation.
func (m *JibunMutation) PlatGBCd() (r string, exists bool) {
	v := m.plat_gb_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatGBCd returns the old "plat_gb_cd" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldPlatGBCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatGBCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatGBCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatGBCd: %w", err)
	}
	return oldValue.PlatGBCd, nil
}

// ResetPlatGBCd resets all changes to the "plat_gb_cd" field.
func (m *JibunMutation) ResetPlatGBCd() {
	m.plat_gb_cd = nil
}

// SetPlatPlc sets the "plat_plc" field.
func (m *JibunMutation) SetPlatPlc(s string) {
	m.plat_plc = &s
}

// PlatPlc returns the value of the "plat_plc" field in the mutation.
func (m *JibunMutation) PlatPlc() (r string, exists bool) {
	v := m.plat_plc
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatPlc returns the old "plat_plc" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldPlatPlc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatPlc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatPlc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatPlc: %w", err)
	}
	return oldValue.PlatPlc, nil
}

// ResetPlatPlc resets all changes to the "plat_plc" field.
func (m *JibunMutation) ResetPlatPlc() {
	m.plat_plc = nil
}

// SetSplotNm sets the "splot_nm" field.
func (m *JibunMutation) SetSplotNm(s string) {
	m.splot_nm = &s
}

// SplotNm returns the value of the "splot_nm" field in the mutation.
func (m *JibunMutation) SplotNm() (r string, exists bool) {
	v := m.splot_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldSplotNm returns the old "splot_nm" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldSplotNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSplotNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSplotNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSplotNm: %w", err)
	}
	return oldValue.SplotNm, nil
}

// ResetSplotNm resets all changes to the "splot_nm" field.
func (m *JibunMutation) ResetSplotNm() {
	m.splot_nm = nil
}

// SetBlock sets the "block" field.
func (m *JibunMutation) SetBlock(s string) {
	m.block = &s
}

// Block returns the value of the "block" field in the mutation.
func (m *JibunMutation) Block() (r string, exists bool) {
	v := m.block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "block" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldBlock(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// ResetBlock resets all changes to the "block" field.
func (m *JibunMutation) ResetBlock() {
	m.block = nil
}

// SetLot sets the "lot" field.
func (m *JibunMutation) SetLot(s string) {
	m.lot = &s
}

// Lot returns the value of the "lot" field in the mutation.
func (m *JibunMutation) Lot() (r string, exists bool) {
	v := m.lot
	if v == nil {
		return
	}
	return *v, true
}

// OldLot returns the old "lot" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldLot(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLot: %w", err)
	}
	return oldValue.Lot, nil
}

// ResetLot resets all changes to the "lot" field.
func (m *JibunMutation) ResetLot() {
	m.lot = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *JibunMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *JibunMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *JibunMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *JibunMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *JibunMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Jibun entity.
// If the Jibun object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JibunMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *JibunMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddDemolIDs adds the "demol" edge to the Demol entity by ids.
func (m *JibunMutation) AddDemolIDs(ids ...int) {
	if m.demol == nil {
		m.demol = make(map[int]struct{})
	}
	for i := range ids {
		m.demol[ids[i]] = struct{}{}
	}
}

// ClearDemol clears the "demol" edge to the Demol entity.
func (m *JibunMutation) ClearDemol() {
	m.cleareddemol = true
}

// DemolCleared reports if the "demol" edge to the Demol entity was cleared.
func (m *JibunMutation) DemolCleared() bool {
	return m.cleareddemol
}

// RemoveDemolIDs removes the "demol" edge to the Demol entity by IDs.
func (m *JibunMutation) RemoveDemolIDs(ids ...int) {
	if m.removeddemol == nil {
		m.removeddemol = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.demol, ids[i])
		m.removeddemol[ids[i]] = struct{}{}
	}
}

// RemovedDemol returns the removed IDs of the "demol" edge to the Demol entity.
func (m *JibunMutation) RemovedDemolIDs() (ids []int) {
	for id := range m.removeddemol {
		ids = append(ids, id)
	}
	return
}

// DemolIDs returns the "demol" edge IDs in the mutation.
func (m *JibunMutation) DemolIDs() (ids []int) {
	for id := range m.demol {
		ids = append(ids, id)
	}
	return
}

// ResetDemol resets all changes to the "demol" edge.
func (m *JibunMutation) ResetDemol() {
	m.demol = nil
	m.cleareddemol = false
	m.removeddemol = nil
}

// Where appends a list predicates to the JibunMutation builder.
func (m *JibunMutation) Where(ps ...predicate.Jibun) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JibunMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JibunMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Jibun, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JibunMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JibunMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Jibun).
func (m *JibunMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JibunMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.bjdong_cd != nil {
		fields = append(fields, jibun.FieldBjdongCd)
	}
	if m.sigungu_cd != nil {
		fields = append(fields, jibun.FieldSigunguCd)
	}
	if m.bun != nil {
		fields = append(fields, jibun.FieldBun)
	}
	if m.ji != nil {
		fields = append(fields, jibun.FieldJi)
	}
	if m.guyuk_cd != nil {
		fields = append(fields, jibun.FieldGuyukCd)
	}
	if m.guyuk_cd_nm != nil {
		fields = append(fields, jibun.FieldGuyukCdNm)
	}
	if m.jimok_cd != nil {
		fields = append(fields, jibun.FieldJimokCd)
	}
	if m.jimok_cd_nm != nil {
		fields = append(fields, jibun.FieldJimokCdNm)
	}
	if m.jiyuk_cd != nil {
		fields = append(fields, jibun.FieldJiyukCd)
	}
	if m.jiyuk_cd_nm != nil {
		fields = append(fields, jibun.FieldJiyukCdNm)
	}
	if m.jigu_cd != nil {
		fields = append(fields, jibun.FieldJiguCd)
	}
	if m.jigu_cd_nm != nil {
		fields = append(fields, jibun.FieldJiguCdNm)
	}
	if m.plat_gb_cd != nil {
		fields = append(fields, jibun.FieldPlatGBCd)
	}
	if m.plat_plc != nil {
		fields = append(fields, jibun.FieldPlatPlc)
	}
	if m.splot_nm != nil {
		fields = append(fields, jibun.FieldSplotNm)
	}
	if m.block != nil {
		fields = append(fields, jibun.FieldBlock)
	}
	if m.lot != nil {
		fields = append(fields, jibun.FieldLot)
	}
	if m.created_at != nil {
		fields = append(fields, jibun.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, jibun.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JibunMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jibun.FieldBjdongCd:
		return m.BjdongCd()
	case jibun.FieldSigunguCd:
		return m.SigunguCd()
	case jibun.FieldBun:
		return m.Bun()
	case jibun.FieldJi:
		return m.Ji()
	case jibun.FieldGuyukCd:
		return m.GuyukCd()
	case jibun.FieldGuyukCdNm:
		return m.GuyukCdNm()
	case jibun.FieldJimokCd:
		return m.JimokCd()
	case jibun.FieldJimokCdNm:
		return m.JimokCdNm()
	case jibun.FieldJiyukCd:
		return m.JiyukCd()
	case jibun.FieldJiyukCdNm:
		return m.JiyukCdNm()
	case jibun.FieldJiguCd:
		return m.JiguCd()
	case jibun.FieldJiguCdNm:
		return m.JiguCdNm()
	case jibun.FieldPlatGBCd:
		return m.PlatGBCd()
	case jibun.FieldPlatPlc:
		return m.PlatPlc()
	case jibun.FieldSplotNm:
		return m.SplotNm()
	case jibun.FieldBlock:
		return m.Block()
	case jibun.FieldLot:
		return m.Lot()
	case jibun.FieldCreatedAt:
		return m.CreatedAt()
	case jibun.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JibunMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jibun.FieldBjdongCd:
		return m.OldBjdongCd(ctx)
	case jibun.FieldSigunguCd:
		return m.OldSigunguCd(ctx)
	case jibun.FieldBun:
		return m.OldBun(ctx)
	case jibun.FieldJi:
		return m.OldJi(ctx)
	case jibun.FieldGuyukCd:
		return m.OldGuyukCd(ctx)
	case jibun.FieldGuyukCdNm:
		return m.OldGuyukCdNm(ctx)
	case jibun.FieldJimokCd:
		return m.OldJimokCd(ctx)
	case jibun.FieldJimokCdNm:
		return m.OldJimokCdNm(ctx)
	case jibun.FieldJiyukCd:
		return m.OldJiyukCd(ctx)
	case jibun.FieldJiyukCdNm:
		return m.OldJiyukCdNm(ctx)
	case jibun.FieldJiguCd:
		return m.OldJiguCd(ctx)
	case jibun.FieldJiguCdNm:
		return m.OldJiguCdNm(ctx)
	case jibun.FieldPlatGBCd:
		return m.OldPlatGBCd(ctx)
	case jibun.FieldPlatPlc:
		return m.OldPlatPlc(ctx)
	case jibun.FieldSplotNm:
		return m.OldSplotNm(ctx)
	case jibun.FieldBlock:
		return m.OldBlock(ctx)
	case jibun.FieldLot:
		return m.OldLot(ctx)
	case jibun.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case jibun.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Jibun field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JibunMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jibun.FieldBjdongCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBjdongCd(v)
		return nil
	case jibun.FieldSigunguCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSigunguCd(v)
		return nil
	case jibun.FieldBun:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBun(v)
		return nil
	case jibun.FieldJi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJi(v)
		return nil
	case jibun.FieldGuyukCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuyukCd(v)
		return nil
	case jibun.FieldGuyukCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuyukCdNm(v)
		return nil
	case jibun.FieldJimokCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJimokCd(v)
		return nil
	case jibun.FieldJimokCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJimokCdNm(v)
		return nil
	case jibun.FieldJiyukCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiyukCd(v)
		return nil
	case jibun.FieldJiyukCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiyukCdNm(v)
		return nil
	case jibun.FieldJiguCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiguCd(v)
		return nil
	case jibun.FieldJiguCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiguCdNm(v)
		return nil
	case jibun.FieldPlatGBCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatGBCd(v)
		return nil
	case jibun.FieldPlatPlc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatPlc(v)
		return nil
	case jibun.FieldSplotNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSplotNm(v)
		return nil
	case jibun.FieldBlock:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case jibun.FieldLot:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLot(v)
		return nil
	case jibun.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case jibun.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Jibun field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JibunMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JibunMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JibunMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Jibun numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JibunMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JibunMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JibunMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Jibun nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JibunMutation) ResetField(name string) error {
	switch name {
	case jibun.FieldBjdongCd:
		m.ResetBjdongCd()
		return nil
	case jibun.FieldSigunguCd:
		m.ResetSigunguCd()
		return nil
	case jibun.FieldBun:
		m.ResetBun()
		return nil
	case jibun.FieldJi:
		m.ResetJi()
		return nil
	case jibun.FieldGuyukCd:
		m.ResetGuyukCd()
		return nil
	case jibun.FieldGuyukCdNm:
		m.ResetGuyukCdNm()
		return nil
	case jibun.FieldJimokCd:
		m.ResetJimokCd()
		return nil
	case jibun.FieldJimokCdNm:
		m.ResetJimokCdNm()
		return nil
	case jibun.FieldJiyukCd:
		m.ResetJiyukCd()
		return nil
	case jibun.FieldJiyukCdNm:
		m.ResetJiyukCdNm()
		return nil
	case jibun.FieldJiguCd:
		m.ResetJiguCd()
		return nil
	case jibun.FieldJiguCdNm:
		m.ResetJiguCdNm()
		return nil
	case jibun.FieldPlatGBCd:
		m.ResetPlatGBCd()
		return nil
	case jibun.FieldPlatPlc:
		m.ResetPlatPlc()
		return nil
	case jibun.FieldSplotNm:
		m.ResetSplotNm()
		return nil
	case jibun.FieldBlock:
		m.ResetBlock()
		return nil
	case jibun.FieldLot:
		m.ResetLot()
		return nil
	case jibun.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case jibun.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Jibun field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JibunMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.demol != nil {
		edges = append(edges, jibun.EdgeDemol)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JibunMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case jibun.EdgeDemol:
		ids := make([]ent.Value, 0, len(m.demol))
		for id := range m.demol {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JibunMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddemol != nil {
		edges = append(edges, jibun.EdgeDemol)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JibunMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case jibun.EdgeDemol:
		ids := make([]ent.Value, 0, len(m.removeddemol))
		for id := range m.removeddemol {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JibunMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddemol {
		edges = append(edges, jibun.EdgeDemol)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JibunMutation) EdgeCleared(name string) bool {
	switch name {
	case jibun.EdgeDemol:
		return m.cleareddemol
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JibunMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Jibun unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JibunMutation) ResetEdge(name string) error {
	switch name {
	case jibun.EdgeDemol:
		m.ResetDemol()
		return nil
	}
	return fmt.Errorf("unknown Jibun edge %s", name)
}

// PermsMutation represents an operation that mutates the Perms nodes in the graph.
type PermsMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	guyukCd                 *string
	guyukCdNm               *string
	jimokCd                 *string
	jimokCdNm               *string
	jiyukCd                 *string
	jiyukCdNm               *string
	jiguCd                  *string
	jiguCdNm                *string
	arch_gb_cd_nm           *string
	arch_gb_cd              *string
	plat_area               *uint32
	addplat_area            *int32
	arch_area               *uint32
	addarch_area            *int32
	bc_rat                  *uint16
	addbc_rat               *int16
	tot_area                *uint32
	addtot_area             *int32
	vl_rat_estm_tot_area    *uint32
	addvl_rat_estm_tot_area *int32
	vl_rat                  *uint16
	addvl_rat               *int16
	main_bld_cnt            *uint16
	addmain_bld_cnt         *int16
	atch_bld_dong_cnt       *uint16
	addatch_bld_dong_cnt    *int16
	main_purps_cd           *string
	main_purps_cd_nm        *string
	hhld_cnt                *uint16
	addhhld_cnt             *int16
	ho_cnt                  *uint16
	addho_cnt               *int16
	fmly_cnt                *uint16
	addfmly_cnt             *int16
	tot_pkng_cnt            *uint16
	addtot_pkng_cnt         *int16
	stcns_sched_day         *string
	stcns_delay_day         *string
	real_stcns_day          *string
	arch_pms_day            *string
	use_apr_day             *string
	platPlc                 *string
	sigunguCd               *string
	bjdongCd                *string
	platGbCd                *string
	bun                     *string
	ji                      *string
	mgm_pmsrgst_pk          *string
	splotNm                 *string
	block                   *string
	lot                     *string
	crtn_day                *string
	rnum                    *uint16
	addrnum                 *int16
	bld_nm                  *string
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*Perms, error)
	predicates              []predicate.Perms
}

var _ ent.Mutation = (*PermsMutation)(nil)

// permsOption allows management of the mutation configuration using functional options.
type permsOption func(*PermsMutation)

// newPermsMutation creates new mutation for the Perms entity.
func newPermsMutation(c config, op Op, opts ...permsOption) *PermsMutation {
	m := &PermsMutation{
		config:        c,
		op:            op,
		typ:           TypePerms,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermsID sets the ID field of the mutation.
func withPermsID(id int) permsOption {
	return func(m *PermsMutation) {
		var (
			err   error
			once  sync.Once
			value *Perms
		)
		m.oldValue = func(ctx context.Context) (*Perms, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Perms.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerms sets the old Perms of the mutation.
func withPerms(node *Perms) permsOption {
	return func(m *PermsMutation) {
		m.oldValue = func(context.Context) (*Perms, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Perms.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGuyukCd sets the "guyukCd" field.
func (m *PermsMutation) SetGuyukCd(s string) {
	m.guyukCd = &s
}

// GuyukCd returns the value of the "guyukCd" field in the mutation.
func (m *PermsMutation) GuyukCd() (r string, exists bool) {
	v := m.guyukCd
	if v == nil {
		return
	}
	return *v, true
}

// OldGuyukCd returns the old "guyukCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldGuyukCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuyukCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuyukCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuyukCd: %w", err)
	}
	return oldValue.GuyukCd, nil
}

// ClearGuyukCd clears the value of the "guyukCd" field.
func (m *PermsMutation) ClearGuyukCd() {
	m.guyukCd = nil
	m.clearedFields[perms.FieldGuyukCd] = struct{}{}
}

// GuyukCdCleared returns if the "guyukCd" field was cleared in this mutation.
func (m *PermsMutation) GuyukCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldGuyukCd]
	return ok
}

// ResetGuyukCd resets all changes to the "guyukCd" field.
func (m *PermsMutation) ResetGuyukCd() {
	m.guyukCd = nil
	delete(m.clearedFields, perms.FieldGuyukCd)
}

// SetGuyukCdNm sets the "guyukCdNm" field.
func (m *PermsMutation) SetGuyukCdNm(s string) {
	m.guyukCdNm = &s
}

// GuyukCdNm returns the value of the "guyukCdNm" field in the mutation.
func (m *PermsMutation) GuyukCdNm() (r string, exists bool) {
	v := m.guyukCdNm
	if v == nil {
		return
	}
	return *v, true
}

// OldGuyukCdNm returns the old "guyukCdNm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldGuyukCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuyukCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuyukCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuyukCdNm: %w", err)
	}
	return oldValue.GuyukCdNm, nil
}

// ClearGuyukCdNm clears the value of the "guyukCdNm" field.
func (m *PermsMutation) ClearGuyukCdNm() {
	m.guyukCdNm = nil
	m.clearedFields[perms.FieldGuyukCdNm] = struct{}{}
}

// GuyukCdNmCleared returns if the "guyukCdNm" field was cleared in this mutation.
func (m *PermsMutation) GuyukCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldGuyukCdNm]
	return ok
}

// ResetGuyukCdNm resets all changes to the "guyukCdNm" field.
func (m *PermsMutation) ResetGuyukCdNm() {
	m.guyukCdNm = nil
	delete(m.clearedFields, perms.FieldGuyukCdNm)
}

// SetJimokCd sets the "jimokCd" field.
func (m *PermsMutation) SetJimokCd(s string) {
	m.jimokCd = &s
}

// JimokCd returns the value of the "jimokCd" field in the mutation.
func (m *PermsMutation) JimokCd() (r string, exists bool) {
	v := m.jimokCd
	if v == nil {
		return
	}
	return *v, true
}

// OldJimokCd returns the old "jimokCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJimokCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJimokCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJimokCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJimokCd: %w", err)
	}
	return oldValue.JimokCd, nil
}

// ClearJimokCd clears the value of the "jimokCd" field.
func (m *PermsMutation) ClearJimokCd() {
	m.jimokCd = nil
	m.clearedFields[perms.FieldJimokCd] = struct{}{}
}

// JimokCdCleared returns if the "jimokCd" field was cleared in this mutation.
func (m *PermsMutation) JimokCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldJimokCd]
	return ok
}

// ResetJimokCd resets all changes to the "jimokCd" field.
func (m *PermsMutation) ResetJimokCd() {
	m.jimokCd = nil
	delete(m.clearedFields, perms.FieldJimokCd)
}

// SetJimokCdNm sets the "jimokCdNm" field.
func (m *PermsMutation) SetJimokCdNm(s string) {
	m.jimokCdNm = &s
}

// JimokCdNm returns the value of the "jimokCdNm" field in the mutation.
func (m *PermsMutation) JimokCdNm() (r string, exists bool) {
	v := m.jimokCdNm
	if v == nil {
		return
	}
	return *v, true
}

// OldJimokCdNm returns the old "jimokCdNm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJimokCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJimokCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJimokCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJimokCdNm: %w", err)
	}
	return oldValue.JimokCdNm, nil
}

// ClearJimokCdNm clears the value of the "jimokCdNm" field.
func (m *PermsMutation) ClearJimokCdNm() {
	m.jimokCdNm = nil
	m.clearedFields[perms.FieldJimokCdNm] = struct{}{}
}

// JimokCdNmCleared returns if the "jimokCdNm" field was cleared in this mutation.
func (m *PermsMutation) JimokCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldJimokCdNm]
	return ok
}

// ResetJimokCdNm resets all changes to the "jimokCdNm" field.
func (m *PermsMutation) ResetJimokCdNm() {
	m.jimokCdNm = nil
	delete(m.clearedFields, perms.FieldJimokCdNm)
}

// SetJiyukCd sets the "jiyukCd" field.
func (m *PermsMutation) SetJiyukCd(s string) {
	m.jiyukCd = &s
}

// JiyukCd returns the value of the "jiyukCd" field in the mutation.
func (m *PermsMutation) JiyukCd() (r string, exists bool) {
	v := m.jiyukCd
	if v == nil {
		return
	}
	return *v, true
}

// OldJiyukCd returns the old "jiyukCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJiyukCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiyukCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiyukCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiyukCd: %w", err)
	}
	return oldValue.JiyukCd, nil
}

// ClearJiyukCd clears the value of the "jiyukCd" field.
func (m *PermsMutation) ClearJiyukCd() {
	m.jiyukCd = nil
	m.clearedFields[perms.FieldJiyukCd] = struct{}{}
}

// JiyukCdCleared returns if the "jiyukCd" field was cleared in this mutation.
func (m *PermsMutation) JiyukCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldJiyukCd]
	return ok
}

// ResetJiyukCd resets all changes to the "jiyukCd" field.
func (m *PermsMutation) ResetJiyukCd() {
	m.jiyukCd = nil
	delete(m.clearedFields, perms.FieldJiyukCd)
}

// SetJiyukCdNm sets the "jiyukCdNm" field.
func (m *PermsMutation) SetJiyukCdNm(s string) {
	m.jiyukCdNm = &s
}

// JiyukCdNm returns the value of the "jiyukCdNm" field in the mutation.
func (m *PermsMutation) JiyukCdNm() (r string, exists bool) {
	v := m.jiyukCdNm
	if v == nil {
		return
	}
	return *v, true
}

// OldJiyukCdNm returns the old "jiyukCdNm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJiyukCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiyukCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiyukCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiyukCdNm: %w", err)
	}
	return oldValue.JiyukCdNm, nil
}

// ClearJiyukCdNm clears the value of the "jiyukCdNm" field.
func (m *PermsMutation) ClearJiyukCdNm() {
	m.jiyukCdNm = nil
	m.clearedFields[perms.FieldJiyukCdNm] = struct{}{}
}

// JiyukCdNmCleared returns if the "jiyukCdNm" field was cleared in this mutation.
func (m *PermsMutation) JiyukCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldJiyukCdNm]
	return ok
}

// ResetJiyukCdNm resets all changes to the "jiyukCdNm" field.
func (m *PermsMutation) ResetJiyukCdNm() {
	m.jiyukCdNm = nil
	delete(m.clearedFields, perms.FieldJiyukCdNm)
}

// SetJiguCd sets the "jiguCd" field.
func (m *PermsMutation) SetJiguCd(s string) {
	m.jiguCd = &s
}

// JiguCd returns the value of the "jiguCd" field in the mutation.
func (m *PermsMutation) JiguCd() (r string, exists bool) {
	v := m.jiguCd
	if v == nil {
		return
	}
	return *v, true
}

// OldJiguCd returns the old "jiguCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJiguCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiguCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiguCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiguCd: %w", err)
	}
	return oldValue.JiguCd, nil
}

// ClearJiguCd clears the value of the "jiguCd" field.
func (m *PermsMutation) ClearJiguCd() {
	m.jiguCd = nil
	m.clearedFields[perms.FieldJiguCd] = struct{}{}
}

// JiguCdCleared returns if the "jiguCd" field was cleared in this mutation.
func (m *PermsMutation) JiguCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldJiguCd]
	return ok
}

// ResetJiguCd resets all changes to the "jiguCd" field.
func (m *PermsMutation) ResetJiguCd() {
	m.jiguCd = nil
	delete(m.clearedFields, perms.FieldJiguCd)
}

// SetJiguCdNm sets the "jiguCdNm" field.
func (m *PermsMutation) SetJiguCdNm(s string) {
	m.jiguCdNm = &s
}

// JiguCdNm returns the value of the "jiguCdNm" field in the mutation.
func (m *PermsMutation) JiguCdNm() (r string, exists bool) {
	v := m.jiguCdNm
	if v == nil {
		return
	}
	return *v, true
}

// OldJiguCdNm returns the old "jiguCdNm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJiguCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJiguCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJiguCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJiguCdNm: %w", err)
	}
	return oldValue.JiguCdNm, nil
}

// ClearJiguCdNm clears the value of the "jiguCdNm" field.
func (m *PermsMutation) ClearJiguCdNm() {
	m.jiguCdNm = nil
	m.clearedFields[perms.FieldJiguCdNm] = struct{}{}
}

// JiguCdNmCleared returns if the "jiguCdNm" field was cleared in this mutation.
func (m *PermsMutation) JiguCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldJiguCdNm]
	return ok
}

// ResetJiguCdNm resets all changes to the "jiguCdNm" field.
func (m *PermsMutation) ResetJiguCdNm() {
	m.jiguCdNm = nil
	delete(m.clearedFields, perms.FieldJiguCdNm)
}

// SetArchGBCdNm sets the "arch_gb_cd_nm" field.
func (m *PermsMutation) SetArchGBCdNm(s string) {
	m.arch_gb_cd_nm = &s
}

// ArchGBCdNm returns the value of the "arch_gb_cd_nm" field in the mutation.
func (m *PermsMutation) ArchGBCdNm() (r string, exists bool) {
	v := m.arch_gb_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldArchGBCdNm returns the old "arch_gb_cd_nm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldArchGBCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchGBCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchGBCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchGBCdNm: %w", err)
	}
	return oldValue.ArchGBCdNm, nil
}

// ClearArchGBCdNm clears the value of the "arch_gb_cd_nm" field.
func (m *PermsMutation) ClearArchGBCdNm() {
	m.arch_gb_cd_nm = nil
	m.clearedFields[perms.FieldArchGBCdNm] = struct{}{}
}

// ArchGBCdNmCleared returns if the "arch_gb_cd_nm" field was cleared in this mutation.
func (m *PermsMutation) ArchGBCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldArchGBCdNm]
	return ok
}

// ResetArchGBCdNm resets all changes to the "arch_gb_cd_nm" field.
func (m *PermsMutation) ResetArchGBCdNm() {
	m.arch_gb_cd_nm = nil
	delete(m.clearedFields, perms.FieldArchGBCdNm)
}

// SetArchGBCd sets the "arch_gb_cd" field.
func (m *PermsMutation) SetArchGBCd(s string) {
	m.arch_gb_cd = &s
}

// ArchGBCd returns the value of the "arch_gb_cd" field in the mutation.
func (m *PermsMutation) ArchGBCd() (r string, exists bool) {
	v := m.arch_gb_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldArchGBCd returns the old "arch_gb_cd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldArchGBCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchGBCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchGBCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchGBCd: %w", err)
	}
	return oldValue.ArchGBCd, nil
}

// ClearArchGBCd clears the value of the "arch_gb_cd" field.
func (m *PermsMutation) ClearArchGBCd() {
	m.arch_gb_cd = nil
	m.clearedFields[perms.FieldArchGBCd] = struct{}{}
}

// ArchGBCdCleared returns if the "arch_gb_cd" field was cleared in this mutation.
func (m *PermsMutation) ArchGBCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldArchGBCd]
	return ok
}

// ResetArchGBCd resets all changes to the "arch_gb_cd" field.
func (m *PermsMutation) ResetArchGBCd() {
	m.arch_gb_cd = nil
	delete(m.clearedFields, perms.FieldArchGBCd)
}

// SetPlatArea sets the "plat_area" field.
func (m *PermsMutation) SetPlatArea(u uint32) {
	m.plat_area = &u
	m.addplat_area = nil
}

// PlatArea returns the value of the "plat_area" field in the mutation.
func (m *PermsMutation) PlatArea() (r uint32, exists bool) {
	v := m.plat_area
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatArea returns the old "plat_area" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldPlatArea(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatArea: %w", err)
	}
	return oldValue.PlatArea, nil
}

// AddPlatArea adds u to the "plat_area" field.
func (m *PermsMutation) AddPlatArea(u int32) {
	if m.addplat_area != nil {
		*m.addplat_area += u
	} else {
		m.addplat_area = &u
	}
}

// AddedPlatArea returns the value that was added to the "plat_area" field in this mutation.
func (m *PermsMutation) AddedPlatArea() (r int32, exists bool) {
	v := m.addplat_area
	if v == nil {
		return
	}
	return *v, true
}

// ClearPlatArea clears the value of the "plat_area" field.
func (m *PermsMutation) ClearPlatArea() {
	m.plat_area = nil
	m.addplat_area = nil
	m.clearedFields[perms.FieldPlatArea] = struct{}{}
}

// PlatAreaCleared returns if the "plat_area" field was cleared in this mutation.
func (m *PermsMutation) PlatAreaCleared() bool {
	_, ok := m.clearedFields[perms.FieldPlatArea]
	return ok
}

// ResetPlatArea resets all changes to the "plat_area" field.
func (m *PermsMutation) ResetPlatArea() {
	m.plat_area = nil
	m.addplat_area = nil
	delete(m.clearedFields, perms.FieldPlatArea)
}

// SetArchArea sets the "arch_area" field.
func (m *PermsMutation) SetArchArea(u uint32) {
	m.arch_area = &u
	m.addarch_area = nil
}

// ArchArea returns the value of the "arch_area" field in the mutation.
func (m *PermsMutation) ArchArea() (r uint32, exists bool) {
	v := m.arch_area
	if v == nil {
		return
	}
	return *v, true
}

// OldArchArea returns the old "arch_area" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldArchArea(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchArea: %w", err)
	}
	return oldValue.ArchArea, nil
}

// AddArchArea adds u to the "arch_area" field.
func (m *PermsMutation) AddArchArea(u int32) {
	if m.addarch_area != nil {
		*m.addarch_area += u
	} else {
		m.addarch_area = &u
	}
}

// AddedArchArea returns the value that was added to the "arch_area" field in this mutation.
func (m *PermsMutation) AddedArchArea() (r int32, exists bool) {
	v := m.addarch_area
	if v == nil {
		return
	}
	return *v, true
}

// ClearArchArea clears the value of the "arch_area" field.
func (m *PermsMutation) ClearArchArea() {
	m.arch_area = nil
	m.addarch_area = nil
	m.clearedFields[perms.FieldArchArea] = struct{}{}
}

// ArchAreaCleared returns if the "arch_area" field was cleared in this mutation.
func (m *PermsMutation) ArchAreaCleared() bool {
	_, ok := m.clearedFields[perms.FieldArchArea]
	return ok
}

// ResetArchArea resets all changes to the "arch_area" field.
func (m *PermsMutation) ResetArchArea() {
	m.arch_area = nil
	m.addarch_area = nil
	delete(m.clearedFields, perms.FieldArchArea)
}

// SetBcRat sets the "bc_rat" field.
func (m *PermsMutation) SetBcRat(u uint16) {
	m.bc_rat = &u
	m.addbc_rat = nil
}

// BcRat returns the value of the "bc_rat" field in the mutation.
func (m *PermsMutation) BcRat() (r uint16, exists bool) {
	v := m.bc_rat
	if v == nil {
		return
	}
	return *v, true
}

// OldBcRat returns the old "bc_rat" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldBcRat(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcRat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcRat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcRat: %w", err)
	}
	return oldValue.BcRat, nil
}

// AddBcRat adds u to the "bc_rat" field.
func (m *PermsMutation) AddBcRat(u int16) {
	if m.addbc_rat != nil {
		*m.addbc_rat += u
	} else {
		m.addbc_rat = &u
	}
}

// AddedBcRat returns the value that was added to the "bc_rat" field in this mutation.
func (m *PermsMutation) AddedBcRat() (r int16, exists bool) {
	v := m.addbc_rat
	if v == nil {
		return
	}
	return *v, true
}

// ClearBcRat clears the value of the "bc_rat" field.
func (m *PermsMutation) ClearBcRat() {
	m.bc_rat = nil
	m.addbc_rat = nil
	m.clearedFields[perms.FieldBcRat] = struct{}{}
}

// BcRatCleared returns if the "bc_rat" field was cleared in this mutation.
func (m *PermsMutation) BcRatCleared() bool {
	_, ok := m.clearedFields[perms.FieldBcRat]
	return ok
}

// ResetBcRat resets all changes to the "bc_rat" field.
func (m *PermsMutation) ResetBcRat() {
	m.bc_rat = nil
	m.addbc_rat = nil
	delete(m.clearedFields, perms.FieldBcRat)
}

// SetTotArea sets the "tot_area" field.
func (m *PermsMutation) SetTotArea(u uint32) {
	m.tot_area = &u
	m.addtot_area = nil
}

// TotArea returns the value of the "tot_area" field in the mutation.
func (m *PermsMutation) TotArea() (r uint32, exists bool) {
	v := m.tot_area
	if v == nil {
		return
	}
	return *v, true
}

// OldTotArea returns the old "tot_area" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldTotArea(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotArea: %w", err)
	}
	return oldValue.TotArea, nil
}

// AddTotArea adds u to the "tot_area" field.
func (m *PermsMutation) AddTotArea(u int32) {
	if m.addtot_area != nil {
		*m.addtot_area += u
	} else {
		m.addtot_area = &u
	}
}

// AddedTotArea returns the value that was added to the "tot_area" field in this mutation.
func (m *PermsMutation) AddedTotArea() (r int32, exists bool) {
	v := m.addtot_area
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotArea clears the value of the "tot_area" field.
func (m *PermsMutation) ClearTotArea() {
	m.tot_area = nil
	m.addtot_area = nil
	m.clearedFields[perms.FieldTotArea] = struct{}{}
}

// TotAreaCleared returns if the "tot_area" field was cleared in this mutation.
func (m *PermsMutation) TotAreaCleared() bool {
	_, ok := m.clearedFields[perms.FieldTotArea]
	return ok
}

// ResetTotArea resets all changes to the "tot_area" field.
func (m *PermsMutation) ResetTotArea() {
	m.tot_area = nil
	m.addtot_area = nil
	delete(m.clearedFields, perms.FieldTotArea)
}

// SetVlRatEstmTotArea sets the "vl_rat_estm_tot_area" field.
func (m *PermsMutation) SetVlRatEstmTotArea(u uint32) {
	m.vl_rat_estm_tot_area = &u
	m.addvl_rat_estm_tot_area = nil
}

// VlRatEstmTotArea returns the value of the "vl_rat_estm_tot_area" field in the mutation.
func (m *PermsMutation) VlRatEstmTotArea() (r uint32, exists bool) {
	v := m.vl_rat_estm_tot_area
	if v == nil {
		return
	}
	return *v, true
}

// OldVlRatEstmTotArea returns the old "vl_rat_estm_tot_area" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldVlRatEstmTotArea(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVlRatEstmTotArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVlRatEstmTotArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVlRatEstmTotArea: %w", err)
	}
	return oldValue.VlRatEstmTotArea, nil
}

// AddVlRatEstmTotArea adds u to the "vl_rat_estm_tot_area" field.
func (m *PermsMutation) AddVlRatEstmTotArea(u int32) {
	if m.addvl_rat_estm_tot_area != nil {
		*m.addvl_rat_estm_tot_area += u
	} else {
		m.addvl_rat_estm_tot_area = &u
	}
}

// AddedVlRatEstmTotArea returns the value that was added to the "vl_rat_estm_tot_area" field in this mutation.
func (m *PermsMutation) AddedVlRatEstmTotArea() (r int32, exists bool) {
	v := m.addvl_rat_estm_tot_area
	if v == nil {
		return
	}
	return *v, true
}

// ClearVlRatEstmTotArea clears the value of the "vl_rat_estm_tot_area" field.
func (m *PermsMutation) ClearVlRatEstmTotArea() {
	m.vl_rat_estm_tot_area = nil
	m.addvl_rat_estm_tot_area = nil
	m.clearedFields[perms.FieldVlRatEstmTotArea] = struct{}{}
}

// VlRatEstmTotAreaCleared returns if the "vl_rat_estm_tot_area" field was cleared in this mutation.
func (m *PermsMutation) VlRatEstmTotAreaCleared() bool {
	_, ok := m.clearedFields[perms.FieldVlRatEstmTotArea]
	return ok
}

// ResetVlRatEstmTotArea resets all changes to the "vl_rat_estm_tot_area" field.
func (m *PermsMutation) ResetVlRatEstmTotArea() {
	m.vl_rat_estm_tot_area = nil
	m.addvl_rat_estm_tot_area = nil
	delete(m.clearedFields, perms.FieldVlRatEstmTotArea)
}

// SetVlRat sets the "vl_rat" field.
func (m *PermsMutation) SetVlRat(u uint16) {
	m.vl_rat = &u
	m.addvl_rat = nil
}

// VlRat returns the value of the "vl_rat" field in the mutation.
func (m *PermsMutation) VlRat() (r uint16, exists bool) {
	v := m.vl_rat
	if v == nil {
		return
	}
	return *v, true
}

// OldVlRat returns the old "vl_rat" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldVlRat(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVlRat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVlRat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVlRat: %w", err)
	}
	return oldValue.VlRat, nil
}

// AddVlRat adds u to the "vl_rat" field.
func (m *PermsMutation) AddVlRat(u int16) {
	if m.addvl_rat != nil {
		*m.addvl_rat += u
	} else {
		m.addvl_rat = &u
	}
}

// AddedVlRat returns the value that was added to the "vl_rat" field in this mutation.
func (m *PermsMutation) AddedVlRat() (r int16, exists bool) {
	v := m.addvl_rat
	if v == nil {
		return
	}
	return *v, true
}

// ClearVlRat clears the value of the "vl_rat" field.
func (m *PermsMutation) ClearVlRat() {
	m.vl_rat = nil
	m.addvl_rat = nil
	m.clearedFields[perms.FieldVlRat] = struct{}{}
}

// VlRatCleared returns if the "vl_rat" field was cleared in this mutation.
func (m *PermsMutation) VlRatCleared() bool {
	_, ok := m.clearedFields[perms.FieldVlRat]
	return ok
}

// ResetVlRat resets all changes to the "vl_rat" field.
func (m *PermsMutation) ResetVlRat() {
	m.vl_rat = nil
	m.addvl_rat = nil
	delete(m.clearedFields, perms.FieldVlRat)
}

// SetMainBldCnt sets the "main_bld_cnt" field.
func (m *PermsMutation) SetMainBldCnt(u uint16) {
	m.main_bld_cnt = &u
	m.addmain_bld_cnt = nil
}

// MainBldCnt returns the value of the "main_bld_cnt" field in the mutation.
func (m *PermsMutation) MainBldCnt() (r uint16, exists bool) {
	v := m.main_bld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldMainBldCnt returns the old "main_bld_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldMainBldCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainBldCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainBldCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainBldCnt: %w", err)
	}
	return oldValue.MainBldCnt, nil
}

// AddMainBldCnt adds u to the "main_bld_cnt" field.
func (m *PermsMutation) AddMainBldCnt(u int16) {
	if m.addmain_bld_cnt != nil {
		*m.addmain_bld_cnt += u
	} else {
		m.addmain_bld_cnt = &u
	}
}

// AddedMainBldCnt returns the value that was added to the "main_bld_cnt" field in this mutation.
func (m *PermsMutation) AddedMainBldCnt() (r int16, exists bool) {
	v := m.addmain_bld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearMainBldCnt clears the value of the "main_bld_cnt" field.
func (m *PermsMutation) ClearMainBldCnt() {
	m.main_bld_cnt = nil
	m.addmain_bld_cnt = nil
	m.clearedFields[perms.FieldMainBldCnt] = struct{}{}
}

// MainBldCntCleared returns if the "main_bld_cnt" field was cleared in this mutation.
func (m *PermsMutation) MainBldCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldMainBldCnt]
	return ok
}

// ResetMainBldCnt resets all changes to the "main_bld_cnt" field.
func (m *PermsMutation) ResetMainBldCnt() {
	m.main_bld_cnt = nil
	m.addmain_bld_cnt = nil
	delete(m.clearedFields, perms.FieldMainBldCnt)
}

// SetAtchBldDongCnt sets the "atch_bld_dong_cnt" field.
func (m *PermsMutation) SetAtchBldDongCnt(u uint16) {
	m.atch_bld_dong_cnt = &u
	m.addatch_bld_dong_cnt = nil
}

// AtchBldDongCnt returns the value of the "atch_bld_dong_cnt" field in the mutation.
func (m *PermsMutation) AtchBldDongCnt() (r uint16, exists bool) {
	v := m.atch_bld_dong_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldAtchBldDongCnt returns the old "atch_bld_dong_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldAtchBldDongCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAtchBldDongCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAtchBldDongCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAtchBldDongCnt: %w", err)
	}
	return oldValue.AtchBldDongCnt, nil
}

// AddAtchBldDongCnt adds u to the "atch_bld_dong_cnt" field.
func (m *PermsMutation) AddAtchBldDongCnt(u int16) {
	if m.addatch_bld_dong_cnt != nil {
		*m.addatch_bld_dong_cnt += u
	} else {
		m.addatch_bld_dong_cnt = &u
	}
}

// AddedAtchBldDongCnt returns the value that was added to the "atch_bld_dong_cnt" field in this mutation.
func (m *PermsMutation) AddedAtchBldDongCnt() (r int16, exists bool) {
	v := m.addatch_bld_dong_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearAtchBldDongCnt clears the value of the "atch_bld_dong_cnt" field.
func (m *PermsMutation) ClearAtchBldDongCnt() {
	m.atch_bld_dong_cnt = nil
	m.addatch_bld_dong_cnt = nil
	m.clearedFields[perms.FieldAtchBldDongCnt] = struct{}{}
}

// AtchBldDongCntCleared returns if the "atch_bld_dong_cnt" field was cleared in this mutation.
func (m *PermsMutation) AtchBldDongCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldAtchBldDongCnt]
	return ok
}

// ResetAtchBldDongCnt resets all changes to the "atch_bld_dong_cnt" field.
func (m *PermsMutation) ResetAtchBldDongCnt() {
	m.atch_bld_dong_cnt = nil
	m.addatch_bld_dong_cnt = nil
	delete(m.clearedFields, perms.FieldAtchBldDongCnt)
}

// SetMainPurpsCd sets the "main_purps_cd" field.
func (m *PermsMutation) SetMainPurpsCd(s string) {
	m.main_purps_cd = &s
}

// MainPurpsCd returns the value of the "main_purps_cd" field in the mutation.
func (m *PermsMutation) MainPurpsCd() (r string, exists bool) {
	v := m.main_purps_cd
	if v == nil {
		return
	}
	return *v, true
}

// OldMainPurpsCd returns the old "main_purps_cd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldMainPurpsCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainPurpsCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainPurpsCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainPurpsCd: %w", err)
	}
	return oldValue.MainPurpsCd, nil
}

// ClearMainPurpsCd clears the value of the "main_purps_cd" field.
func (m *PermsMutation) ClearMainPurpsCd() {
	m.main_purps_cd = nil
	m.clearedFields[perms.FieldMainPurpsCd] = struct{}{}
}

// MainPurpsCdCleared returns if the "main_purps_cd" field was cleared in this mutation.
func (m *PermsMutation) MainPurpsCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldMainPurpsCd]
	return ok
}

// ResetMainPurpsCd resets all changes to the "main_purps_cd" field.
func (m *PermsMutation) ResetMainPurpsCd() {
	m.main_purps_cd = nil
	delete(m.clearedFields, perms.FieldMainPurpsCd)
}

// SetMainPurpsCdNm sets the "main_purps_cd_nm" field.
func (m *PermsMutation) SetMainPurpsCdNm(s string) {
	m.main_purps_cd_nm = &s
}

// MainPurpsCdNm returns the value of the "main_purps_cd_nm" field in the mutation.
func (m *PermsMutation) MainPurpsCdNm() (r string, exists bool) {
	v := m.main_purps_cd_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldMainPurpsCdNm returns the old "main_purps_cd_nm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldMainPurpsCdNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMainPurpsCdNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMainPurpsCdNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMainPurpsCdNm: %w", err)
	}
	return oldValue.MainPurpsCdNm, nil
}

// ClearMainPurpsCdNm clears the value of the "main_purps_cd_nm" field.
func (m *PermsMutation) ClearMainPurpsCdNm() {
	m.main_purps_cd_nm = nil
	m.clearedFields[perms.FieldMainPurpsCdNm] = struct{}{}
}

// MainPurpsCdNmCleared returns if the "main_purps_cd_nm" field was cleared in this mutation.
func (m *PermsMutation) MainPurpsCdNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldMainPurpsCdNm]
	return ok
}

// ResetMainPurpsCdNm resets all changes to the "main_purps_cd_nm" field.
func (m *PermsMutation) ResetMainPurpsCdNm() {
	m.main_purps_cd_nm = nil
	delete(m.clearedFields, perms.FieldMainPurpsCdNm)
}

// SetHhldCnt sets the "hhld_cnt" field.
func (m *PermsMutation) SetHhldCnt(u uint16) {
	m.hhld_cnt = &u
	m.addhhld_cnt = nil
}

// HhldCnt returns the value of the "hhld_cnt" field in the mutation.
func (m *PermsMutation) HhldCnt() (r uint16, exists bool) {
	v := m.hhld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldHhldCnt returns the old "hhld_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldHhldCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHhldCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHhldCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHhldCnt: %w", err)
	}
	return oldValue.HhldCnt, nil
}

// AddHhldCnt adds u to the "hhld_cnt" field.
func (m *PermsMutation) AddHhldCnt(u int16) {
	if m.addhhld_cnt != nil {
		*m.addhhld_cnt += u
	} else {
		m.addhhld_cnt = &u
	}
}

// AddedHhldCnt returns the value that was added to the "hhld_cnt" field in this mutation.
func (m *PermsMutation) AddedHhldCnt() (r int16, exists bool) {
	v := m.addhhld_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearHhldCnt clears the value of the "hhld_cnt" field.
func (m *PermsMutation) ClearHhldCnt() {
	m.hhld_cnt = nil
	m.addhhld_cnt = nil
	m.clearedFields[perms.FieldHhldCnt] = struct{}{}
}

// HhldCntCleared returns if the "hhld_cnt" field was cleared in this mutation.
func (m *PermsMutation) HhldCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldHhldCnt]
	return ok
}

// ResetHhldCnt resets all changes to the "hhld_cnt" field.
func (m *PermsMutation) ResetHhldCnt() {
	m.hhld_cnt = nil
	m.addhhld_cnt = nil
	delete(m.clearedFields, perms.FieldHhldCnt)
}

// SetHoCnt sets the "ho_cnt" field.
func (m *PermsMutation) SetHoCnt(u uint16) {
	m.ho_cnt = &u
	m.addho_cnt = nil
}

// HoCnt returns the value of the "ho_cnt" field in the mutation.
func (m *PermsMutation) HoCnt() (r uint16, exists bool) {
	v := m.ho_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldHoCnt returns the old "ho_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldHoCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHoCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHoCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHoCnt: %w", err)
	}
	return oldValue.HoCnt, nil
}

// AddHoCnt adds u to the "ho_cnt" field.
func (m *PermsMutation) AddHoCnt(u int16) {
	if m.addho_cnt != nil {
		*m.addho_cnt += u
	} else {
		m.addho_cnt = &u
	}
}

// AddedHoCnt returns the value that was added to the "ho_cnt" field in this mutation.
func (m *PermsMutation) AddedHoCnt() (r int16, exists bool) {
	v := m.addho_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearHoCnt clears the value of the "ho_cnt" field.
func (m *PermsMutation) ClearHoCnt() {
	m.ho_cnt = nil
	m.addho_cnt = nil
	m.clearedFields[perms.FieldHoCnt] = struct{}{}
}

// HoCntCleared returns if the "ho_cnt" field was cleared in this mutation.
func (m *PermsMutation) HoCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldHoCnt]
	return ok
}

// ResetHoCnt resets all changes to the "ho_cnt" field.
func (m *PermsMutation) ResetHoCnt() {
	m.ho_cnt = nil
	m.addho_cnt = nil
	delete(m.clearedFields, perms.FieldHoCnt)
}

// SetFmlyCnt sets the "fmly_cnt" field.
func (m *PermsMutation) SetFmlyCnt(u uint16) {
	m.fmly_cnt = &u
	m.addfmly_cnt = nil
}

// FmlyCnt returns the value of the "fmly_cnt" field in the mutation.
func (m *PermsMutation) FmlyCnt() (r uint16, exists bool) {
	v := m.fmly_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldFmlyCnt returns the old "fmly_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldFmlyCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFmlyCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFmlyCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFmlyCnt: %w", err)
	}
	return oldValue.FmlyCnt, nil
}

// AddFmlyCnt adds u to the "fmly_cnt" field.
func (m *PermsMutation) AddFmlyCnt(u int16) {
	if m.addfmly_cnt != nil {
		*m.addfmly_cnt += u
	} else {
		m.addfmly_cnt = &u
	}
}

// AddedFmlyCnt returns the value that was added to the "fmly_cnt" field in this mutation.
func (m *PermsMutation) AddedFmlyCnt() (r int16, exists bool) {
	v := m.addfmly_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearFmlyCnt clears the value of the "fmly_cnt" field.
func (m *PermsMutation) ClearFmlyCnt() {
	m.fmly_cnt = nil
	m.addfmly_cnt = nil
	m.clearedFields[perms.FieldFmlyCnt] = struct{}{}
}

// FmlyCntCleared returns if the "fmly_cnt" field was cleared in this mutation.
func (m *PermsMutation) FmlyCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldFmlyCnt]
	return ok
}

// ResetFmlyCnt resets all changes to the "fmly_cnt" field.
func (m *PermsMutation) ResetFmlyCnt() {
	m.fmly_cnt = nil
	m.addfmly_cnt = nil
	delete(m.clearedFields, perms.FieldFmlyCnt)
}

// SetTotPkngCnt sets the "tot_pkng_cnt" field.
func (m *PermsMutation) SetTotPkngCnt(u uint16) {
	m.tot_pkng_cnt = &u
	m.addtot_pkng_cnt = nil
}

// TotPkngCnt returns the value of the "tot_pkng_cnt" field in the mutation.
func (m *PermsMutation) TotPkngCnt() (r uint16, exists bool) {
	v := m.tot_pkng_cnt
	if v == nil {
		return
	}
	return *v, true
}

// OldTotPkngCnt returns the old "tot_pkng_cnt" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldTotPkngCnt(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotPkngCnt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotPkngCnt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotPkngCnt: %w", err)
	}
	return oldValue.TotPkngCnt, nil
}

// AddTotPkngCnt adds u to the "tot_pkng_cnt" field.
func (m *PermsMutation) AddTotPkngCnt(u int16) {
	if m.addtot_pkng_cnt != nil {
		*m.addtot_pkng_cnt += u
	} else {
		m.addtot_pkng_cnt = &u
	}
}

// AddedTotPkngCnt returns the value that was added to the "tot_pkng_cnt" field in this mutation.
func (m *PermsMutation) AddedTotPkngCnt() (r int16, exists bool) {
	v := m.addtot_pkng_cnt
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotPkngCnt clears the value of the "tot_pkng_cnt" field.
func (m *PermsMutation) ClearTotPkngCnt() {
	m.tot_pkng_cnt = nil
	m.addtot_pkng_cnt = nil
	m.clearedFields[perms.FieldTotPkngCnt] = struct{}{}
}

// TotPkngCntCleared returns if the "tot_pkng_cnt" field was cleared in this mutation.
func (m *PermsMutation) TotPkngCntCleared() bool {
	_, ok := m.clearedFields[perms.FieldTotPkngCnt]
	return ok
}

// ResetTotPkngCnt resets all changes to the "tot_pkng_cnt" field.
func (m *PermsMutation) ResetTotPkngCnt() {
	m.tot_pkng_cnt = nil
	m.addtot_pkng_cnt = nil
	delete(m.clearedFields, perms.FieldTotPkngCnt)
}

// SetStcnsSchedDay sets the "stcns_sched_day" field.
func (m *PermsMutation) SetStcnsSchedDay(s string) {
	m.stcns_sched_day = &s
}

// StcnsSchedDay returns the value of the "stcns_sched_day" field in the mutation.
func (m *PermsMutation) StcnsSchedDay() (r string, exists bool) {
	v := m.stcns_sched_day
	if v == nil {
		return
	}
	return *v, true
}

// OldStcnsSchedDay returns the old "stcns_sched_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldStcnsSchedDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStcnsSchedDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStcnsSchedDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStcnsSchedDay: %w", err)
	}
	return oldValue.StcnsSchedDay, nil
}

// ClearStcnsSchedDay clears the value of the "stcns_sched_day" field.
func (m *PermsMutation) ClearStcnsSchedDay() {
	m.stcns_sched_day = nil
	m.clearedFields[perms.FieldStcnsSchedDay] = struct{}{}
}

// StcnsSchedDayCleared returns if the "stcns_sched_day" field was cleared in this mutation.
func (m *PermsMutation) StcnsSchedDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldStcnsSchedDay]
	return ok
}

// ResetStcnsSchedDay resets all changes to the "stcns_sched_day" field.
func (m *PermsMutation) ResetStcnsSchedDay() {
	m.stcns_sched_day = nil
	delete(m.clearedFields, perms.FieldStcnsSchedDay)
}

// SetStcnsDelayDay sets the "stcns_delay_day" field.
func (m *PermsMutation) SetStcnsDelayDay(s string) {
	m.stcns_delay_day = &s
}

// StcnsDelayDay returns the value of the "stcns_delay_day" field in the mutation.
func (m *PermsMutation) StcnsDelayDay() (r string, exists bool) {
	v := m.stcns_delay_day
	if v == nil {
		return
	}
	return *v, true
}

// OldStcnsDelayDay returns the old "stcns_delay_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldStcnsDelayDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStcnsDelayDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStcnsDelayDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStcnsDelayDay: %w", err)
	}
	return oldValue.StcnsDelayDay, nil
}

// ClearStcnsDelayDay clears the value of the "stcns_delay_day" field.
func (m *PermsMutation) ClearStcnsDelayDay() {
	m.stcns_delay_day = nil
	m.clearedFields[perms.FieldStcnsDelayDay] = struct{}{}
}

// StcnsDelayDayCleared returns if the "stcns_delay_day" field was cleared in this mutation.
func (m *PermsMutation) StcnsDelayDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldStcnsDelayDay]
	return ok
}

// ResetStcnsDelayDay resets all changes to the "stcns_delay_day" field.
func (m *PermsMutation) ResetStcnsDelayDay() {
	m.stcns_delay_day = nil
	delete(m.clearedFields, perms.FieldStcnsDelayDay)
}

// SetRealStcnsDay sets the "real_stcns_day" field.
func (m *PermsMutation) SetRealStcnsDay(s string) {
	m.real_stcns_day = &s
}

// RealStcnsDay returns the value of the "real_stcns_day" field in the mutation.
func (m *PermsMutation) RealStcnsDay() (r string, exists bool) {
	v := m.real_stcns_day
	if v == nil {
		return
	}
	return *v, true
}

// OldRealStcnsDay returns the old "real_stcns_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldRealStcnsDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealStcnsDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealStcnsDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealStcnsDay: %w", err)
	}
	return oldValue.RealStcnsDay, nil
}

// ClearRealStcnsDay clears the value of the "real_stcns_day" field.
func (m *PermsMutation) ClearRealStcnsDay() {
	m.real_stcns_day = nil
	m.clearedFields[perms.FieldRealStcnsDay] = struct{}{}
}

// RealStcnsDayCleared returns if the "real_stcns_day" field was cleared in this mutation.
func (m *PermsMutation) RealStcnsDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldRealStcnsDay]
	return ok
}

// ResetRealStcnsDay resets all changes to the "real_stcns_day" field.
func (m *PermsMutation) ResetRealStcnsDay() {
	m.real_stcns_day = nil
	delete(m.clearedFields, perms.FieldRealStcnsDay)
}

// SetArchPmsDay sets the "arch_pms_day" field.
func (m *PermsMutation) SetArchPmsDay(s string) {
	m.arch_pms_day = &s
}

// ArchPmsDay returns the value of the "arch_pms_day" field in the mutation.
func (m *PermsMutation) ArchPmsDay() (r string, exists bool) {
	v := m.arch_pms_day
	if v == nil {
		return
	}
	return *v, true
}

// OldArchPmsDay returns the old "arch_pms_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldArchPmsDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArchPmsDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArchPmsDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArchPmsDay: %w", err)
	}
	return oldValue.ArchPmsDay, nil
}

// ClearArchPmsDay clears the value of the "arch_pms_day" field.
func (m *PermsMutation) ClearArchPmsDay() {
	m.arch_pms_day = nil
	m.clearedFields[perms.FieldArchPmsDay] = struct{}{}
}

// ArchPmsDayCleared returns if the "arch_pms_day" field was cleared in this mutation.
func (m *PermsMutation) ArchPmsDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldArchPmsDay]
	return ok
}

// ResetArchPmsDay resets all changes to the "arch_pms_day" field.
func (m *PermsMutation) ResetArchPmsDay() {
	m.arch_pms_day = nil
	delete(m.clearedFields, perms.FieldArchPmsDay)
}

// SetUseAprDay sets the "use_apr_day" field.
func (m *PermsMutation) SetUseAprDay(s string) {
	m.use_apr_day = &s
}

// UseAprDay returns the value of the "use_apr_day" field in the mutation.
func (m *PermsMutation) UseAprDay() (r string, exists bool) {
	v := m.use_apr_day
	if v == nil {
		return
	}
	return *v, true
}

// OldUseAprDay returns the old "use_apr_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldUseAprDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseAprDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseAprDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseAprDay: %w", err)
	}
	return oldValue.UseAprDay, nil
}

// ClearUseAprDay clears the value of the "use_apr_day" field.
func (m *PermsMutation) ClearUseAprDay() {
	m.use_apr_day = nil
	m.clearedFields[perms.FieldUseAprDay] = struct{}{}
}

// UseAprDayCleared returns if the "use_apr_day" field was cleared in this mutation.
func (m *PermsMutation) UseAprDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldUseAprDay]
	return ok
}

// ResetUseAprDay resets all changes to the "use_apr_day" field.
func (m *PermsMutation) ResetUseAprDay() {
	m.use_apr_day = nil
	delete(m.clearedFields, perms.FieldUseAprDay)
}

// SetPlatPlc sets the "platPlc" field.
func (m *PermsMutation) SetPlatPlc(s string) {
	m.platPlc = &s
}

// PlatPlc returns the value of the "platPlc" field in the mutation.
func (m *PermsMutation) PlatPlc() (r string, exists bool) {
	v := m.platPlc
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatPlc returns the old "platPlc" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldPlatPlc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatPlc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatPlc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatPlc: %w", err)
	}
	return oldValue.PlatPlc, nil
}

// ClearPlatPlc clears the value of the "platPlc" field.
func (m *PermsMutation) ClearPlatPlc() {
	m.platPlc = nil
	m.clearedFields[perms.FieldPlatPlc] = struct{}{}
}

// PlatPlcCleared returns if the "platPlc" field was cleared in this mutation.
func (m *PermsMutation) PlatPlcCleared() bool {
	_, ok := m.clearedFields[perms.FieldPlatPlc]
	return ok
}

// ResetPlatPlc resets all changes to the "platPlc" field.
func (m *PermsMutation) ResetPlatPlc() {
	m.platPlc = nil
	delete(m.clearedFields, perms.FieldPlatPlc)
}

// SetSigunguCd sets the "sigunguCd" field.
func (m *PermsMutation) SetSigunguCd(s string) {
	m.sigunguCd = &s
}

// SigunguCd returns the value of the "sigunguCd" field in the mutation.
func (m *PermsMutation) SigunguCd() (r string, exists bool) {
	v := m.sigunguCd
	if v == nil {
		return
	}
	return *v, true
}

// OldSigunguCd returns the old "sigunguCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldSigunguCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSigunguCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSigunguCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSigunguCd: %w", err)
	}
	return oldValue.SigunguCd, nil
}

// ClearSigunguCd clears the value of the "sigunguCd" field.
func (m *PermsMutation) ClearSigunguCd() {
	m.sigunguCd = nil
	m.clearedFields[perms.FieldSigunguCd] = struct{}{}
}

// SigunguCdCleared returns if the "sigunguCd" field was cleared in this mutation.
func (m *PermsMutation) SigunguCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldSigunguCd]
	return ok
}

// ResetSigunguCd resets all changes to the "sigunguCd" field.
func (m *PermsMutation) ResetSigunguCd() {
	m.sigunguCd = nil
	delete(m.clearedFields, perms.FieldSigunguCd)
}

// SetBjdongCd sets the "bjdongCd" field.
func (m *PermsMutation) SetBjdongCd(s string) {
	m.bjdongCd = &s
}

// BjdongCd returns the value of the "bjdongCd" field in the mutation.
func (m *PermsMutation) BjdongCd() (r string, exists bool) {
	v := m.bjdongCd
	if v == nil {
		return
	}
	return *v, true
}

// OldBjdongCd returns the old "bjdongCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldBjdongCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBjdongCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBjdongCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBjdongCd: %w", err)
	}
	return oldValue.BjdongCd, nil
}

// ClearBjdongCd clears the value of the "bjdongCd" field.
func (m *PermsMutation) ClearBjdongCd() {
	m.bjdongCd = nil
	m.clearedFields[perms.FieldBjdongCd] = struct{}{}
}

// BjdongCdCleared returns if the "bjdongCd" field was cleared in this mutation.
func (m *PermsMutation) BjdongCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldBjdongCd]
	return ok
}

// ResetBjdongCd resets all changes to the "bjdongCd" field.
func (m *PermsMutation) ResetBjdongCd() {
	m.bjdongCd = nil
	delete(m.clearedFields, perms.FieldBjdongCd)
}

// SetPlatGbCd sets the "platGbCd" field.
func (m *PermsMutation) SetPlatGbCd(s string) {
	m.platGbCd = &s
}

// PlatGbCd returns the value of the "platGbCd" field in the mutation.
func (m *PermsMutation) PlatGbCd() (r string, exists bool) {
	v := m.platGbCd
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatGbCd returns the old "platGbCd" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldPlatGbCd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatGbCd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatGbCd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatGbCd: %w", err)
	}
	return oldValue.PlatGbCd, nil
}

// ClearPlatGbCd clears the value of the "platGbCd" field.
func (m *PermsMutation) ClearPlatGbCd() {
	m.platGbCd = nil
	m.clearedFields[perms.FieldPlatGbCd] = struct{}{}
}

// PlatGbCdCleared returns if the "platGbCd" field was cleared in this mutation.
func (m *PermsMutation) PlatGbCdCleared() bool {
	_, ok := m.clearedFields[perms.FieldPlatGbCd]
	return ok
}

// ResetPlatGbCd resets all changes to the "platGbCd" field.
func (m *PermsMutation) ResetPlatGbCd() {
	m.platGbCd = nil
	delete(m.clearedFields, perms.FieldPlatGbCd)
}

// SetBun sets the "bun" field.
func (m *PermsMutation) SetBun(s string) {
	m.bun = &s
}

// Bun returns the value of the "bun" field in the mutation.
func (m *PermsMutation) Bun() (r string, exists bool) {
	v := m.bun
	if v == nil {
		return
	}
	return *v, true
}

// OldBun returns the old "bun" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldBun(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBun is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBun requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBun: %w", err)
	}
	return oldValue.Bun, nil
}

// ClearBun clears the value of the "bun" field.
func (m *PermsMutation) ClearBun() {
	m.bun = nil
	m.clearedFields[perms.FieldBun] = struct{}{}
}

// BunCleared returns if the "bun" field was cleared in this mutation.
func (m *PermsMutation) BunCleared() bool {
	_, ok := m.clearedFields[perms.FieldBun]
	return ok
}

// ResetBun resets all changes to the "bun" field.
func (m *PermsMutation) ResetBun() {
	m.bun = nil
	delete(m.clearedFields, perms.FieldBun)
}

// SetJi sets the "ji" field.
func (m *PermsMutation) SetJi(s string) {
	m.ji = &s
}

// Ji returns the value of the "ji" field in the mutation.
func (m *PermsMutation) Ji() (r string, exists bool) {
	v := m.ji
	if v == nil {
		return
	}
	return *v, true
}

// OldJi returns the old "ji" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldJi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJi: %w", err)
	}
	return oldValue.Ji, nil
}

// ClearJi clears the value of the "ji" field.
func (m *PermsMutation) ClearJi() {
	m.ji = nil
	m.clearedFields[perms.FieldJi] = struct{}{}
}

// JiCleared returns if the "ji" field was cleared in this mutation.
func (m *PermsMutation) JiCleared() bool {
	_, ok := m.clearedFields[perms.FieldJi]
	return ok
}

// ResetJi resets all changes to the "ji" field.
func (m *PermsMutation) ResetJi() {
	m.ji = nil
	delete(m.clearedFields, perms.FieldJi)
}

// SetMgmPmsrgstPk sets the "mgm_pmsrgst_pk" field.
func (m *PermsMutation) SetMgmPmsrgstPk(s string) {
	m.mgm_pmsrgst_pk = &s
}

// MgmPmsrgstPk returns the value of the "mgm_pmsrgst_pk" field in the mutation.
func (m *PermsMutation) MgmPmsrgstPk() (r string, exists bool) {
	v := m.mgm_pmsrgst_pk
	if v == nil {
		return
	}
	return *v, true
}

// OldMgmPmsrgstPk returns the old "mgm_pmsrgst_pk" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldMgmPmsrgstPk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMgmPmsrgstPk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMgmPmsrgstPk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMgmPmsrgstPk: %w", err)
	}
	return oldValue.MgmPmsrgstPk, nil
}

// ResetMgmPmsrgstPk resets all changes to the "mgm_pmsrgst_pk" field.
func (m *PermsMutation) ResetMgmPmsrgstPk() {
	m.mgm_pmsrgst_pk = nil
}

// SetSplotNm sets the "splotNm" field.
func (m *PermsMutation) SetSplotNm(s string) {
	m.splotNm = &s
}

// SplotNm returns the value of the "splotNm" field in the mutation.
func (m *PermsMutation) SplotNm() (r string, exists bool) {
	v := m.splotNm
	if v == nil {
		return
	}
	return *v, true
}

// OldSplotNm returns the old "splotNm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldSplotNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSplotNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSplotNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSplotNm: %w", err)
	}
	return oldValue.SplotNm, nil
}

// ClearSplotNm clears the value of the "splotNm" field.
func (m *PermsMutation) ClearSplotNm() {
	m.splotNm = nil
	m.clearedFields[perms.FieldSplotNm] = struct{}{}
}

// SplotNmCleared returns if the "splotNm" field was cleared in this mutation.
func (m *PermsMutation) SplotNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldSplotNm]
	return ok
}

// ResetSplotNm resets all changes to the "splotNm" field.
func (m *PermsMutation) ResetSplotNm() {
	m.splotNm = nil
	delete(m.clearedFields, perms.FieldSplotNm)
}

// SetBlock sets the "block" field.
func (m *PermsMutation) SetBlock(s string) {
	m.block = &s
}

// Block returns the value of the "block" field in the mutation.
func (m *PermsMutation) Block() (r string, exists bool) {
	v := m.block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "block" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldBlock(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// ClearBlock clears the value of the "block" field.
func (m *PermsMutation) ClearBlock() {
	m.block = nil
	m.clearedFields[perms.FieldBlock] = struct{}{}
}

// BlockCleared returns if the "block" field was cleared in this mutation.
func (m *PermsMutation) BlockCleared() bool {
	_, ok := m.clearedFields[perms.FieldBlock]
	return ok
}

// ResetBlock resets all changes to the "block" field.
func (m *PermsMutation) ResetBlock() {
	m.block = nil
	delete(m.clearedFields, perms.FieldBlock)
}

// SetLot sets the "lot" field.
func (m *PermsMutation) SetLot(s string) {
	m.lot = &s
}

// Lot returns the value of the "lot" field in the mutation.
func (m *PermsMutation) Lot() (r string, exists bool) {
	v := m.lot
	if v == nil {
		return
	}
	return *v, true
}

// OldLot returns the old "lot" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldLot(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLot: %w", err)
	}
	return oldValue.Lot, nil
}

// ClearLot clears the value of the "lot" field.
func (m *PermsMutation) ClearLot() {
	m.lot = nil
	m.clearedFields[perms.FieldLot] = struct{}{}
}

// LotCleared returns if the "lot" field was cleared in this mutation.
func (m *PermsMutation) LotCleared() bool {
	_, ok := m.clearedFields[perms.FieldLot]
	return ok
}

// ResetLot resets all changes to the "lot" field.
func (m *PermsMutation) ResetLot() {
	m.lot = nil
	delete(m.clearedFields, perms.FieldLot)
}

// SetCrtnDay sets the "crtn_day" field.
func (m *PermsMutation) SetCrtnDay(s string) {
	m.crtn_day = &s
}

// CrtnDay returns the value of the "crtn_day" field in the mutation.
func (m *PermsMutation) CrtnDay() (r string, exists bool) {
	v := m.crtn_day
	if v == nil {
		return
	}
	return *v, true
}

// OldCrtnDay returns the old "crtn_day" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldCrtnDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrtnDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrtnDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrtnDay: %w", err)
	}
	return oldValue.CrtnDay, nil
}

// ClearCrtnDay clears the value of the "crtn_day" field.
func (m *PermsMutation) ClearCrtnDay() {
	m.crtn_day = nil
	m.clearedFields[perms.FieldCrtnDay] = struct{}{}
}

// CrtnDayCleared returns if the "crtn_day" field was cleared in this mutation.
func (m *PermsMutation) CrtnDayCleared() bool {
	_, ok := m.clearedFields[perms.FieldCrtnDay]
	return ok
}

// ResetCrtnDay resets all changes to the "crtn_day" field.
func (m *PermsMutation) ResetCrtnDay() {
	m.crtn_day = nil
	delete(m.clearedFields, perms.FieldCrtnDay)
}

// SetRnum sets the "rnum" field.
func (m *PermsMutation) SetRnum(u uint16) {
	m.rnum = &u
	m.addrnum = nil
}

// Rnum returns the value of the "rnum" field in the mutation.
func (m *PermsMutation) Rnum() (r uint16, exists bool) {
	v := m.rnum
	if v == nil {
		return
	}
	return *v, true
}

// OldRnum returns the old "rnum" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldRnum(ctx context.Context) (v uint16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRnum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRnum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRnum: %w", err)
	}
	return oldValue.Rnum, nil
}

// AddRnum adds u to the "rnum" field.
func (m *PermsMutation) AddRnum(u int16) {
	if m.addrnum != nil {
		*m.addrnum += u
	} else {
		m.addrnum = &u
	}
}

// AddedRnum returns the value that was added to the "rnum" field in this mutation.
func (m *PermsMutation) AddedRnum() (r int16, exists bool) {
	v := m.addrnum
	if v == nil {
		return
	}
	return *v, true
}

// ClearRnum clears the value of the "rnum" field.
func (m *PermsMutation) ClearRnum() {
	m.rnum = nil
	m.addrnum = nil
	m.clearedFields[perms.FieldRnum] = struct{}{}
}

// RnumCleared returns if the "rnum" field was cleared in this mutation.
func (m *PermsMutation) RnumCleared() bool {
	_, ok := m.clearedFields[perms.FieldRnum]
	return ok
}

// ResetRnum resets all changes to the "rnum" field.
func (m *PermsMutation) ResetRnum() {
	m.rnum = nil
	m.addrnum = nil
	delete(m.clearedFields, perms.FieldRnum)
}

// SetBldNm sets the "bld_nm" field.
func (m *PermsMutation) SetBldNm(s string) {
	m.bld_nm = &s
}

// BldNm returns the value of the "bld_nm" field in the mutation.
func (m *PermsMutation) BldNm() (r string, exists bool) {
	v := m.bld_nm
	if v == nil {
		return
	}
	return *v, true
}

// OldBldNm returns the old "bld_nm" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldBldNm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBldNm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBldNm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBldNm: %w", err)
	}
	return oldValue.BldNm, nil
}

// ClearBldNm clears the value of the "bld_nm" field.
func (m *PermsMutation) ClearBldNm() {
	m.bld_nm = nil
	m.clearedFields[perms.FieldBldNm] = struct{}{}
}

// BldNmCleared returns if the "bld_nm" field was cleared in this mutation.
func (m *PermsMutation) BldNmCleared() bool {
	_, ok := m.clearedFields[perms.FieldBldNm]
	return ok
}

// ResetBldNm resets all changes to the "bld_nm" field.
func (m *PermsMutation) ResetBldNm() {
	m.bld_nm = nil
	delete(m.clearedFields, perms.FieldBldNm)
}

// SetCreatedAt sets the "created_at" field.
func (m *PermsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Perms entity.
// If the Perms object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PermsMutation builder.
func (m *PermsMutation) Where(ps ...predicate.Perms) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Perms, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Perms).
func (m *PermsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermsMutation) Fields() []string {
	fields := make([]string, 0, 44)
	if m.guyukCd != nil {
		fields = append(fields, perms.FieldGuyukCd)
	}
	if m.guyukCdNm != nil {
		fields = append(fields, perms.FieldGuyukCdNm)
	}
	if m.jimokCd != nil {
		fields = append(fields, perms.FieldJimokCd)
	}
	if m.jimokCdNm != nil {
		fields = append(fields, perms.FieldJimokCdNm)
	}
	if m.jiyukCd != nil {
		fields = append(fields, perms.FieldJiyukCd)
	}
	if m.jiyukCdNm != nil {
		fields = append(fields, perms.FieldJiyukCdNm)
	}
	if m.jiguCd != nil {
		fields = append(fields, perms.FieldJiguCd)
	}
	if m.jiguCdNm != nil {
		fields = append(fields, perms.FieldJiguCdNm)
	}
	if m.arch_gb_cd_nm != nil {
		fields = append(fields, perms.FieldArchGBCdNm)
	}
	if m.arch_gb_cd != nil {
		fields = append(fields, perms.FieldArchGBCd)
	}
	if m.plat_area != nil {
		fields = append(fields, perms.FieldPlatArea)
	}
	if m.arch_area != nil {
		fields = append(fields, perms.FieldArchArea)
	}
	if m.bc_rat != nil {
		fields = append(fields, perms.FieldBcRat)
	}
	if m.tot_area != nil {
		fields = append(fields, perms.FieldTotArea)
	}
	if m.vl_rat_estm_tot_area != nil {
		fields = append(fields, perms.FieldVlRatEstmTotArea)
	}
	if m.vl_rat != nil {
		fields = append(fields, perms.FieldVlRat)
	}
	if m.main_bld_cnt != nil {
		fields = append(fields, perms.FieldMainBldCnt)
	}
	if m.atch_bld_dong_cnt != nil {
		fields = append(fields, perms.FieldAtchBldDongCnt)
	}
	if m.main_purps_cd != nil {
		fields = append(fields, perms.FieldMainPurpsCd)
	}
	if m.main_purps_cd_nm != nil {
		fields = append(fields, perms.FieldMainPurpsCdNm)
	}
	if m.hhld_cnt != nil {
		fields = append(fields, perms.FieldHhldCnt)
	}
	if m.ho_cnt != nil {
		fields = append(fields, perms.FieldHoCnt)
	}
	if m.fmly_cnt != nil {
		fields = append(fields, perms.FieldFmlyCnt)
	}
	if m.tot_pkng_cnt != nil {
		fields = append(fields, perms.FieldTotPkngCnt)
	}
	if m.stcns_sched_day != nil {
		fields = append(fields, perms.FieldStcnsSchedDay)
	}
	if m.stcns_delay_day != nil {
		fields = append(fields, perms.FieldStcnsDelayDay)
	}
	if m.real_stcns_day != nil {
		fields = append(fields, perms.FieldRealStcnsDay)
	}
	if m.arch_pms_day != nil {
		fields = append(fields, perms.FieldArchPmsDay)
	}
	if m.use_apr_day != nil {
		fields = append(fields, perms.FieldUseAprDay)
	}
	if m.platPlc != nil {
		fields = append(fields, perms.FieldPlatPlc)
	}
	if m.sigunguCd != nil {
		fields = append(fields, perms.FieldSigunguCd)
	}
	if m.bjdongCd != nil {
		fields = append(fields, perms.FieldBjdongCd)
	}
	if m.platGbCd != nil {
		fields = append(fields, perms.FieldPlatGbCd)
	}
	if m.bun != nil {
		fields = append(fields, perms.FieldBun)
	}
	if m.ji != nil {
		fields = append(fields, perms.FieldJi)
	}
	if m.mgm_pmsrgst_pk != nil {
		fields = append(fields, perms.FieldMgmPmsrgstPk)
	}
	if m.splotNm != nil {
		fields = append(fields, perms.FieldSplotNm)
	}
	if m.block != nil {
		fields = append(fields, perms.FieldBlock)
	}
	if m.lot != nil {
		fields = append(fields, perms.FieldLot)
	}
	if m.crtn_day != nil {
		fields = append(fields, perms.FieldCrtnDay)
	}
	if m.rnum != nil {
		fields = append(fields, perms.FieldRnum)
	}
	if m.bld_nm != nil {
		fields = append(fields, perms.FieldBldNm)
	}
	if m.created_at != nil {
		fields = append(fields, perms.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, perms.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case perms.FieldGuyukCd:
		return m.GuyukCd()
	case perms.FieldGuyukCdNm:
		return m.GuyukCdNm()
	case perms.FieldJimokCd:
		return m.JimokCd()
	case perms.FieldJimokCdNm:
		return m.JimokCdNm()
	case perms.FieldJiyukCd:
		return m.JiyukCd()
	case perms.FieldJiyukCdNm:
		return m.JiyukCdNm()
	case perms.FieldJiguCd:
		return m.JiguCd()
	case perms.FieldJiguCdNm:
		return m.JiguCdNm()
	case perms.FieldArchGBCdNm:
		return m.ArchGBCdNm()
	case perms.FieldArchGBCd:
		return m.ArchGBCd()
	case perms.FieldPlatArea:
		return m.PlatArea()
	case perms.FieldArchArea:
		return m.ArchArea()
	case perms.FieldBcRat:
		return m.BcRat()
	case perms.FieldTotArea:
		return m.TotArea()
	case perms.FieldVlRatEstmTotArea:
		return m.VlRatEstmTotArea()
	case perms.FieldVlRat:
		return m.VlRat()
	case perms.FieldMainBldCnt:
		return m.MainBldCnt()
	case perms.FieldAtchBldDongCnt:
		return m.AtchBldDongCnt()
	case perms.FieldMainPurpsCd:
		return m.MainPurpsCd()
	case perms.FieldMainPurpsCdNm:
		return m.MainPurpsCdNm()
	case perms.FieldHhldCnt:
		return m.HhldCnt()
	case perms.FieldHoCnt:
		return m.HoCnt()
	case perms.FieldFmlyCnt:
		return m.FmlyCnt()
	case perms.FieldTotPkngCnt:
		return m.TotPkngCnt()
	case perms.FieldStcnsSchedDay:
		return m.StcnsSchedDay()
	case perms.FieldStcnsDelayDay:
		return m.StcnsDelayDay()
	case perms.FieldRealStcnsDay:
		return m.RealStcnsDay()
	case perms.FieldArchPmsDay:
		return m.ArchPmsDay()
	case perms.FieldUseAprDay:
		return m.UseAprDay()
	case perms.FieldPlatPlc:
		return m.PlatPlc()
	case perms.FieldSigunguCd:
		return m.SigunguCd()
	case perms.FieldBjdongCd:
		return m.BjdongCd()
	case perms.FieldPlatGbCd:
		return m.PlatGbCd()
	case perms.FieldBun:
		return m.Bun()
	case perms.FieldJi:
		return m.Ji()
	case perms.FieldMgmPmsrgstPk:
		return m.MgmPmsrgstPk()
	case perms.FieldSplotNm:
		return m.SplotNm()
	case perms.FieldBlock:
		return m.Block()
	case perms.FieldLot:
		return m.Lot()
	case perms.FieldCrtnDay:
		return m.CrtnDay()
	case perms.FieldRnum:
		return m.Rnum()
	case perms.FieldBldNm:
		return m.BldNm()
	case perms.FieldCreatedAt:
		return m.CreatedAt()
	case perms.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case perms.FieldGuyukCd:
		return m.OldGuyukCd(ctx)
	case perms.FieldGuyukCdNm:
		return m.OldGuyukCdNm(ctx)
	case perms.FieldJimokCd:
		return m.OldJimokCd(ctx)
	case perms.FieldJimokCdNm:
		return m.OldJimokCdNm(ctx)
	case perms.FieldJiyukCd:
		return m.OldJiyukCd(ctx)
	case perms.FieldJiyukCdNm:
		return m.OldJiyukCdNm(ctx)
	case perms.FieldJiguCd:
		return m.OldJiguCd(ctx)
	case perms.FieldJiguCdNm:
		return m.OldJiguCdNm(ctx)
	case perms.FieldArchGBCdNm:
		return m.OldArchGBCdNm(ctx)
	case perms.FieldArchGBCd:
		return m.OldArchGBCd(ctx)
	case perms.FieldPlatArea:
		return m.OldPlatArea(ctx)
	case perms.FieldArchArea:
		return m.OldArchArea(ctx)
	case perms.FieldBcRat:
		return m.OldBcRat(ctx)
	case perms.FieldTotArea:
		return m.OldTotArea(ctx)
	case perms.FieldVlRatEstmTotArea:
		return m.OldVlRatEstmTotArea(ctx)
	case perms.FieldVlRat:
		return m.OldVlRat(ctx)
	case perms.FieldMainBldCnt:
		return m.OldMainBldCnt(ctx)
	case perms.FieldAtchBldDongCnt:
		return m.OldAtchBldDongCnt(ctx)
	case perms.FieldMainPurpsCd:
		return m.OldMainPurpsCd(ctx)
	case perms.FieldMainPurpsCdNm:
		return m.OldMainPurpsCdNm(ctx)
	case perms.FieldHhldCnt:
		return m.OldHhldCnt(ctx)
	case perms.FieldHoCnt:
		return m.OldHoCnt(ctx)
	case perms.FieldFmlyCnt:
		return m.OldFmlyCnt(ctx)
	case perms.FieldTotPkngCnt:
		return m.OldTotPkngCnt(ctx)
	case perms.FieldStcnsSchedDay:
		return m.OldStcnsSchedDay(ctx)
	case perms.FieldStcnsDelayDay:
		return m.OldStcnsDelayDay(ctx)
	case perms.FieldRealStcnsDay:
		return m.OldRealStcnsDay(ctx)
	case perms.FieldArchPmsDay:
		return m.OldArchPmsDay(ctx)
	case perms.FieldUseAprDay:
		return m.OldUseAprDay(ctx)
	case perms.FieldPlatPlc:
		return m.OldPlatPlc(ctx)
	case perms.FieldSigunguCd:
		return m.OldSigunguCd(ctx)
	case perms.FieldBjdongCd:
		return m.OldBjdongCd(ctx)
	case perms.FieldPlatGbCd:
		return m.OldPlatGbCd(ctx)
	case perms.FieldBun:
		return m.OldBun(ctx)
	case perms.FieldJi:
		return m.OldJi(ctx)
	case perms.FieldMgmPmsrgstPk:
		return m.OldMgmPmsrgstPk(ctx)
	case perms.FieldSplotNm:
		return m.OldSplotNm(ctx)
	case perms.FieldBlock:
		return m.OldBlock(ctx)
	case perms.FieldLot:
		return m.OldLot(ctx)
	case perms.FieldCrtnDay:
		return m.OldCrtnDay(ctx)
	case perms.FieldRnum:
		return m.OldRnum(ctx)
	case perms.FieldBldNm:
		return m.OldBldNm(ctx)
	case perms.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case perms.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Perms field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case perms.FieldGuyukCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuyukCd(v)
		return nil
	case perms.FieldGuyukCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuyukCdNm(v)
		return nil
	case perms.FieldJimokCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJimokCd(v)
		return nil
	case perms.FieldJimokCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJimokCdNm(v)
		return nil
	case perms.FieldJiyukCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiyukCd(v)
		return nil
	case perms.FieldJiyukCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiyukCdNm(v)
		return nil
	case perms.FieldJiguCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiguCd(v)
		return nil
	case perms.FieldJiguCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJiguCdNm(v)
		return nil
	case perms.FieldArchGBCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchGBCdNm(v)
		return nil
	case perms.FieldArchGBCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchGBCd(v)
		return nil
	case perms.FieldPlatArea:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatArea(v)
		return nil
	case perms.FieldArchArea:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchArea(v)
		return nil
	case perms.FieldBcRat:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcRat(v)
		return nil
	case perms.FieldTotArea:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotArea(v)
		return nil
	case perms.FieldVlRatEstmTotArea:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVlRatEstmTotArea(v)
		return nil
	case perms.FieldVlRat:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVlRat(v)
		return nil
	case perms.FieldMainBldCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainBldCnt(v)
		return nil
	case perms.FieldAtchBldDongCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAtchBldDongCnt(v)
		return nil
	case perms.FieldMainPurpsCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainPurpsCd(v)
		return nil
	case perms.FieldMainPurpsCdNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMainPurpsCdNm(v)
		return nil
	case perms.FieldHhldCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHhldCnt(v)
		return nil
	case perms.FieldHoCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHoCnt(v)
		return nil
	case perms.FieldFmlyCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFmlyCnt(v)
		return nil
	case perms.FieldTotPkngCnt:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotPkngCnt(v)
		return nil
	case perms.FieldStcnsSchedDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStcnsSchedDay(v)
		return nil
	case perms.FieldStcnsDelayDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStcnsDelayDay(v)
		return nil
	case perms.FieldRealStcnsDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealStcnsDay(v)
		return nil
	case perms.FieldArchPmsDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArchPmsDay(v)
		return nil
	case perms.FieldUseAprDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseAprDay(v)
		return nil
	case perms.FieldPlatPlc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatPlc(v)
		return nil
	case perms.FieldSigunguCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSigunguCd(v)
		return nil
	case perms.FieldBjdongCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBjdongCd(v)
		return nil
	case perms.FieldPlatGbCd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatGbCd(v)
		return nil
	case perms.FieldBun:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBun(v)
		return nil
	case perms.FieldJi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJi(v)
		return nil
	case perms.FieldMgmPmsrgstPk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMgmPmsrgstPk(v)
		return nil
	case perms.FieldSplotNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSplotNm(v)
		return nil
	case perms.FieldBlock:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case perms.FieldLot:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLot(v)
		return nil
	case perms.FieldCrtnDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrtnDay(v)
		return nil
	case perms.FieldRnum:
		v, ok := value.(uint16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRnum(v)
		return nil
	case perms.FieldBldNm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBldNm(v)
		return nil
	case perms.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case perms.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Perms field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermsMutation) AddedFields() []string {
	var fields []string
	if m.addplat_area != nil {
		fields = append(fields, perms.FieldPlatArea)
	}
	if m.addarch_area != nil {
		fields = append(fields, perms.FieldArchArea)
	}
	if m.addbc_rat != nil {
		fields = append(fields, perms.FieldBcRat)
	}
	if m.addtot_area != nil {
		fields = append(fields, perms.FieldTotArea)
	}
	if m.addvl_rat_estm_tot_area != nil {
		fields = append(fields, perms.FieldVlRatEstmTotArea)
	}
	if m.addvl_rat != nil {
		fields = append(fields, perms.FieldVlRat)
	}
	if m.addmain_bld_cnt != nil {
		fields = append(fields, perms.FieldMainBldCnt)
	}
	if m.addatch_bld_dong_cnt != nil {
		fields = append(fields, perms.FieldAtchBldDongCnt)
	}
	if m.addhhld_cnt != nil {
		fields = append(fields, perms.FieldHhldCnt)
	}
	if m.addho_cnt != nil {
		fields = append(fields, perms.FieldHoCnt)
	}
	if m.addfmly_cnt != nil {
		fields = append(fields, perms.FieldFmlyCnt)
	}
	if m.addtot_pkng_cnt != nil {
		fields = append(fields, perms.FieldTotPkngCnt)
	}
	if m.addrnum != nil {
		fields = append(fields, perms.FieldRnum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case perms.FieldPlatArea:
		return m.AddedPlatArea()
	case perms.FieldArchArea:
		return m.AddedArchArea()
	case perms.FieldBcRat:
		return m.AddedBcRat()
	case perms.FieldTotArea:
		return m.AddedTotArea()
	case perms.FieldVlRatEstmTotArea:
		return m.AddedVlRatEstmTotArea()
	case perms.FieldVlRat:
		return m.AddedVlRat()
	case perms.FieldMainBldCnt:
		return m.AddedMainBldCnt()
	case perms.FieldAtchBldDongCnt:
		return m.AddedAtchBldDongCnt()
	case perms.FieldHhldCnt:
		return m.AddedHhldCnt()
	case perms.FieldHoCnt:
		return m.AddedHoCnt()
	case perms.FieldFmlyCnt:
		return m.AddedFmlyCnt()
	case perms.FieldTotPkngCnt:
		return m.AddedTotPkngCnt()
	case perms.FieldRnum:
		return m.AddedRnum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case perms.FieldPlatArea:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlatArea(v)
		return nil
	case perms.FieldArchArea:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArchArea(v)
		return nil
	case perms.FieldBcRat:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBcRat(v)
		return nil
	case perms.FieldTotArea:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotArea(v)
		return nil
	case perms.FieldVlRatEstmTotArea:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVlRatEstmTotArea(v)
		return nil
	case perms.FieldVlRat:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVlRat(v)
		return nil
	case perms.FieldMainBldCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMainBldCnt(v)
		return nil
	case perms.FieldAtchBldDongCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAtchBldDongCnt(v)
		return nil
	case perms.FieldHhldCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHhldCnt(v)
		return nil
	case perms.FieldHoCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHoCnt(v)
		return nil
	case perms.FieldFmlyCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFmlyCnt(v)
		return nil
	case perms.FieldTotPkngCnt:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotPkngCnt(v)
		return nil
	case perms.FieldRnum:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRnum(v)
		return nil
	}
	return fmt.Errorf("unknown Perms numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(perms.FieldGuyukCd) {
		fields = append(fields, perms.FieldGuyukCd)
	}
	if m.FieldCleared(perms.FieldGuyukCdNm) {
		fields = append(fields, perms.FieldGuyukCdNm)
	}
	if m.FieldCleared(perms.FieldJimokCd) {
		fields = append(fields, perms.FieldJimokCd)
	}
	if m.FieldCleared(perms.FieldJimokCdNm) {
		fields = append(fields, perms.FieldJimokCdNm)
	}
	if m.FieldCleared(perms.FieldJiyukCd) {
		fields = append(fields, perms.FieldJiyukCd)
	}
	if m.FieldCleared(perms.FieldJiyukCdNm) {
		fields = append(fields, perms.FieldJiyukCdNm)
	}
	if m.FieldCleared(perms.FieldJiguCd) {
		fields = append(fields, perms.FieldJiguCd)
	}
	if m.FieldCleared(perms.FieldJiguCdNm) {
		fields = append(fields, perms.FieldJiguCdNm)
	}
	if m.FieldCleared(perms.FieldArchGBCdNm) {
		fields = append(fields, perms.FieldArchGBCdNm)
	}
	if m.FieldCleared(perms.FieldArchGBCd) {
		fields = append(fields, perms.FieldArchGBCd)
	}
	if m.FieldCleared(perms.FieldPlatArea) {
		fields = append(fields, perms.FieldPlatArea)
	}
	if m.FieldCleared(perms.FieldArchArea) {
		fields = append(fields, perms.FieldArchArea)
	}
	if m.FieldCleared(perms.FieldBcRat) {
		fields = append(fields, perms.FieldBcRat)
	}
	if m.FieldCleared(perms.FieldTotArea) {
		fields = append(fields, perms.FieldTotArea)
	}
	if m.FieldCleared(perms.FieldVlRatEstmTotArea) {
		fields = append(fields, perms.FieldVlRatEstmTotArea)
	}
	if m.FieldCleared(perms.FieldVlRat) {
		fields = append(fields, perms.FieldVlRat)
	}
	if m.FieldCleared(perms.FieldMainBldCnt) {
		fields = append(fields, perms.FieldMainBldCnt)
	}
	if m.FieldCleared(perms.FieldAtchBldDongCnt) {
		fields = append(fields, perms.FieldAtchBldDongCnt)
	}
	if m.FieldCleared(perms.FieldMainPurpsCd) {
		fields = append(fields, perms.FieldMainPurpsCd)
	}
	if m.FieldCleared(perms.FieldMainPurpsCdNm) {
		fields = append(fields, perms.FieldMainPurpsCdNm)
	}
	if m.FieldCleared(perms.FieldHhldCnt) {
		fields = append(fields, perms.FieldHhldCnt)
	}
	if m.FieldCleared(perms.FieldHoCnt) {
		fields = append(fields, perms.FieldHoCnt)
	}
	if m.FieldCleared(perms.FieldFmlyCnt) {
		fields = append(fields, perms.FieldFmlyCnt)
	}
	if m.FieldCleared(perms.FieldTotPkngCnt) {
		fields = append(fields, perms.FieldTotPkngCnt)
	}
	if m.FieldCleared(perms.FieldStcnsSchedDay) {
		fields = append(fields, perms.FieldStcnsSchedDay)
	}
	if m.FieldCleared(perms.FieldStcnsDelayDay) {
		fields = append(fields, perms.FieldStcnsDelayDay)
	}
	if m.FieldCleared(perms.FieldRealStcnsDay) {
		fields = append(fields, perms.FieldRealStcnsDay)
	}
	if m.FieldCleared(perms.FieldArchPmsDay) {
		fields = append(fields, perms.FieldArchPmsDay)
	}
	if m.FieldCleared(perms.FieldUseAprDay) {
		fields = append(fields, perms.FieldUseAprDay)
	}
	if m.FieldCleared(perms.FieldPlatPlc) {
		fields = append(fields, perms.FieldPlatPlc)
	}
	if m.FieldCleared(perms.FieldSigunguCd) {
		fields = append(fields, perms.FieldSigunguCd)
	}
	if m.FieldCleared(perms.FieldBjdongCd) {
		fields = append(fields, perms.FieldBjdongCd)
	}
	if m.FieldCleared(perms.FieldPlatGbCd) {
		fields = append(fields, perms.FieldPlatGbCd)
	}
	if m.FieldCleared(perms.FieldBun) {
		fields = append(fields, perms.FieldBun)
	}
	if m.FieldCleared(perms.FieldJi) {
		fields = append(fields, perms.FieldJi)
	}
	if m.FieldCleared(perms.FieldSplotNm) {
		fields = append(fields, perms.FieldSplotNm)
	}
	if m.FieldCleared(perms.FieldBlock) {
		fields = append(fields, perms.FieldBlock)
	}
	if m.FieldCleared(perms.FieldLot) {
		fields = append(fields, perms.FieldLot)
	}
	if m.FieldCleared(perms.FieldCrtnDay) {
		fields = append(fields, perms.FieldCrtnDay)
	}
	if m.FieldCleared(perms.FieldRnum) {
		fields = append(fields, perms.FieldRnum)
	}
	if m.FieldCleared(perms.FieldBldNm) {
		fields = append(fields, perms.FieldBldNm)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermsMutation) ClearField(name string) error {
	switch name {
	case perms.FieldGuyukCd:
		m.ClearGuyukCd()
		return nil
	case perms.FieldGuyukCdNm:
		m.ClearGuyukCdNm()
		return nil
	case perms.FieldJimokCd:
		m.ClearJimokCd()
		return nil
	case perms.FieldJimokCdNm:
		m.ClearJimokCdNm()
		return nil
	case perms.FieldJiyukCd:
		m.ClearJiyukCd()
		return nil
	case perms.FieldJiyukCdNm:
		m.ClearJiyukCdNm()
		return nil
	case perms.FieldJiguCd:
		m.ClearJiguCd()
		return nil
	case perms.FieldJiguCdNm:
		m.ClearJiguCdNm()
		return nil
	case perms.FieldArchGBCdNm:
		m.ClearArchGBCdNm()
		return nil
	case perms.FieldArchGBCd:
		m.ClearArchGBCd()
		return nil
	case perms.FieldPlatArea:
		m.ClearPlatArea()
		return nil
	case perms.FieldArchArea:
		m.ClearArchArea()
		return nil
	case perms.FieldBcRat:
		m.ClearBcRat()
		return nil
	case perms.FieldTotArea:
		m.ClearTotArea()
		return nil
	case perms.FieldVlRatEstmTotArea:
		m.ClearVlRatEstmTotArea()
		return nil
	case perms.FieldVlRat:
		m.ClearVlRat()
		return nil
	case perms.FieldMainBldCnt:
		m.ClearMainBldCnt()
		return nil
	case perms.FieldAtchBldDongCnt:
		m.ClearAtchBldDongCnt()
		return nil
	case perms.FieldMainPurpsCd:
		m.ClearMainPurpsCd()
		return nil
	case perms.FieldMainPurpsCdNm:
		m.ClearMainPurpsCdNm()
		return nil
	case perms.FieldHhldCnt:
		m.ClearHhldCnt()
		return nil
	case perms.FieldHoCnt:
		m.ClearHoCnt()
		return nil
	case perms.FieldFmlyCnt:
		m.ClearFmlyCnt()
		return nil
	case perms.FieldTotPkngCnt:
		m.ClearTotPkngCnt()
		return nil
	case perms.FieldStcnsSchedDay:
		m.ClearStcnsSchedDay()
		return nil
	case perms.FieldStcnsDelayDay:
		m.ClearStcnsDelayDay()
		return nil
	case perms.FieldRealStcnsDay:
		m.ClearRealStcnsDay()
		return nil
	case perms.FieldArchPmsDay:
		m.ClearArchPmsDay()
		return nil
	case perms.FieldUseAprDay:
		m.ClearUseAprDay()
		return nil
	case perms.FieldPlatPlc:
		m.ClearPlatPlc()
		return nil
	case perms.FieldSigunguCd:
		m.ClearSigunguCd()
		return nil
	case perms.FieldBjdongCd:
		m.ClearBjdongCd()
		return nil
	case perms.FieldPlatGbCd:
		m.ClearPlatGbCd()
		return nil
	case perms.FieldBun:
		m.ClearBun()
		return nil
	case perms.FieldJi:
		m.ClearJi()
		return nil
	case perms.FieldSplotNm:
		m.ClearSplotNm()
		return nil
	case perms.FieldBlock:
		m.ClearBlock()
		return nil
	case perms.FieldLot:
		m.ClearLot()
		return nil
	case perms.FieldCrtnDay:
		m.ClearCrtnDay()
		return nil
	case perms.FieldRnum:
		m.ClearRnum()
		return nil
	case perms.FieldBldNm:
		m.ClearBldNm()
		return nil
	}
	return fmt.Errorf("unknown Perms nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermsMutation) ResetField(name string) error {
	switch name {
	case perms.FieldGuyukCd:
		m.ResetGuyukCd()
		return nil
	case perms.FieldGuyukCdNm:
		m.ResetGuyukCdNm()
		return nil
	case perms.FieldJimokCd:
		m.ResetJimokCd()
		return nil
	case perms.FieldJimokCdNm:
		m.ResetJimokCdNm()
		return nil
	case perms.FieldJiyukCd:
		m.ResetJiyukCd()
		return nil
	case perms.FieldJiyukCdNm:
		m.ResetJiyukCdNm()
		return nil
	case perms.FieldJiguCd:
		m.ResetJiguCd()
		return nil
	case perms.FieldJiguCdNm:
		m.ResetJiguCdNm()
		return nil
	case perms.FieldArchGBCdNm:
		m.ResetArchGBCdNm()
		return nil
	case perms.FieldArchGBCd:
		m.ResetArchGBCd()
		return nil
	case perms.FieldPlatArea:
		m.ResetPlatArea()
		return nil
	case perms.FieldArchArea:
		m.ResetArchArea()
		return nil
	case perms.FieldBcRat:
		m.ResetBcRat()
		return nil
	case perms.FieldTotArea:
		m.ResetTotArea()
		return nil
	case perms.FieldVlRatEstmTotArea:
		m.ResetVlRatEstmTotArea()
		return nil
	case perms.FieldVlRat:
		m.ResetVlRat()
		return nil
	case perms.FieldMainBldCnt:
		m.ResetMainBldCnt()
		return nil
	case perms.FieldAtchBldDongCnt:
		m.ResetAtchBldDongCnt()
		return nil
	case perms.FieldMainPurpsCd:
		m.ResetMainPurpsCd()
		return nil
	case perms.FieldMainPurpsCdNm:
		m.ResetMainPurpsCdNm()
		return nil
	case perms.FieldHhldCnt:
		m.ResetHhldCnt()
		return nil
	case perms.FieldHoCnt:
		m.ResetHoCnt()
		return nil
	case perms.FieldFmlyCnt:
		m.ResetFmlyCnt()
		return nil
	case perms.FieldTotPkngCnt:
		m.ResetTotPkngCnt()
		return nil
	case perms.FieldStcnsSchedDay:
		m.ResetStcnsSchedDay()
		return nil
	case perms.FieldStcnsDelayDay:
		m.ResetStcnsDelayDay()
		return nil
	case perms.FieldRealStcnsDay:
		m.ResetRealStcnsDay()
		return nil
	case perms.FieldArchPmsDay:
		m.ResetArchPmsDay()
		return nil
	case perms.FieldUseAprDay:
		m.ResetUseAprDay()
		return nil
	case perms.FieldPlatPlc:
		m.ResetPlatPlc()
		return nil
	case perms.FieldSigunguCd:
		m.ResetSigunguCd()
		return nil
	case perms.FieldBjdongCd:
		m.ResetBjdongCd()
		return nil
	case perms.FieldPlatGbCd:
		m.ResetPlatGbCd()
		return nil
	case perms.FieldBun:
		m.ResetBun()
		return nil
	case perms.FieldJi:
		m.ResetJi()
		return nil
	case perms.FieldMgmPmsrgstPk:
		m.ResetMgmPmsrgstPk()
		return nil
	case perms.FieldSplotNm:
		m.ResetSplotNm()
		return nil
	case perms.FieldBlock:
		m.ResetBlock()
		return nil
	case perms.FieldLot:
		m.ResetLot()
		return nil
	case perms.FieldCrtnDay:
		m.ResetCrtnDay()
		return nil
	case perms.FieldRnum:
		m.ResetRnum()
		return nil
	case perms.FieldBldNm:
		m.ResetBldNm()
		return nil
	case perms.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case perms.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Perms field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Perms unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Perms edge %s", name)
}
