// Code generated by ent, DO NOT EDIT.

package bjd

import (
	"gopms/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldID, id))
}

// BjdongCd applies equality check predicate on the "bjdong_cd" field. It's identical to BjdongCdEQ.
func BjdongCd(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldBjdongCd, v))
}

// SigunguCd applies equality check predicate on the "sigungu_cd" field. It's identical to SigunguCdEQ.
func SigunguCd(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSigunguCd, v))
}

// SidoNm applies equality check predicate on the "sido_nm" field. It's identical to SidoNmEQ.
func SidoNm(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSidoNm, v))
}

// SigunguNm applies equality check predicate on the "sigungu_nm" field. It's identical to SigunguNmEQ.
func SigunguNm(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSigunguNm, v))
}

// DongNm applies equality check predicate on the "dong_nm" field. It's identical to DongNmEQ.
func DongNm(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldDongNm, v))
}

// LiNm applies equality check predicate on the "li_nm" field. It's identical to LiNmEQ.
func LiNm(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldLiNm, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldUpdatedAt, v))
}

// BjdongCdEQ applies the EQ predicate on the "bjdong_cd" field.
func BjdongCdEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldBjdongCd, v))
}

// BjdongCdNEQ applies the NEQ predicate on the "bjdong_cd" field.
func BjdongCdNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldBjdongCd, v))
}

// BjdongCdIn applies the In predicate on the "bjdong_cd" field.
func BjdongCdIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldBjdongCd, vs...))
}

// BjdongCdNotIn applies the NotIn predicate on the "bjdong_cd" field.
func BjdongCdNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldBjdongCd, vs...))
}

// BjdongCdGT applies the GT predicate on the "bjdong_cd" field.
func BjdongCdGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldBjdongCd, v))
}

// BjdongCdGTE applies the GTE predicate on the "bjdong_cd" field.
func BjdongCdGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldBjdongCd, v))
}

// BjdongCdLT applies the LT predicate on the "bjdong_cd" field.
func BjdongCdLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldBjdongCd, v))
}

// BjdongCdLTE applies the LTE predicate on the "bjdong_cd" field.
func BjdongCdLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldBjdongCd, v))
}

// BjdongCdContains applies the Contains predicate on the "bjdong_cd" field.
func BjdongCdContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldBjdongCd, v))
}

// BjdongCdHasPrefix applies the HasPrefix predicate on the "bjdong_cd" field.
func BjdongCdHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldBjdongCd, v))
}

// BjdongCdHasSuffix applies the HasSuffix predicate on the "bjdong_cd" field.
func BjdongCdHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldBjdongCd, v))
}

// BjdongCdEqualFold applies the EqualFold predicate on the "bjdong_cd" field.
func BjdongCdEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldBjdongCd, v))
}

// BjdongCdContainsFold applies the ContainsFold predicate on the "bjdong_cd" field.
func BjdongCdContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldBjdongCd, v))
}

// SigunguCdEQ applies the EQ predicate on the "sigungu_cd" field.
func SigunguCdEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSigunguCd, v))
}

// SigunguCdNEQ applies the NEQ predicate on the "sigungu_cd" field.
func SigunguCdNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldSigunguCd, v))
}

// SigunguCdIn applies the In predicate on the "sigungu_cd" field.
func SigunguCdIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldSigunguCd, vs...))
}

// SigunguCdNotIn applies the NotIn predicate on the "sigungu_cd" field.
func SigunguCdNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldSigunguCd, vs...))
}

// SigunguCdGT applies the GT predicate on the "sigungu_cd" field.
func SigunguCdGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldSigunguCd, v))
}

// SigunguCdGTE applies the GTE predicate on the "sigungu_cd" field.
func SigunguCdGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldSigunguCd, v))
}

// SigunguCdLT applies the LT predicate on the "sigungu_cd" field.
func SigunguCdLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldSigunguCd, v))
}

// SigunguCdLTE applies the LTE predicate on the "sigungu_cd" field.
func SigunguCdLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldSigunguCd, v))
}

// SigunguCdContains applies the Contains predicate on the "sigungu_cd" field.
func SigunguCdContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldSigunguCd, v))
}

// SigunguCdHasPrefix applies the HasPrefix predicate on the "sigungu_cd" field.
func SigunguCdHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldSigunguCd, v))
}

// SigunguCdHasSuffix applies the HasSuffix predicate on the "sigungu_cd" field.
func SigunguCdHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldSigunguCd, v))
}

// SigunguCdEqualFold applies the EqualFold predicate on the "sigungu_cd" field.
func SigunguCdEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldSigunguCd, v))
}

// SigunguCdContainsFold applies the ContainsFold predicate on the "sigungu_cd" field.
func SigunguCdContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldSigunguCd, v))
}

// SidoNmEQ applies the EQ predicate on the "sido_nm" field.
func SidoNmEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSidoNm, v))
}

// SidoNmNEQ applies the NEQ predicate on the "sido_nm" field.
func SidoNmNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldSidoNm, v))
}

// SidoNmIn applies the In predicate on the "sido_nm" field.
func SidoNmIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldSidoNm, vs...))
}

// SidoNmNotIn applies the NotIn predicate on the "sido_nm" field.
func SidoNmNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldSidoNm, vs...))
}

// SidoNmGT applies the GT predicate on the "sido_nm" field.
func SidoNmGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldSidoNm, v))
}

// SidoNmGTE applies the GTE predicate on the "sido_nm" field.
func SidoNmGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldSidoNm, v))
}

// SidoNmLT applies the LT predicate on the "sido_nm" field.
func SidoNmLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldSidoNm, v))
}

// SidoNmLTE applies the LTE predicate on the "sido_nm" field.
func SidoNmLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldSidoNm, v))
}

// SidoNmContains applies the Contains predicate on the "sido_nm" field.
func SidoNmContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldSidoNm, v))
}

// SidoNmHasPrefix applies the HasPrefix predicate on the "sido_nm" field.
func SidoNmHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldSidoNm, v))
}

// SidoNmHasSuffix applies the HasSuffix predicate on the "sido_nm" field.
func SidoNmHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldSidoNm, v))
}

// SidoNmEqualFold applies the EqualFold predicate on the "sido_nm" field.
func SidoNmEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldSidoNm, v))
}

// SidoNmContainsFold applies the ContainsFold predicate on the "sido_nm" field.
func SidoNmContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldSidoNm, v))
}

// SigunguNmEQ applies the EQ predicate on the "sigungu_nm" field.
func SigunguNmEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldSigunguNm, v))
}

// SigunguNmNEQ applies the NEQ predicate on the "sigungu_nm" field.
func SigunguNmNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldSigunguNm, v))
}

// SigunguNmIn applies the In predicate on the "sigungu_nm" field.
func SigunguNmIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldSigunguNm, vs...))
}

// SigunguNmNotIn applies the NotIn predicate on the "sigungu_nm" field.
func SigunguNmNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldSigunguNm, vs...))
}

// SigunguNmGT applies the GT predicate on the "sigungu_nm" field.
func SigunguNmGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldSigunguNm, v))
}

// SigunguNmGTE applies the GTE predicate on the "sigungu_nm" field.
func SigunguNmGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldSigunguNm, v))
}

// SigunguNmLT applies the LT predicate on the "sigungu_nm" field.
func SigunguNmLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldSigunguNm, v))
}

// SigunguNmLTE applies the LTE predicate on the "sigungu_nm" field.
func SigunguNmLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldSigunguNm, v))
}

// SigunguNmContains applies the Contains predicate on the "sigungu_nm" field.
func SigunguNmContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldSigunguNm, v))
}

// SigunguNmHasPrefix applies the HasPrefix predicate on the "sigungu_nm" field.
func SigunguNmHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldSigunguNm, v))
}

// SigunguNmHasSuffix applies the HasSuffix predicate on the "sigungu_nm" field.
func SigunguNmHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldSigunguNm, v))
}

// SigunguNmEqualFold applies the EqualFold predicate on the "sigungu_nm" field.
func SigunguNmEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldSigunguNm, v))
}

// SigunguNmContainsFold applies the ContainsFold predicate on the "sigungu_nm" field.
func SigunguNmContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldSigunguNm, v))
}

// DongNmEQ applies the EQ predicate on the "dong_nm" field.
func DongNmEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldDongNm, v))
}

// DongNmNEQ applies the NEQ predicate on the "dong_nm" field.
func DongNmNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldDongNm, v))
}

// DongNmIn applies the In predicate on the "dong_nm" field.
func DongNmIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldDongNm, vs...))
}

// DongNmNotIn applies the NotIn predicate on the "dong_nm" field.
func DongNmNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldDongNm, vs...))
}

// DongNmGT applies the GT predicate on the "dong_nm" field.
func DongNmGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldDongNm, v))
}

// DongNmGTE applies the GTE predicate on the "dong_nm" field.
func DongNmGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldDongNm, v))
}

// DongNmLT applies the LT predicate on the "dong_nm" field.
func DongNmLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldDongNm, v))
}

// DongNmLTE applies the LTE predicate on the "dong_nm" field.
func DongNmLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldDongNm, v))
}

// DongNmContains applies the Contains predicate on the "dong_nm" field.
func DongNmContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldDongNm, v))
}

// DongNmHasPrefix applies the HasPrefix predicate on the "dong_nm" field.
func DongNmHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldDongNm, v))
}

// DongNmHasSuffix applies the HasSuffix predicate on the "dong_nm" field.
func DongNmHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldDongNm, v))
}

// DongNmEqualFold applies the EqualFold predicate on the "dong_nm" field.
func DongNmEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldDongNm, v))
}

// DongNmContainsFold applies the ContainsFold predicate on the "dong_nm" field.
func DongNmContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldDongNm, v))
}

// LiNmEQ applies the EQ predicate on the "li_nm" field.
func LiNmEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldLiNm, v))
}

// LiNmNEQ applies the NEQ predicate on the "li_nm" field.
func LiNmNEQ(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldLiNm, v))
}

// LiNmIn applies the In predicate on the "li_nm" field.
func LiNmIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldLiNm, vs...))
}

// LiNmNotIn applies the NotIn predicate on the "li_nm" field.
func LiNmNotIn(vs ...string) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldLiNm, vs...))
}

// LiNmGT applies the GT predicate on the "li_nm" field.
func LiNmGT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldLiNm, v))
}

// LiNmGTE applies the GTE predicate on the "li_nm" field.
func LiNmGTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldLiNm, v))
}

// LiNmLT applies the LT predicate on the "li_nm" field.
func LiNmLT(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldLiNm, v))
}

// LiNmLTE applies the LTE predicate on the "li_nm" field.
func LiNmLTE(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldLiNm, v))
}

// LiNmContains applies the Contains predicate on the "li_nm" field.
func LiNmContains(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContains(FieldLiNm, v))
}

// LiNmHasPrefix applies the HasPrefix predicate on the "li_nm" field.
func LiNmHasPrefix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasPrefix(FieldLiNm, v))
}

// LiNmHasSuffix applies the HasSuffix predicate on the "li_nm" field.
func LiNmHasSuffix(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldHasSuffix(FieldLiNm, v))
}

// LiNmEqualFold applies the EqualFold predicate on the "li_nm" field.
func LiNmEqualFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldEqualFold(FieldLiNm, v))
}

// LiNmContainsFold applies the ContainsFold predicate on the "li_nm" field.
func LiNmContainsFold(v string) predicate.Bjd {
	return predicate.Bjd(sql.FieldContainsFold(FieldLiNm, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bjd {
	return predicate.Bjd(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJibun applies the HasEdge predicate on the "jibun" edge.
func HasJibun() predicate.Bjd {
	return predicate.Bjd(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JibunTable, JibunColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJibunWith applies the HasEdge predicate on the "jibun" edge with a given conditions (other predicates).
func HasJibunWith(preds ...predicate.Jibun) predicate.Bjd {
	return predicate.Bjd(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JibunInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JibunTable, JibunColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bjd) predicate.Bjd {
	return predicate.Bjd(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bjd) predicate.Bjd {
	return predicate.Bjd(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bjd) predicate.Bjd {
	return predicate.Bjd(func(s *sql.Selector) {
		p(s.Not())
	})
}
