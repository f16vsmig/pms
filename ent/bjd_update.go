// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gopms/ent/bjd"
	"gopms/ent/jibun"
	"gopms/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BjdUpdate is the builder for updating Bjd entities.
type BjdUpdate struct {
	config
	hooks    []Hook
	mutation *BjdMutation
}

// Where appends a list predicates to the BjdUpdate builder.
func (bu *BjdUpdate) Where(ps ...predicate.Bjd) *BjdUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBjdongCd sets the "bjdong_cd" field.
func (bu *BjdUpdate) SetBjdongCd(s string) *BjdUpdate {
	bu.mutation.SetBjdongCd(s)
	return bu
}

// SetSigunguCd sets the "sigungu_cd" field.
func (bu *BjdUpdate) SetSigunguCd(s string) *BjdUpdate {
	bu.mutation.SetSigunguCd(s)
	return bu
}

// SetSidoNm sets the "sido_nm" field.
func (bu *BjdUpdate) SetSidoNm(s string) *BjdUpdate {
	bu.mutation.SetSidoNm(s)
	return bu
}

// SetSigunguNm sets the "sigungu_nm" field.
func (bu *BjdUpdate) SetSigunguNm(s string) *BjdUpdate {
	bu.mutation.SetSigunguNm(s)
	return bu
}

// SetDongNm sets the "dong_nm" field.
func (bu *BjdUpdate) SetDongNm(s string) *BjdUpdate {
	bu.mutation.SetDongNm(s)
	return bu
}

// SetLiNm sets the "li_nm" field.
func (bu *BjdUpdate) SetLiNm(s string) *BjdUpdate {
	bu.mutation.SetLiNm(s)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BjdUpdate) SetUpdatedAt(t time.Time) *BjdUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BjdUpdate) SetNillableUpdatedAt(t *time.Time) *BjdUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// AddJibunIDs adds the "jibun" edge to the Jibun entity by IDs.
func (bu *BjdUpdate) AddJibunIDs(ids ...int) *BjdUpdate {
	bu.mutation.AddJibunIDs(ids...)
	return bu
}

// AddJibun adds the "jibun" edges to the Jibun entity.
func (bu *BjdUpdate) AddJibun(j ...*Jibun) *BjdUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return bu.AddJibunIDs(ids...)
}

// Mutation returns the BjdMutation object of the builder.
func (bu *BjdUpdate) Mutation() *BjdMutation {
	return bu.mutation
}

// ClearJibun clears all "jibun" edges to the Jibun entity.
func (bu *BjdUpdate) ClearJibun() *BjdUpdate {
	bu.mutation.ClearJibun()
	return bu
}

// RemoveJibunIDs removes the "jibun" edge to Jibun entities by IDs.
func (bu *BjdUpdate) RemoveJibunIDs(ids ...int) *BjdUpdate {
	bu.mutation.RemoveJibunIDs(ids...)
	return bu
}

// RemoveJibun removes "jibun" edges to Jibun entities.
func (bu *BjdUpdate) RemoveJibun(j ...*Jibun) *BjdUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return bu.RemoveJibunIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BjdUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BjdMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BjdUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BjdUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BjdUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BjdUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bjd.Table, bjd.Columns, sqlgraph.NewFieldSpec(bjd.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BjdongCd(); ok {
		_spec.SetField(bjd.FieldBjdongCd, field.TypeString, value)
	}
	if value, ok := bu.mutation.SigunguCd(); ok {
		_spec.SetField(bjd.FieldSigunguCd, field.TypeString, value)
	}
	if value, ok := bu.mutation.SidoNm(); ok {
		_spec.SetField(bjd.FieldSidoNm, field.TypeString, value)
	}
	if value, ok := bu.mutation.SigunguNm(); ok {
		_spec.SetField(bjd.FieldSigunguNm, field.TypeString, value)
	}
	if value, ok := bu.mutation.DongNm(); ok {
		_spec.SetField(bjd.FieldDongNm, field.TypeString, value)
	}
	if value, ok := bu.mutation.LiNm(); ok {
		_spec.SetField(bjd.FieldLiNm, field.TypeString, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bjd.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.JibunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedJibunIDs(); len(nodes) > 0 && !bu.mutation.JibunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.JibunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bjd.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BjdUpdateOne is the builder for updating a single Bjd entity.
type BjdUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BjdMutation
}

// SetBjdongCd sets the "bjdong_cd" field.
func (buo *BjdUpdateOne) SetBjdongCd(s string) *BjdUpdateOne {
	buo.mutation.SetBjdongCd(s)
	return buo
}

// SetSigunguCd sets the "sigungu_cd" field.
func (buo *BjdUpdateOne) SetSigunguCd(s string) *BjdUpdateOne {
	buo.mutation.SetSigunguCd(s)
	return buo
}

// SetSidoNm sets the "sido_nm" field.
func (buo *BjdUpdateOne) SetSidoNm(s string) *BjdUpdateOne {
	buo.mutation.SetSidoNm(s)
	return buo
}

// SetSigunguNm sets the "sigungu_nm" field.
func (buo *BjdUpdateOne) SetSigunguNm(s string) *BjdUpdateOne {
	buo.mutation.SetSigunguNm(s)
	return buo
}

// SetDongNm sets the "dong_nm" field.
func (buo *BjdUpdateOne) SetDongNm(s string) *BjdUpdateOne {
	buo.mutation.SetDongNm(s)
	return buo
}

// SetLiNm sets the "li_nm" field.
func (buo *BjdUpdateOne) SetLiNm(s string) *BjdUpdateOne {
	buo.mutation.SetLiNm(s)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BjdUpdateOne) SetUpdatedAt(t time.Time) *BjdUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BjdUpdateOne) SetNillableUpdatedAt(t *time.Time) *BjdUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// AddJibunIDs adds the "jibun" edge to the Jibun entity by IDs.
func (buo *BjdUpdateOne) AddJibunIDs(ids ...int) *BjdUpdateOne {
	buo.mutation.AddJibunIDs(ids...)
	return buo
}

// AddJibun adds the "jibun" edges to the Jibun entity.
func (buo *BjdUpdateOne) AddJibun(j ...*Jibun) *BjdUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return buo.AddJibunIDs(ids...)
}

// Mutation returns the BjdMutation object of the builder.
func (buo *BjdUpdateOne) Mutation() *BjdMutation {
	return buo.mutation
}

// ClearJibun clears all "jibun" edges to the Jibun entity.
func (buo *BjdUpdateOne) ClearJibun() *BjdUpdateOne {
	buo.mutation.ClearJibun()
	return buo
}

// RemoveJibunIDs removes the "jibun" edge to Jibun entities by IDs.
func (buo *BjdUpdateOne) RemoveJibunIDs(ids ...int) *BjdUpdateOne {
	buo.mutation.RemoveJibunIDs(ids...)
	return buo
}

// RemoveJibun removes "jibun" edges to Jibun entities.
func (buo *BjdUpdateOne) RemoveJibun(j ...*Jibun) *BjdUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return buo.RemoveJibunIDs(ids...)
}

// Where appends a list predicates to the BjdUpdate builder.
func (buo *BjdUpdateOne) Where(ps ...predicate.Bjd) *BjdUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BjdUpdateOne) Select(field string, fields ...string) *BjdUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bjd entity.
func (buo *BjdUpdateOne) Save(ctx context.Context) (*Bjd, error) {
	return withHooks[*Bjd, BjdMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BjdUpdateOne) SaveX(ctx context.Context) *Bjd {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BjdUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BjdUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BjdUpdateOne) sqlSave(ctx context.Context) (_node *Bjd, err error) {
	_spec := sqlgraph.NewUpdateSpec(bjd.Table, bjd.Columns, sqlgraph.NewFieldSpec(bjd.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bjd.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bjd.FieldID)
		for _, f := range fields {
			if !bjd.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bjd.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BjdongCd(); ok {
		_spec.SetField(bjd.FieldBjdongCd, field.TypeString, value)
	}
	if value, ok := buo.mutation.SigunguCd(); ok {
		_spec.SetField(bjd.FieldSigunguCd, field.TypeString, value)
	}
	if value, ok := buo.mutation.SidoNm(); ok {
		_spec.SetField(bjd.FieldSidoNm, field.TypeString, value)
	}
	if value, ok := buo.mutation.SigunguNm(); ok {
		_spec.SetField(bjd.FieldSigunguNm, field.TypeString, value)
	}
	if value, ok := buo.mutation.DongNm(); ok {
		_spec.SetField(bjd.FieldDongNm, field.TypeString, value)
	}
	if value, ok := buo.mutation.LiNm(); ok {
		_spec.SetField(bjd.FieldLiNm, field.TypeString, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bjd.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.JibunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedJibunIDs(); len(nodes) > 0 && !buo.mutation.JibunCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.JibunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bjd.JibunTable,
			Columns: []string{bjd.JibunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jibun.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bjd{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bjd.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
